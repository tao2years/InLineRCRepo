#!/usr/bin/env python3

import os
import glob
from pathlib import Path
import sys
from multiprocessing import Pool
import time
import anthropic

# Initialize Anthropic client
client = anthropic.Client()

VALID_LABELS = {
    'no-op', 'local-edit', 'non-local-edit', 'add-imports',
    'complete-implementation', 'complete-pattern', 'infer-intent',
    'infer-refactor', 'unknown'
}

def read_file(path: str) -> str:
    with open(path, 'r') as f:
        return f.read()

def validate_labels(labels: str) -> bool:
    label_list = [l.strip() for l in labels.split(',')]
    return all(label in VALID_LABELS for label in label_list)

def write_labels(path: str, content: str, labels: str):
    if not validate_labels(labels):
        raise ValueError(f"Invalid labels: {labels}")

    # Add labels before the end of the file 
    with open(path, 'w') as f:
        f.write(content.rstrip() + f"\n\n<labels>\n{labels}\n</labels>\n")

    return

def get_labels(content: str, filename: str) -> str:
    # Read the prompt template
    prompt_template = read_file("script/label-data-prompt.md")

    # Replace the placeholders with actual content
    prompt = prompt_template.replace("<training-data-filename>", filename)
    prompt = prompt.replace("<training-data-content>", content)

    response = client.messages.create(
        model="claude-3-5-sonnet-latest",
        max_tokens=1000,
        messages=[
            {"role": "user", "content": prompt}
        ],
    )

    return response.content[0].text.splitlines()[-1]

def process_file(file_path: str):
    try:
        start_time = time.time()
        print(f"Processing {file_path}...")
        content = read_file(file_path)

        if "<labels>" in content:
            print(f"Warning: {file_path} already has labels, skipping...")
            duration = time.time() - start_time
            return True, duration

        filename = os.path.basename(file_path)
        labels = get_labels(content, filename)
        write_labels(file_path, content, labels)
        duration = time.time() - start_time
        print(f"Added labels to {file_path}. Labels: {labels}. Took {duration:.2f}s")
        return True, duration
    except Exception as e:
        print(f"Error processing {file_path}: {str(e)}")
        return False, 0

def main():
    if not os.environ.get("ANTHROPIC_API_KEY"):
        print("Error: ANTHROPIC_API_KEY environment variable not set")
        sys.exit(1)

    if len(sys.argv) != 2:
        print("Error: Please provide path to directory as argument")
        sys.exit(1)

    train_dir = Path(sys.argv[1])
    if not train_dir.exists():
        print(f"Error: {train_dir} directory not found")
        sys.exit(1)

    md_files = glob.glob(str(train_dir / "*.md"))
    start_time = time.time()

    # Process files in parallel using 16 workers
    with Pool(16) as pool:
        results = pool.map(process_file, md_files)

    # Print summary
    successful = sum(1 for r, _ in results if r)
    failed = len(results) - successful
    total_duration = time.time() - start_time
    avg_duration = sum(d for _, d in results) / len(results) if results else 0

    print("\nSummary:")
    print(f"- {successful} files processed successfully, {failed} failed")
    print(f"- Total time: {total_duration:.2f}s")
    print(f"- Average time per file: {avg_duration:.2f}s")

if __name__ == "__main__":
    main()
