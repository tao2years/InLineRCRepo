{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ErrorMessage {\n    public void setSuggestion(String suggestion);\n    public String getSuggestion();\n    public void setExplain(String explain);\n    public String getExplain();\n    public void setErrorMessage(String errorMessage);\n    public String getErrorMessage();\n    public void setErrorCode(String errorCode);\n    public String getErrorCode();\n}\n```\n\nThe context above is:\n```java\npublic abstract class AbstractRemoteCallService {\n    protected static final Logger LOG = LoggerFactory.getLogger(AbstractRemoteCallService.class);\n\n    @Autowired\n    private ServiceAvailableDetectConfig serviceAvailableDetectService;\n\n    private LubanRestTemplate lubanRestTemplate;\n\n    private String server;\n\n    private int connectTimeout = 5000;\n\n    private int readTimeout = 240000;\n\n    private int connectionRequestTimeout = 20000;\n\n    protected LubanRestTemplate getLubanRestTemplate() {\n        if (lubanRestTemplate != null) {\n            return lubanRestTemplate;\n        }\n        synchronized (this) {\n            if (lubanRestTemplate != null) {\n                return lubanRestTemplate;\n            }\n            lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n        }\n        return lubanRestTemplate;\n    }\n\n    protected String getServer() {\n        return server;\n    }\n\n    public void setServer(String server) {\n        this.server = server;\n    }\n\n    protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 新的get方法\n     *\n     * @param url\n     * @param responseType\n     * @param <T>\n     * @return\n     * @author lwx521892\n     * @since 2019年12月19日\n     */\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n\n    /**\n     * 发送Get请求，并且获取结果转换成对象 <br>\n     *\n     * @param url\n     * @param responseType\n     * @return\n     * @author y00438022\n     * @since 2019年6月28日\n     */\n    protected <T> T getForObject(String url, Class<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n        ResponseEntity<String> response = null;\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, String.class);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        String result = response.getBody();\n        return JSON.parseObject(result, responseType);\n    }\n\n    public int getConnectTimeout() {\n        return connectTimeout;\n    }\n\n    public void setConnectTimeout(int connectTimeout) {\n        this.connectTimeout = connectTimeout;\n    }\n\n    public int getReadTimeout() {\n        return readTimeout;\n    }\n\n    public void setReadTimeout(int readTimeout) {\n        this.readTimeout = readTimeout;\n    }\n\n    public int getConnectionRequestTimeout() {\n        return connectionRequestTimeout;\n    }\n\n    public void setConnectionRequestTimeout(int connectionRequestTimeout) {\n        this.connectionRequestTimeout = connectionRequestTimeout;\n    }\n\n}\n```\n\nThe new feature is 通过spring RestTemplate发送post请求.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送post请求，并且获取结果转换成对象 <br>\nprotected <T> T postForObject(String url, Object request, Class<T> responseType)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "lubanjob_f00563108#63", "good_example_response": "```java\n    protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/lubanjob_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.luban.cmdb.client.config.AbstractRemoteCallServiceTest.java#test_postForObject_should_return_not_null_when_condition", "extra_content": {"query": "通过spring RestTemplate发送post请求", "diff_path": "/docker/JavaRunProject/lubanjob_f00563108/diff/63.patch", "test_result": "fail", "file_path": "/common/cmdb-client/src/main/java/com/huawei/luban/cmdb/client/config/AbstractRemoteCallService.java", "start_line": 67, "end_line": 117, "work_dir": "/docker/JavaRunProject/lubanjob_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class FixedThreadPool {\n    public static ThreadPoolExecutor newFixedThreadPool(Integer threads) {\n        return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n    }\n```\n\nThe context below is:\n```java\n\n    public static ThreadPoolExecutor newFixedThreadPool(String name, Integer threads, int queues) {\n        ThreadFactory factory = new ThreadFactory() {\n            private final AtomicInteger integer = new AtomicInteger(0);\n\n            @Override\n            public Thread newThread(@NotNull Runnable r) {\n                return new Thread(r, name + \"-\" + integer.getAndIncrement());\n            }\n        };\n\n        return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS,\n                new LinkedBlockingQueue<Runnable>(queues), factory);\n    }\n}\n```\n\nThe new feature is 指定线程池线程数量，返回满足需要的线程池.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static ThreadPoolExecutor newFixedThreadPool(Integer threads, int queues)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#65", "good_example_response": "```java\n    public static ThreadPoolExecutor newFixedThreadPool(Integer threads) {\n        return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n    }\n```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.FixedThreadPoolTest clean test", "extra_content": {"query": "指定线程池线程数量，返回满足需要的线程池", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/65.patch", "test_result": "pass", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/FixedThreadPool.java", "start_line": 13, "end_line": 16, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Service\n@Slf4j\npublic class KafkaProducerService {\n\n    private final KafkaTemplate<String, String> kafkaTemplate;\n\n    public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {\n        this.kafkaTemplate = kafkaTemplate;\n    }\n\n    /**\n     * 发送消息到 Kafka 指定主题\n     *\n     * @param topic 目标主题\n     * @param key 消息键\n     * @param message 消息内容\n     * @throws IllegalArgumentException 如果主题为空或无效\n     */\n    public ListenableFuture<?> sendMessage(String topic, String key, String message) {\n        if (topic == null || topic.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Topic must not be null or empty\");\n        }\n        return kafkaTemplate.send(topic, key, message);\n    }\n\n    /**\n     * 带回调的方法\n     *\n     * @param topic\n     * @param key\n     * @param message\n     * @param successCallback\n     * @param failureCallback\n     */\n    public void sendWithCallback(String topic, String key, String message, Runnable successCallback,\n        Runnable failureCallback) {\n        ListenableFuture<?> future = sendMessage(topic, key, message);\n        future.addCallback(result -> successCallback.run(), ex -> failureCallback.run());\n    }\n```\n\nThe context below is:\n```java\n\n}\n```\n\nThe new feature is 如何配置KafkaTemplate.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// KafkaTemplate\npublic static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#73", "good_example_response": "```java\n    public static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers) {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n        ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(config);\n        return new KafkaTemplate<>(producerFactory);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-common/pom.xml -Dtest=com.huaweicloud.devspore.cic.common.kafka.KafkaProducerWithConfigTest clean test", "extra_content": {"query": "如何配置KafkaTemplate", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/73.patch", "test_result": "pass", "file_path": "/devspore-cic-common/src/main/java/com/huaweicloud/devspore/cic/common/kafka/KafkaProducerService.java", "start_line": 63, "end_line": 72, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Service\n@Slf4j\npublic class KafkaProducerService {\n\n    private final KafkaTemplate<String, String> kafkaTemplate;\n\n    public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {\n        this.kafkaTemplate = kafkaTemplate;\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 带回调的方法\n     *\n     * @param topic\n     * @param key\n     * @param message\n     * @param successCallback\n     * @param failureCallback\n     */\n    public void sendWithCallback(String topic, String key, String message, Runnable successCallback,\n        Runnable failureCallback) {\n        ListenableFuture<?> future = sendMessage(topic, key, message);\n        future.addCallback(result -> successCallback.run(), ex -> failureCallback.run());\n    }\n\n    /**\n     * KafkaTemplate\n     * \n     * @param bootstrapServers\n     * @return\n     */\n    public static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers) {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n        ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(config);\n        return new KafkaTemplate<>(producerFactory);\n    }\n\n}\n```\n\nThe new feature is 使用KafkaTemplate发送消息.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送消息到 Kafka 指定主题\npublic ListenableFuture<?> sendMessage(String topic, String key, String message)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#74", "good_example_response": "```java\n    public ListenableFuture<?> sendMessage(String topic, String key, String message) {\n        if (topic == null || topic.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Topic must not be null or empty\");\n        }\n        return kafkaTemplate.send(topic, key, message);\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-common/pom.xml -Dtest=com.huaweicloud.devspore.cic.common.kafka.KafkaProducerServiceTest clean test", "extra_content": {"query": "使用KafkaTemplate发送消息", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/74.patch", "test_result": "pass", "file_path": "/devspore-cic-common/src/main/java/com/huaweicloud/devspore/cic/common/kafka/KafkaProducerService.java", "start_line": 35, "end_line": 40, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class SecurityStringUtils {\n    public static String normal(String str);\n    public static String random(int count, boolean letter, boolean numbers);\n    public static String random(int count);\n}\n```\n\nThe context above is:\n```java\n@Service\n@Slf4j\npublic class TokenDaoServiceImpl implements TokenDaoService {\n\n    @Autowired\n    ServiceTokenHistoryMapper serviceTokenHistoryMapper;\n\n    @Autowired\n    ServiceTokenInfoMapper serviceTokenInfoMapper;\n\n    @Autowired\n    CacheTokenService cacheTokenService;\n\n    @Autowired\n    CredentialUserService credentialUserService;\n\n    @Value(\"${fuxi.security.token.length:20}\")\n    Integer tokenLength;\n\n    @Autowired\n    SccCrypto sccCrypto;\n\n    @Override\n    @Cacheable(key = \"'TOKEN:'+#toValidToken\", value = \"token\", unless = \"#result == null\")\n    @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n    public String checkIfTokenValid(String toValidToken) {\n        ServiceTokenInfo result = queryToken(toValidToken);\n        return result == null || !result.getEnable() ? null : result.getServiceName();\n    }\n\n    @Override\n    public boolean refreshToken() {\n        log.info(\"refresh cache to avoid long time query\");\n        queryToken(SecurityStringUtils.random(10));\n        log.info(\"refresh cache finished\");\n        return true;\n    }\n\n    @Override\n    public boolean changeEnableStatus(Long id) {\n        Optional<ServiceTokenInfo> serviceTokenInfoOp = Optional.ofNullable(serviceTokenInfoMapper.selectById(id));\n        if (!serviceTokenInfoOp.isPresent()) {\n            throw new BizException(String.format(\"当前服务不存在，id:%s\", id));\n        }\n        ServiceTokenInfo serviceTokenInfo = serviceTokenInfoOp.get();\n        serviceTokenInfo.setEnable(!serviceTokenInfo.getEnable());\n        serviceTokenInfo.setUpdateTime(new Date());\n        serviceTokenInfoMapper.updateById(serviceTokenInfo);\n        return serviceTokenInfo.getEnable();\n    }\n\n    @Override\n    public ServiceTokenInfo queryById(Long id) {\n        return serviceTokenInfoMapper.selectById(id);\n    }\n\n    @Override\n    public boolean deleteServiceToken(Long id) {\n        int row = serviceTokenInfoMapper.deleteById(id);\n        return row == 1;\n    }\n```\n\nThe context below is:\n```java\n\n    @Override\n    public boolean isAdmin(String sub) {\n        CredentialUserEntity credentialUserEntity = credentialUserService.queryUserInfoBySub(sub);\n        return Optional.ofNullable(serviceTokenInfoMapper.isAdmin(credentialUserEntity.getId())).isPresent();\n    }\n\n    private ServiceTokenInfo queryToken(String toFindToken) {\n        Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n        Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n            .filter(\n                e -> StringUtils.equalsIgnoreCase(toFindToken, cacheTokenService.getDecryptString(e.getEncodeToken())))\n            .findFirst();\n        return opServiceTokenInfo.orElse(null);\n    }\n\n    private String queryEncryToken(String toFindToken) {\n        Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n        Optional<ServiceTokenInfo> optionalServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n            .filter(\n                e -> StringUtils.equalsIgnoreCase(cacheTokenService.getDecryptString(e.getEncodeToken()), toFindToken))\n            .findAny();\n        return optionalServiceTokenInfo.map(ServiceTokenInfo::getEncodeToken).orElse(null);\n    }\n\n    @Override\n    @CacheEvict(key = \"'TOKEN:'+#rawToken\", value = \"token\")\n    @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n    public boolean refreshServiceToken(String rawToken, String newToken) {\n        String encryToken = sccCrypto.encrypt(newToken);\n        String rawEncrtyToken = queryEncryToken(rawToken);\n\n        if (StringUtils.isBlank(rawEncrtyToken)) {\n            return false;\n        }\n        ServiceTokenInfo rawServiceTokenInfo = serviceTokenInfoMapper.findFirstByEncodeToken(rawEncrtyToken);\n        if (rawServiceTokenInfo == null) {\n            log.info(\"query by raw Token error\");\n            return false;\n        }\n\n        String rawServiceTokenInfoServiceName = rawServiceTokenInfo.getServiceName();\n        ServiceTokenInfo.builder().id(rawServiceTokenInfo.getId()).encodeToken(encryToken);\n\n        int updateLines = serviceTokenInfoMapper.refreshServiceToken(rawServiceTokenInfo.getId(), encryToken);\n        if (updateLines == 0) {\n            log.info(\"refresh token error\");\n            return false;\n        }\n\n        ServiceTokenHistory history = ServiceTokenHistory.builder()\n            .priorToken(rawEncrtyToken)\n            .serviceName(rawServiceTokenInfoServiceName)\n            .build();\n        serviceTokenHistoryMapper.insert(history);\n        return true;\n    }\n\n    @Override\n    public String addNewServiceToken(String serviceName) {\n        String newKey = SecurityStringUtils.random(tokenLength, true, true);\n        String newEncrtyToken = sccCrypto.encrypt(newKey);\n\n        ServiceTokenInfo serviceTokenInfo = ServiceTokenInfo.builder()\n            .serviceName(serviceName)\n            .encodeToken(newEncrtyToken)\n            .createTime(new Date())\n            .updateTime(new Date())\n            .build();\n        serviceTokenInfoMapper.insert(serviceTokenInfo);\n        return newKey;\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-page构建分页条件&&使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "api-security-service_z00806805#84", "good_example_response": "```java\n    public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) {\n        Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc(\n            ServiceTokenInfo::getCreateTime);\n        if (StringUtils.isNotBlank(service)) {\n            queryWrapper.like(ServiceTokenInfo::getServiceName, service);\n        }\n        return serviceTokenInfoMapper.selectPage(page, queryWrapper);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/fuxi/security/service/impl/TokenDaoServiceImplTest", "extra_content": {"query": "使用mybatis-plus-page构建分页条件&&使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/api-security-service_z00806805/diff/84.patch", "test_result": "pass", "file_path": "/src/main/java/com/huawei/fuxi/security/service/impl/TokenDaoServiceImpl.java", "start_line": 100, "end_line": 109, "work_dir": "/docker/JavaRunProject/api-security-service_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class ThreadPoolManager {\n```\n\nThe context below is:\n```java\n\n    public static ExecutorService newCachedThreadPool() {\n        return Executors.newCachedThreadPool();\n    }\n\n    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        return Executors.newScheduledThreadPool(corePoolSize);\n    }\n}\n```\n\nThe new feature is 使用java.util.concurrent工具包实现一个创建固定线程数量的线程池的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static ExecutorService newFixedThreadPool(int nThreads)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#95", "good_example_response": "```java\n    public static ExecutorService newFixedThreadPool(int nThreads) {\n        return Executors.newFixedThreadPool(nThreads);\n    }\n```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.ThreadPoolManagerTest clean test", "extra_content": {"query": "使用java.util.concurrent工具包实现一个创建固定线程数量的线程池的方法", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/95.patch", "test_result": "pass", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/ThreadPoolManager.java", "start_line": 12, "end_line": 15, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class ThreadPoolManager {\n    public static ExecutorService newFixedThreadPool(int nThreads) {\n        return Executors.newFixedThreadPool(nThreads);\n    }\n```\n\nThe context below is:\n```java\n\n    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        return Executors.newScheduledThreadPool(corePoolSize);\n    }\n}\n```\n\nThe new feature is 使用java.util.concurrent工具包实现一个创建可动态调整线程数的线程池的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static ExecutorService newCachedThreadPool()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#96", "good_example_response": "```java\n    public static ExecutorService newCachedThreadPool() {\n        return Executors.newCachedThreadPool();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.ThreadPoolManagerTest clean test", "extra_content": {"query": "使用java.util.concurrent工具包实现一个创建可动态调整线程数的线程池的方法", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/96.patch", "test_result": "pass", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/ThreadPoolManager.java", "start_line": 16, "end_line": 19, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class ThreadPoolManager {\n    public static ExecutorService newFixedThreadPool(int nThreads) {\n        return Executors.newFixedThreadPool(nThreads);\n    }\n\n    public static ExecutorService newCachedThreadPool() {\n        return Executors.newCachedThreadPool();\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 使用java.util.concurrent工具包实现一个创建可定时执行任务的线程池的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#97", "good_example_response": "```java\n    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        return Executors.newScheduledThreadPool(corePoolSize);\n    }```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.ThreadPoolManagerTest clean test", "extra_content": {"query": "使用java.util.concurrent工具包实现一个创建可定时执行任务的线程池的方法", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/97.patch", "test_result": "fail", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/ThreadPoolManager.java", "start_line": 20, "end_line": 22, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@Service\npublic class RocketMQServiceImpl implements IRocketMQService {\n\n    @Autowired\n    private RocketMQTemplate rocketMqTemplate;\n\n    @Autowired\n    private DefaultMQProducer producer;\n\n    @Override\n    public SendResult sendMessage(String destination, Object msg) {\n        String[] split = destination.split(\":\");\n        if (split.length == 2) {\n            return this.sendMessage(split[0], split[1], msg);\n        }\n        return this.sendMessage(destination, null, msg);\n    }\n\n    @Override\n    public SendResult sendMessage(String topicName, String tags, Object msg) {\n        return this.sendMessage(topicName, tags, null, msg);\n    }\n\n    @Override\n    public SendResult sendMessage(String topicName, String tags, String key, Object msg) {\n        MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n        //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n        if (StringUtils.isNotBlank(key)) {\n            messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n        }\n        Message<?> message = messageBuilder.build();\n        SendResult sendResult = this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), message);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送同步消息成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n        } else {\n            log.warn(\"MQ发送同步消息不一定成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public SendResult sendMessageBySql(String topicName, Map<String, Object> map, Object msg) {\n        return this.sendMessageBySql(topicName, map, null, msg);\n    }\n\n    @Override\n    public SendResult sendMessageBySql(String topicName, Map<String, Object> map, String key, Object msg) {\n        MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n        //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n        if (StringUtils.isNotBlank(key)) {\n            messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n        }\n        //设置自定义属性\n        if (map != null && !map.isEmpty()) {\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n                messageBuilder.setHeader(entry.getKey(), entry.getValue());\n            }\n        }\n        Message<?> message = messageBuilder.build();\n        SendResult sendResult = this.rocketMqTemplate.syncSend(topicName, message);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"发送同步消息-SQL92模式成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n        } else {\n            log.warn(\"发送同步消息-SQL92模式不一定成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public void sendAsyncMessage(String destination, Object msg, SendCallback sendCallback) {\n    }\n\n    @Override\n    public void sendOneway(String destination, Object msg) {\n        this.rocketMqTemplate.sendOneWay(destination, msg);\n        log.info(\"MQ发送单向消息,destination={} msg={}\", destination, msg);\n    }\n```\n\nThe context below is:\n```java\n\n    @Override\n    public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n    }\n\n    @Override\n    public SendResult sendDelayLevel(String destination, Object msg, int delayTimeLevel) {\n        return this.sendDelayLevel(destination, msg, 30000, delayTimeLevel);\n    }\n\n    @Override\n    public SendResult sendDelayLevel(String destination, Object msg, int timeout, int delayTimeLevel) {\n        Message<?> message = MessageBuilder\n            .withPayload(msg)\n            .build();\n        SendResult sendResult = this.rocketMqTemplate.syncSend(destination, message, timeout, delayTimeLevel);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送延时消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送延时消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public SendResult sendInOrder(String destination, Object msg, String hashKey) {\n        Message<?> message = MessageBuilder\n            .withPayload(msg)\n            .build();\n        //hashKey:  根据其哈希值取模后确定发送到哪一个队列\n        SendResult sendResult = this.rocketMqTemplate.syncSendOrderly(destination, message, hashKey);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送顺序消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送顺序消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public SendResult sendMessageInTransaction(String destination, Object msg, Object arg) {\n        Message<?> message = MessageBuilder\n            //转为JSON格式\n            .withPayload(msg instanceof String ? msg : JSON.toJSONString(msg))\n            .build();\n\n        TransactionSendResult sendResult = rocketMqTemplate.sendMessageInTransaction(destination, message, arg);\n\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送事务消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送事务消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }\n}\n```\n\nThe new feature is 使用RocketMq的DefaultMQProducer实现一个批量发送消息的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic void sendBatchMessage(String destination, List<?> list)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "metadata-center_p00520557#99", "good_example_response": "```java\n    public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -s /usr/lib/apache-maven-3.9.8/conf/settings_wyw.xml -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImplTest.java clean test", "extra_content": {"query": "使用RocketMq的DefaultMQProducer实现一个批量发送消息的方法", "diff_path": "/docker/JavaRunProject/metadata-center_p00520557/diff/99.patch", "test_result": "fail", "file_path": "/src/main/java/com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImpl.java", "start_line": 126, "end_line": 127, "work_dir": "/docker/JavaRunProject/metadata-center_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@Service\npublic class RocketMQServiceImpl implements IRocketMQService {\n\n    @Autowired\n    private RocketMQTemplate rocketMqTemplate;\n\n    @Autowired\n    private DefaultMQProducer producer;\n\n    @Override\n    public SendResult sendMessage(String destination, Object msg) {\n        String[] split = destination.split(\":\");\n        if (split.length == 2) {\n            return this.sendMessage(split[0], split[1], msg);\n        }\n        return this.sendMessage(destination, null, msg);\n    }\n\n    @Override\n    public SendResult sendMessage(String topicName, String tags, Object msg) {\n        return this.sendMessage(topicName, tags, null, msg);\n    }\n\n    @Override\n    public SendResult sendMessage(String topicName, String tags, String key, Object msg) {\n        MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n        //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n        if (StringUtils.isNotBlank(key)) {\n            messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n        }\n        Message<?> message = messageBuilder.build();\n        SendResult sendResult = this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), message);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送同步消息成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n        } else {\n            log.warn(\"MQ发送同步消息不一定成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public SendResult sendMessageBySql(String topicName, Map<String, Object> map, Object msg) {\n        return this.sendMessageBySql(topicName, map, null, msg);\n    }\n\n    @Override\n    public SendResult sendMessageBySql(String topicName, Map<String, Object> map, String key, Object msg) {\n        MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n        //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n        if (StringUtils.isNotBlank(key)) {\n            messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n        }\n        //设置自定义属性\n        if (map != null && !map.isEmpty()) {\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n                messageBuilder.setHeader(entry.getKey(), entry.getValue());\n            }\n        }\n        Message<?> message = messageBuilder.build();\n        SendResult sendResult = this.rocketMqTemplate.syncSend(topicName, message);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"发送同步消息-SQL92模式成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n        } else {\n            log.warn(\"发送同步消息-SQL92模式不一定成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public void sendAsyncMessage(String destination, Object msg, SendCallback sendCallback) {\n    }\n\n    @Override\n    public void sendOneway(String destination, Object msg) {\n        this.rocketMqTemplate.sendOneWay(destination, msg);\n        log.info(\"MQ发送单向消息,destination={} msg={}\", destination, msg);\n    }\n\n    @Override\n    public void sendBatchMessage(String destination, List<?> list) {\n        String topicName = destination;\n        String tags = \"\";\n\n        String[] split = destination.split(\":\");\n        if (split.length == 2) {\n            topicName = split[0];\n            tags = split[1];\n        }\n        this.sendBatchMessage(topicName, tags, 30000L, list);\n    }\n\n    @Override\n    public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n    }\n\n    @Override\n    public SendResult sendDelayLevel(String destination, Object msg, int delayTimeLevel) {\n        return this.sendDelayLevel(destination, msg, 30000, delayTimeLevel);\n    }\n\n    @Override\n    public SendResult sendDelayLevel(String destination, Object msg, int timeout, int delayTimeLevel) {\n        Message<?> message = MessageBuilder\n            .withPayload(msg)\n            .build();\n        SendResult sendResult = this.rocketMqTemplate.syncSend(destination, message, timeout, delayTimeLevel);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送延时消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送延时消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }\n\n    @Override\n    public SendResult sendInOrder(String destination, Object msg, String hashKey) {\n        Message<?> message = MessageBuilder\n            .withPayload(msg)\n            .build();\n        //hashKey:  根据其哈希值取模后确定发送到哪一个队列\n        SendResult sendResult = this.rocketMqTemplate.syncSendOrderly(destination, message, hashKey);\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送顺序消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送顺序消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 使用RocketMq实现一个支持事务机制发送消息的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic SendResult sendMessageInTransaction(String destination, Object msg, Object arg)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "metadata-center_p00520557#100", "good_example_response": "```java\n    public SendResult sendMessageInTransaction(String destination, Object msg, Object arg) {\n        Message<?> message = MessageBuilder\n            //转为JSON格式\n            .withPayload(msg instanceof String ? msg : JSON.toJSONString(msg))\n            .build();\n\n        TransactionSendResult sendResult = rocketMqTemplate.sendMessageInTransaction(destination, message, arg);\n\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送事务消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送事务消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -s /usr/lib/apache-maven-3.9.8/conf/settings_wyw.xml -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImplTest.java clean test", "extra_content": {"query": "使用RocketMq实现一个支持事务机制发送消息的方法", "diff_path": "/docker/JavaRunProject/metadata-center_p00520557/diff/100.patch", "test_result": "pass", "file_path": "/src/main/java/com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImpl.java", "start_line": 164, "end_line": 178, "work_dir": "/docker/JavaRunProject/metadata-center_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class CommonPage {\n    public static <T> CommonPage<T> restPage(IPage<T> pageInfo); /* 将Page分页后的list转为分页信息 */\n}\n\npublic class ExceptionUtils {\n    public static VscServiceException getSqlException(DataAccessException dataAccessException, String msg);\n    public static VscUserException handleUserException(CommonErrorCode commonErrorCode, String msg); /* 处理用户侧异常函数 */\n    public static VscServerException handleServeException(CommonErrorCode commonErrorCode, String msg); /* 处理服务端异常函数 */\n}\n\npublic class CommonUtil {\n    public static int getQuerySwitch(Integer querySwitch); /* 检查前台传入的querySwitch配置参数,如果没传根据shardingSwitch判断 */\n    public boolean checkObjAllFieldsIsNull(Object obj) throws VscServerException; /* 任务列表查询条件不能为空 */\n    public String downloadFile(String srcFilePath, String dstFilePath) throws VscServerException;\n    public void insertLogToDb(List<? extends LogContent> list, Integer count, int operateType, String operateUser, String operateUuid); /* 将这次的操作记录到审计表 */\n    public void changeParamAndCheck(ShowTaskListDataRequestBody showTaskListDataRequestBody, HashMap<String, Object> map); /* 构造符合条件的map */\n    public OperLogEntity getOperLogEntity(List<? extends LogContent> list, Integer count, String operateUser, int operateType,\n                                          String operateLogUuid); /* 构建实体类 */\n    public TableBatchLogContent getOpTableBatchLogEntity(List<String> uuids, int status, String operateType, String tableName); /* 构造表批量操作日志消息体 */\n    public TableLogContent getOperateTableLogEntity(String uuid, int status, String operateType, String tableName); /* 构造scan维度操作日志消息体 */\n    public UserOperLogContent getUserLogEntity(String taskId, int httpStatus, int isForce, String operateType); /* 构造user维度操作日志消息体 */\n    public ArrayList<? extends SelectPageRequestBody> getNotNullField(SelectPageRequestBody selectPageRequestBody) throws IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了SelectPageRequestBody的类 */\n    public ArrayList<? extends RequestBodyUuid> getNotNullField(TableRequestBody tableRequestBody) throws VscUserException, IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了RequestBodyUuid的类 */\n    public List<UserTaskEntity> getUserTaskEntityByUserTaskId(List<String> userTaskIds, Integer querySwitch); /* 通过userTaskId，查找usertaskInfo */\n    public SetScanTaskRequestBody getSetScanTaskRequestBody(String userTaskId, String scanTaskId, String operateUser, Integer isForce); /* 设置失败，重新触发请求体  ---->taskctrl */\n    public CmdTaskRequestBody getCmdTaskRequestBody(String userTaskId, String operateUser, String uuid, Integer isForce); /* 暂停，停止请求体  --->taskctrl */\n    public String checkRouteId(String routeId);\n    public ResponseEntity<?> getPostResponseEntity(Object requestBody, String url, String routeId); /* post请求 */\n    public static void checkIds(String userTaskid, String scanTaskId) throws VscUserException, VscServerException;\n    public static String toCamelCase(String s); /* _|-转小驼峰 */\n    public static void cleanFile(String filePath);\n    public static Long getUploadTimeRange(Long fileSize); /* 获取文件上传需要时间长度 */\n    public static HashMap<String, Object> objectToMap(Object object); /* 将简单的对象转换成map集合,对象中数据不需要做处理，直接可以转换的可以用该函数 */\n    public static String getSubmitTime(String submitTime, String timePrefix, String timeSuffix);\n    public static boolean isNotFinishTask(TaskDataDo taskDataDo); /* 判断任务是否是结束状态， */\n}\n```\n\nThe context above is:\n```java\n@Service(\"tResMsService\")\npublic class TResMsServiceImpl implements TResMsService {\n    private static final Logger LOGGER = LogManager.getLogger(TResMsServiceImpl.class);\n\n    private static final String TABLE_NAME = \"t_res_micro_service\";\n\n    @Autowired\n    CommonUtil commonUtil;\n\n    @Autowired\n    private TResMicroServiceMapper tResMicroServiceMapper;\n\n    @Autowired\n    private TResMsBaseCfgMapper tResMsBaseCfgMapper;\n\n    @Override\n    public CommonPage<TResServiceResp> listService(Integer pageNum, Integer pageSize) throws VscServiceException {\n        LOGGER.info(\"[begin listService][tableName={}]\", TABLE_NAME);\n        IPage page = new Page(pageNum, pageSize);\n        try {\n            IPage<TResServiceResp> servicePage = tResMicroServiceMapper.getServiceList(page);\n            LOGGER.info(\"[end listService][tableName={}]\", TABLE_NAME);\n            return CommonPage.restPage(servicePage);\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[listService from {} error][message = {}]\", TABLE_NAME, e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"query service list from database error\");\n        }\n    }\n\n    @Override\n    public int delete(String uuid) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin deleteResMicroService][tableName={}, operateUser={}, uuid={}]\", TABLE_NAME, operateUser,\n            uuid);\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableLogContent> logContents = new ArrayList<>();\n        try {\n            int result = tResMicroServiceMapper.deleteByPrimaryKey(uuid);\n            TableLogContent logContent = commonUtil.getOperateTableLogEntity(uuid, result, CommonConstans.DELETE, TABLE_NAME);\n            logContents.add(logContent);\n            commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end deleteResMicroService][tableName={}, operateUser={}, uuid={}]\", TABLE_NAME, operateUser,\n                uuid);\n            return result;\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[deleteResMicroService data from {} error][uuid = {}, message = {}]\", TABLE_NAME, uuid,\n                e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"delete micro service data from database error\");\n        }\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public int deleteByUuids(List<String> uuids) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin deleteResMicroServiceList][tableName={}, operateUser={}, uuids={}]\", TABLE_NAME,\n            operateUser, JsonUtils.toJSONString(uuids));\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableBatchLogContent> logContents = new ArrayList<>();\n        try {\n            // 1. 查出微服务名称列表\n            List<String> serviceNameList = tResMicroServiceMapper.getServiceNameList(uuids);\n            // 2. 根据微服务名称删除微服务基础配置\n            if (!serviceNameList.isEmpty()) {\n                tResMsBaseCfgMapper.deleteByMicroService(serviceNameList);\n            }\n            // 3. 删除微服务管理表信息\n            int result = tResMicroServiceMapper.deleteByUuids(uuids);\n            TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(uuids, result, CommonConstans.DELETE, TABLE_NAME);\n            logContents.add(logContent);\n            commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end deleteResMicroServiceList][tableName={}, operateUser={}, uuids={}]\", TABLE_NAME,\n                operateUser, JsonUtils.toJSONString(uuids));\n            return result;\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[deleteResMicroServiceList data from {} error][uuids = {}, message = {}]\", TABLE_NAME, JsonUtils.toJSONString(uuids),\n                e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"batch delete micro service data from database error\");\n        }\n    }\n```\n\nThe context below is:\n```java\n\n    @Override\n    public int update(ResMsRequestBody requestBody) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin updateResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n            operateUser, JsonUtils.toJSONString(requestBody));\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableLogContent> logContents = new ArrayList<>();\n        TResMicroService tResMicroService = new TResMicroService();\n        BeanUtils.copyProperties(requestBody, tResMicroService);\n        tResMicroService.setLastUpdateUser(DevCloudTokenStore.getCurrentUser());\n        try {\n            int result = tResMicroServiceMapper.updateByPrimaryKeySelective(tResMicroService);\n            TableLogContent logContent = commonUtil.getOperateTableLogEntity(tResMicroService.getUuid(), result, CommonConstans.UPDATE, TABLE_NAME);\n            logContents.add(logContent);\n            commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end updateResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n                operateUser, JsonUtils.toJSONString(requestBody));\n            return result;\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[updateResMicroService data into {} error][entity={}, message = {}]\", TABLE_NAME,\n                JsonUtils.toJSONString(tResMicroService), e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"update micro service data into database error\");\n        }\n    }\n\n    @Override\n    public int add(ResMsRequestBody requestBody) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin addResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME, operateUser,\n            JsonUtils.toJSONString(requestBody));\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableLogContent> logContents = new ArrayList<>();\n        TResMicroService tResMicroService = convertToTResAreaRef(requestBody);\n        try {\n            int result = tResMicroServiceMapper.insert(tResMicroService);\n            TableLogContent logContent = commonUtil.getOperateTableLogEntity(tResMicroService.getUuid(), result, CommonConstans.ADD, TABLE_NAME);\n            logContents.add(logContent);\n            commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end addResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n                operateUser, JsonUtils.toJSONString(requestBody));\n            return result;\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[addResMicroService data into {} error][entity = {}, message = {}]\", TABLE_NAME,\n                JsonUtils.toJSONString(tResMicroService), e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"insert micro service data into database error\");\n        }\n    }\n\n    /**\n     * 批量添加微服务\n     *\n     * @param requestBodyList\n     * @return int\n     * @throws\n     **/\n    @Override\n    public int addList(List<ResMsRequestBody> requestBodyList) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin addResMicroServiceList][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n            operateUser, JsonUtils.toJSONString(requestBodyList));\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableBatchLogContent> logContents = new ArrayList<>();\n        List<TResMicroService> msList = new ArrayList<>(requestBodyList.size());\n        for (ResMsRequestBody resMsRequestBody : requestBodyList) {\n            TResMicroService tResMicroService = convertToTResAreaRef(resMsRequestBody);\n            msList.add(tResMicroService);\n        }\n        List<String> uuids = msList.stream().map(TResMicroService::getUuid).collect(Collectors.toList());\n        try {\n            int result = tResMicroServiceMapper.insertList(msList);\n            TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(uuids, result, CommonConstans.ADD, TABLE_NAME);\n            logContents.add(logContent);\n            commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end addResMicroServiceList][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n                operateUser, JsonUtils.toJSONString(requestBodyList));\n            return result;\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[addResMicroServiceList data into {} error][list = {}, message = {}]\", TABLE_NAME,\n                JsonUtils.toJSONString(msList), e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"batch insert micro service data into database error\");\n        }\n    }\n\n    /**\n     * 封装更新和新增需要创建新的对象函数\n     *\n     * @param requestBody 请求体\n     * @return 实例对象\n     */\n    private TResMicroService convertToTResAreaRef(ResMsRequestBody requestBody) {\n        TResMicroService tResMicroService = new TResMicroService();\n        BeanUtils.copyProperties(requestBody, tResMicroService);\n        tResMicroService.setUuid(UUID.randomUUID().toString());\n        tResMicroService.setLastUpdateUser(DevCloudTokenStore.getCurrentUser());\n        return tResMicroService;\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-lambdaquerywrapper构建查询条件&&使用mybatis-plus-page构建分页条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic CommonPage<TResMicroService> list(String serviceName, Integer pageNum, Integer pageSize) throws VscServiceException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "AdminCtrlService_z00806805#106", "good_example_response": "```java\n    public CommonPage<TResMicroService> list(String serviceName, Integer pageNum, Integer pageSize) throws VscServiceException {\n        LOGGER.info(\"[begin listResMicroService][tableName={}, serviceName={}]\", TABLE_NAME, serviceName);\n        Page<TResMicroService> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<TResMicroService> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(StringUtil.isNotEmpty(serviceName), TResMicroService::getServiceName, serviceName);\n        queryWrapper.orderByDesc(true, TResMicroService::getLastUpdateTime);\n        try {\n            Page<TResMicroService> servicePage = tResMicroServiceMapper.selectPage(page, queryWrapper);\n            LOGGER.info(\"[end listResMicroService][tableName={}, serviceName={}]\", TABLE_NAME, serviceName);\n            return CommonPage.restPage(servicePage);\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[listResMicroService data from {} error][serviceName={}, message = {}]\", TABLE_NAME,\n                serviceName, e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"query micro service data from database error\");\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/TResMsServiceImplTest#test_list_should_return_not_null_when_test_data_combination", "extra_content": {"query": "使用mybatis-plus-lambdaquerywrapper构建查询条件&&使用mybatis-plus-page构建分页条件", "diff_path": "/docker/JavaRunProject/AdminCtrlService_z00806805/diff/106.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/TResMsServiceImpl.java", "start_line": 121, "end_line": 137, "work_dir": "/docker/JavaRunProject/AdminCtrlService_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class CommonPage {\n    public static <T> CommonPage<T> restPage(IPage<T> pageInfo); /* 将Page分页后的list转为分页信息 */\n}\n\npublic class ExceptionUtils {\n    public static VscServiceException getSqlException(DataAccessException dataAccessException, String msg);\n    public static VscUserException handleUserException(CommonErrorCode commonErrorCode, String msg); /* 处理用户侧异常函数 */\n    public static VscServerException handleServeException(CommonErrorCode commonErrorCode, String msg); /* 处理服务端异常函数 */\n}\n\npublic class CommonUtil {\n    public static int getQuerySwitch(Integer querySwitch); /* 检查前台传入的querySwitch配置参数,如果没传根据shardingSwitch判断 */\n    public boolean checkObjAllFieldsIsNull(Object obj) throws VscServerException; /* 任务列表查询条件不能为空 */\n    public String downloadFile(String srcFilePath, String dstFilePath) throws VscServerException;\n    public void insertLogToDb(List<? extends LogContent> list, Integer count, int operateType, String operateUser, String operateUuid); /* 将这次的操作记录到审计表 */\n    public void changeParamAndCheck(ShowTaskListDataRequestBody showTaskListDataRequestBody, HashMap<String, Object> map); /* 构造符合条件的map */\n    public OperLogEntity getOperLogEntity(List<? extends LogContent> list, Integer count, String operateUser, int operateType,\n                                          String operateLogUuid); /* 构建实体类 */\n    public TableBatchLogContent getOpTableBatchLogEntity(List<String> uuids, int status, String operateType, String tableName); /* 构造表批量操作日志消息体 */\n    public TableLogContent getOperateTableLogEntity(String uuid, int status, String operateType, String tableName); /* 构造scan维度操作日志消息体 */\n    public UserOperLogContent getUserLogEntity(String taskId, int httpStatus, int isForce, String operateType); /* 构造user维度操作日志消息体 */\n    public ArrayList<? extends SelectPageRequestBody> getNotNullField(SelectPageRequestBody selectPageRequestBody) throws IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了SelectPageRequestBody的类 */\n    public ArrayList<? extends RequestBodyUuid> getNotNullField(TableRequestBody tableRequestBody) throws VscUserException, IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了RequestBodyUuid的类 */\n    public List<UserTaskEntity> getUserTaskEntityByUserTaskId(List<String> userTaskIds, Integer querySwitch); /* 通过userTaskId，查找usertaskInfo */\n    public SetScanTaskRequestBody getSetScanTaskRequestBody(String userTaskId, String scanTaskId, String operateUser, Integer isForce); /* 设置失败，重新触发请求体  ---->taskctrl */\n    public CmdTaskRequestBody getCmdTaskRequestBody(String userTaskId, String operateUser, String uuid, Integer isForce); /* 暂停，停止请求体  --->taskctrl */\n    public String checkRouteId(String routeId);\n    public ResponseEntity<?> getPostResponseEntity(Object requestBody, String url, String routeId); /* post请求 */\n    public static void checkIds(String userTaskid, String scanTaskId) throws VscUserException, VscServerException;\n    public static String toCamelCase(String s); /* _|-转小驼峰 */\n    public static void cleanFile(String filePath);\n    public static Long getUploadTimeRange(Long fileSize); /* 获取文件上传需要时间长度 */\n    public static HashMap<String, Object> objectToMap(Object object); /* 将简单的对象转换成map集合,对象中数据不需要做处理，直接可以转换的可以用该函数 */\n    public static String getSubmitTime(String submitTime, String timePrefix, String timeSuffix);\n    public static boolean isNotFinishTask(TaskDataDo taskDataDo); /* 判断任务是否是结束状态， */\n}\n```\n\nThe context above is:\n```java\n@Service\npublic class BaseLineServiceImpl implements BaseLineService {\n\n    private static final Logger LOGGER = LogManager.getLogger(BaseLineServiceImpl.class);\n\n    @Resource\n    private CommonUtil commonUtil;\n\n    @Resource(name = \"redisPipelineDegradeUtils\")\n    RedisPipelineDegradeUtils redisPipelineUtils;\n\n    @Resource(name = \"redis2PipelineDegradeUtils\")\n    RedisPipelineDegradeUtils redis2PipelineUtils;\n\n    @Resource\n    private BaseLineMapper baseLineMapper;\n```\n\nThe context below is:\n```java\n\n    /**\n     * 批量更新告警基线数据\n     *\n     * @param requestBody\n     * @return 成功更新的条数\n     * @throws VscServiceException\n     **/\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public int batchUpdate(UpdateBaseLineRequestBody requestBody) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin batchUpdate baseline][operateUser = {}, requestBody = {}]\", operateUser, JsonUtils.toJSONString(requestBody));\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableBatchLogContent> logContents = new ArrayList<>();\n        try {\n            // 根据表名对sid进行分组\n            List<BatchBaseLineRequestBody> batchList = requestBody.getBatchList();\n            Map<String, List<String>> tableGroup = getTableGroup(batchList);\n            Map<String, Object> paramMap = getUpdateParamMap(requestBody);\n            AtomicInteger affectRows = new AtomicInteger();\n            // 分组对基线数据分表进行批量更新\n            tableGroup.forEach((key, value) -> {\n                if (StringUtil.isNotEmpty(key) && !CollectionUtils.isEmpty(value)) {\n                    paramMap.put(\"tableName\", key);\n                    paramMap.put(\"sids\", value);\n                    int rows = baseLineMapper.updateBySids(paramMap);\n                    affectRows.addAndGet(rows);\n                    TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(value, rows, CommonConstans.UPDATE, key);\n                    logContents.add(logContent);\n                }\n            });\n            commonUtil.insertLogToDb(logContents, affectRows.get(), OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end batchUpdate baseline][operateUser = {}, requestBody = {}]\", operateUser, JsonUtils.toJSONString(requestBody));\n            return affectRows.get();\n        } catch (Exception e) {\n            LOGGER.error(\"[batch update baseline data to database error][requestBody = {}, message = {}]\", JsonUtils.toJSONString(requestBody),\n                e.toString());\n            throw ExceptionUtils.handleServeException(CommonErrorCode.SERVER_INTERNAL_ERROR, \"batch update baseline data error\");\n        }\n    }\n\n    /**\n     * 批量删除告警基线数据\n     *\n     * @param requestBodyList\n     * @return 成功删除的条数\n     * @throws VscServiceException\n     **/\n    @Override\n    @Transactional(rollbackFor = Exception.class)\n    public int batchDelete(List<BatchBaseLineRequestBody> requestBodyList) throws VscServiceException {\n        String operateUser = DevCloudTokenStore.getUserName();\n        LOGGER.info(\"[begin batchDelete baseline][operateUser = {}, requestBodyList = {}]\", operateUser, JsonUtils.toJSONString(requestBodyList));\n        if (CollectionUtils.isEmpty(requestBodyList)) {\n            throw ExceptionUtils.handleServeException(CommonErrorCode.USER_ILLEGAL_ARGUMENT, \"batch delete baseline argument cannot be empty\");\n        }\n        String operateUuid = UUID.randomUUID().toString();\n        List<TableBatchLogContent> logContents = new ArrayList<>();\n        try {\n            // 根据表名对sid进行分组\n            Map<String, List<String>> tableGroup = getTableGroup(requestBodyList);\n            Map<String, Object> paramMap = new HashMap<>();\n            AtomicInteger affectRows = new AtomicInteger();\n            // 分组对基线数据分表进行批量删除\n            tableGroup.forEach((key, value) -> {\n                if (StringUtil.isNotEmpty(key) && !CollectionUtils.isEmpty(value)) {\n                    paramMap.put(\"tableName\", key);\n                    paramMap.put(\"sids\", value);\n                    int rows = baseLineMapper.deleteBySids(paramMap);\n                    affectRows.addAndGet(rows);\n                    TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(value, rows, CommonConstans.DELETE, key);\n                    logContents.add(logContent);\n                }\n            });\n            // 清理缓存\n            String[] mergeKeys = requestBodyList.stream().map(BatchBaseLineRequestBody::getMergeKey).toArray(String[]::new);\n            LOGGER.info(\"[batch delete labelId from redis begin][keys = {} ]\", JsonUtils.toJSONString(mergeKeys));\n            redisPipelineUtils.multiDel(mergeKeys);\n            redis2PipelineUtils.multiDel(mergeKeys);\n            LOGGER.info(\"[batch delete labelId from redis end][keys = {} ]\", JsonUtils.toJSONString(mergeKeys));\n            commonUtil.insertLogToDb(logContents, affectRows.get(), OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n            LOGGER.info(\"[end batchDelete baseline][operateUser = {}, requestBodyList = {}]\", operateUser, JsonUtils.toJSONString(requestBodyList));\n            return affectRows.get();\n        } catch (Exception e) {\n            LOGGER.error(\"[batch delete baseline data from database error][requestBodyList = {}, message = {}]\",\n                JsonUtils.toJSONString(requestBodyList), e.toString());\n            throw ExceptionUtils.handleServeException(CommonErrorCode.SERVER_INTERNAL_ERROR, \"batch delete baseline data error\");\n        }\n    }\n\n    /**\n     * 将请求体转换成map\n     **/\n    private Map<String, Object> getParamMap(ListBaseLineRequestBody requestBody) throws VscUserException {\n        Map<String, Object> paramMap = new HashMap<>();\n        if (!CollectionUtils.isEmpty(requestBody.getMergeKeys())) {\n            paramMap.put(\"mergeKeys\", requestBody.getMergeKeys());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getScanTaskId())) {\n            paramMap.put(\"scanTaskId\", requestBody.getScanTaskId());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getAnalyseUser())) {\n            paramMap.put(\"analyseUser\", requestBody.getAnalyseUser());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getApproveUser())) {\n            paramMap.put(\"approveUser\", requestBody.getApproveUser());\n        }\n\n        if (requestBody.getAnalyseResult() != null) {\n            paramMap.put(\"analyseResult\", requestBody.getAnalyseResult());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getSynchronizeTimeStart())) {\n            paramMap.put(\"synchronizeTimeStart\", requestBody.getSynchronizeTimeStart());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getSynchronizeTimeEnd())) {\n            paramMap.put(\"synchronizeTimeEnd\", requestBody.getSynchronizeTimeEnd());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getLabelId())) {\n            paramMap.put(\"labelId\", requestBody.getLabelId());\n            String tableName = TaskUtil.getAlarmBaselineTableName(requestBody.getLabelId());\n            paramMap.put(\"tableName\", tableName);\n        } else {\n            getTableNames(paramMap);\n        }\n        return paramMap;\n    }\n\n    /**\n     * 获取分表的所有表名\n     **/\n    private void getTableNames(Map<String, Object> paramMap) {\n        List<String> tableNames = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            tableNames.add(\"t_am_baseline_\" + i);\n        }\n        paramMap.put(\"tableName\", tableNames.get(0));\n        if (tableNames.size() > 1) {\n            String[] otherTables = new String[tableNames.size() - 1];\n            for (int i = 1; i < tableNames.size(); i++) {\n                otherTables[i - 1] = tableNames.get(i);\n            }\n            paramMap.put(\"otherTables\", otherTables);\n        }\n    }\n\n    /**\n     * 将请求体转成更新map\n     **/\n    @NotNull\n    private Map<String, Object> getUpdateParamMap(UpdateBaseLineRequestBody requestBody) {\n        Map<String, Object> paramMap = new HashMap<>();\n        if (requestBody.getAnalyseResult() != null) {\n            paramMap.put(\"analyseResult\", requestBody.getAnalyseResult());\n        }\n        if (StringUtil.isNotEmpty(requestBody.getAnalyseDetail())) {\n            paramMap.put(\"analyseDetail\", requestBody.getAnalyseDetail());\n        }\n\n        if (StringUtil.isNotEmpty(requestBody.getApproveDetail())) {\n            paramMap.put(\"approveDetail\", requestBody.getApproveDetail());\n        }\n        paramMap.put(\"lastUpdateUser\", DevCloudTokenStore.getUserName());\n        return paramMap;\n    }\n\n    /**\n     * 根据分表表名对sid进行分组\n     **/\n    @NotNull\n    private Map<String, List<String>> getTableGroup(List<BatchBaseLineRequestBody> requestBodyList) throws VscUserException {\n        Map<String, List<String>> tableGroup = new HashMap<>();\n        for (BatchBaseLineRequestBody item : requestBodyList) {\n            String tableName = TaskUtil.getAlarmBaselineTableName(item.getLabelId());\n            List<String> sids = tableGroup.getOrDefault(tableName, new ArrayList<>());\n            sids.add(item.getSid());\n            tableGroup.put(tableName, sids);\n        }\n        return tableGroup;\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-page构建分页条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 分页查询告警基线数据\npublic CommonPage<BaseLineEntity> listBaseLine(ListBaseLineRequestBody requestBody) throws VscServiceException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "AdminCtrlService_z00806805#107", "good_example_response": "```java\n    public CommonPage<BaseLineEntity> listBaseLine(ListBaseLineRequestBody requestBody) throws VscServiceException {\n        LOGGER.info(\"[begin listBaseLine][requestBody = {}]\", JsonUtils.toJSONString(requestBody));\n        try {\n            Map<String, Object> paramMap = getParamMap(requestBody);\n            IPage<BaseLineEntity> baseLinePage = new Page<>(requestBody.getPageNum(), requestBody.getPageSize());\n            // 若分表字段不为空，则去该分表查询\n            if (StringUtil.isNotEmpty(requestBody.getLabelId())) {\n                baseLinePage = baseLineMapper.selectPageByLabelId(baseLinePage, paramMap);\n            } else {\n                baseLinePage = baseLineMapper.selectPageByMap(baseLinePage, paramMap);\n            }\n            LOGGER.info(\"[end listBaseLine][requestBody = {}]\", JsonUtils.toJSONString(requestBody));\n            return CommonPage.restPage(baseLinePage);\n        } catch (Exception e) {\n            LOGGER.info(\"[get baseline list from database error][requestBody = {}, message = {}]\", JsonUtils.toJSONString(requestBody), e.toString());\n            throw ExceptionUtils.handleServeException(CommonErrorCode.SERVER_INTERNAL_ERROR, \"list baseline data error\");\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/BaseLineServiceImplTest#test_list_base_line_should_return_not_null_when_test_data_combination", "extra_content": {"query": "使用mybatis-plus-page构建分页条件", "diff_path": "/docker/JavaRunProject/AdminCtrlService_z00806805/diff/107.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/BaseLineServiceImpl.java", "start_line": 77, "end_line": 95, "work_dir": "/docker/JavaRunProject/AdminCtrlService_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@RocketMQTransactionListener\npublic class TransactionListenerImpl implements RocketMQLocalTransactionListener {\n```\n\nThe context below is:\n```java\n\n    /**\n     * 该方法时MQ进行消息事务状态回查、\n     * <p>\n     *\n     * @param msg\n     * @return bollback, commit or unknown\n     */\n    @Override\n    public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n        log.info(\">>>> MQ事务执行器，事务状态回查 message={} <<<<\", msg);\n        try {\n            String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n            OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n\n            log.info(\"事务回查：checkLocalTransaction提交事务啦！payload ={} \", payload);\n            return RocketMQLocalTransactionState.COMMIT;\n        } catch (Exception e) {\n            log.error(\"回调的事务出错啦~ e:{}\", e.getMessage(), e);\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n    }\n}\n```\n\nThe new feature is 使用RocketMq检测半消息，确认当前消息状态并提交事务.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 检测半消息，在该方法中，执行本地事务\npublic RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "cloudoctopusagentgw_p00520557#108", "good_example_response": "```java\n    public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        log.info(\">>>> MQ事务执行器，执行本地事务 message={},args={} <<<<\", msg, arg);\n\n        try {\n            String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n            OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n\n            //模拟业务操作，当paidMoney >5 则提交，否则等事务会查\n            if (payload.getPaidMoney().compareTo(new BigDecimal(\"5\")) > 0) {\n                //提交事务\n                log.info(\"MQ提交事务啦！payload ={} \", payload);\n                return RocketMQLocalTransactionState.COMMIT;\n            }\n\n            //不知道状态，转 checkLocalTransaction 回查执行\n            log.info(\"MQ无法确定，等回查！payload ={} \", payload);\n            return RocketMQLocalTransactionState.UNKNOWN;\n        } catch (Exception e) {\n            log.error(\"事务消息出错啦~ e:{}\", e.getMessage(), e);\n            //回滚\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImplTest.java  clean test", "extra_content": {"query": "使用RocketMq检测半消息，确认当前消息状态并提交事务", "diff_path": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/diff/108.patch", "test_result": "fail", "file_path": "/cloudoctopusagentgw/src/main/java/com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImpl.java", "start_line": 33, "end_line": 56, "work_dir": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@RocketMQTransactionListener\npublic class TransactionListenerImpl implements RocketMQLocalTransactionListener {\n\n    /**\n     * 检测半消息，在该方法中，执行本地事务\n     *\n     * @param msg 发送消息\n     * @param arg 外部参数\n     * @return commit：提交事务，它允许消费者消费此消息。bollback：回滚事务，它代表该消息将被删除，不允许被消费。 unknown：中间状态，它代表需要检查消息队列来确定状态（checkLocalTransaction方法）。\n     */\n    @Override\n    public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        log.info(\">>>> MQ事务执行器，执行本地事务 message={},args={} <<<<\", msg, arg);\n\n        try {\n            String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n            OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n\n            //模拟业务操作，当paidMoney >5 则提交，否则等事务会查\n            if (payload.getPaidMoney().compareTo(new BigDecimal(\"5\")) > 0) {\n                //提交事务\n                log.info(\"MQ提交事务啦！payload ={} \", payload);\n                return RocketMQLocalTransactionState.COMMIT;\n            }\n\n            //不知道状态，转 checkLocalTransaction 回查执行\n            log.info(\"MQ无法确定，等回查！payload ={} \", payload);\n            return RocketMQLocalTransactionState.UNKNOWN;\n        } catch (Exception e) {\n            log.error(\"事务消息出错啦~ e:{}\", e.getMessage(), e);\n            //回滚\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 实现RocketMq事务消息状态回查机制，确认事务消息状态.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 该方法时MQ进行消息事务状态回查、 <p>\npublic RocketMQLocalTransactionState checkLocalTransaction(Message msg)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "cloudoctopusagentgw_p00520557#109", "good_example_response": "```java\n    public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n        log.info(\">>>> MQ事务执行器，事务状态回查 message={} <<<<\", msg);\n        try {\n            String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n            OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n\n            log.info(\"事务回查：checkLocalTransaction提交事务啦！payload ={} \", payload);\n            return RocketMQLocalTransactionState.COMMIT;\n        } catch (Exception e) {\n            log.error(\"回调的事务出错啦~ e:{}\", e.getMessage(), e);\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImplTest.java  clean test", "extra_content": {"query": "实现RocketMq事务消息状态回查机制，确认事务消息状态", "diff_path": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/diff/109.patch", "test_result": "pass", "file_path": "/cloudoctopusagentgw/src/main/java/com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImpl.java", "start_line": 66, "end_line": 78, "work_dir": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@Component\n@RocketMQMessageListener(topic = \"Consumer_Transaction\",//主题\n    consumerGroup = \"Consumer_Transaction_group\"//消费组  唯一\n)\npublic class ConsumerTransaction implements RocketMQListener<OrderPaidEvent>, RocketMQPushConsumerLifecycleListener {\n```\n\nThe context below is:\n```java\n\n    /**\n     * consumer配置都是通过这个\n     *\n     * @param consumer consumer配置\n     */\n    @Override\n    public void prepareStart(DefaultMQPushConsumer consumer) {\n        //设最大重试次数，默认16次\n        //距离上一次重试间隔\n        //第1次：10s    第2次：30s     第3次：1min    第4次：2min     第5次：3min     第6次：4min     第7次：5min    第8次：6min\n        //第9次：7min   第10次：8min   第11次：9min   第12次：10min   第13次：20min   第14次：30min   第15次：1h     第16次：2h   16次以后：都是2h\n        //某条消息在一直消费失败的前提下，将会在接下来的 4 小时 46 分钟之内进行 16 次重试，超过这个时间范围消息将不再重试投递。\n        consumer.setMaxReconsumeTimes(3);\n\n        //关于消费位点,默认CONSUME_FROM_LAST_OFFSET(从上一个偏移量消费)\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n\n        //关于消费位点,从第一个偏移量消费（即全量消费,正常消息相同存储均为 3 天，3 天后会被自动删除）\n        //consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        //关于消费位点,以秒精度回溯消费时间，按指定回溯时间开始消费,默认回溯半小时前的消费时间。\n        //时间格式为20131223171201<br>暗示2013年12月23日17点12分01秒<br>\n        //consumer.setConsumeTimestamp(UtilAll.timeMillisToHumanString3(System.currentTimeMillis()));\n        //consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_TIMESTAMP);\n    }\n}\n```\n\nThe new feature is 使用RocketMq监听消息，对报错消息进行消费重试.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 消费者 程序报错则进行重试\npublic void onMessage(OrderPaidEvent orderPaidEvent)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "cloudoctopusagentgw_p00520557#110", "good_example_response": "```java\n    public void onMessage(OrderPaidEvent orderPaidEvent) {\n        try {\n            //模拟业务逻辑处理中...\n            log.info(\"ConsumerTransaction 事务消息消费 message: {}  \", orderPaidEvent);\n            TimeUnit.SECONDS.sleep(10);\n            //模拟出错，触发重试\n            //            int i = 1 / 0;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage());\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/RocketMQServiceImplTest.java  clean test", "extra_content": {"query": "使用RocketMq监听消息，对报错消息进行消费重试", "diff_path": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/diff/110.patch", "test_result": "pass", "file_path": "/cloudoctopusagentgw/src/main/java/com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/ConsumerTransaction.java", "start_line": 27, "end_line": 39, "work_dir": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Configuration\npublic class ResilienceConfig {\n\n    // 信号量隔离策略配置\n```\n\nThe context below is:\n```java\n\n    // 线程池隔离策略配置\n    @Bean\n    public ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry() {\n        ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()\n                .maxThreadPoolSize(20)           // 最大线程数\n                .coreThreadPoolSize(5)          // 核心线程数\n                .queueCapacity(50)              // 队列容量\n                .build();\n        return ThreadPoolBulkheadRegistry.of(config);\n    }\n\n    @Bean\n    public TimeLimiterRegistry timeLimiterRegistry() {\n        TimeLimiterConfig config = TimeLimiterConfig.custom()\n                .timeoutDuration(Duration.ofSeconds(2))  // 全局默认超时时间\n                .cancelRunningFuture(true)  // 超时后取消正在执行的 Future\n                .build();\n        return TimeLimiterRegistry.of(config);\n    }\n}\n```\n\nThe new feature is 配置Resilience4j的信号量隔离策略，maxConcurrentCalls设置为10，返回BulkheadRegistry对象。.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic BulkheadRegistry bulkheadRegistry()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "CodeHubManagerSvr_w00452591#115", "good_example_response": "```java\n    public BulkheadRegistry bulkheadRegistry() {\n        BulkheadConfig config = BulkheadConfig.custom()\n                .maxConcurrentCalls(10)          // 最大并发数\n                .maxWaitDuration(Duration.ofMillis(50)) // 等待时间\n                .build();\n        return BulkheadRegistry.of(config);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/codehub/manager/service/resilience4j/ResilienceConfigTest.java -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "配置Resilience4j的信号量隔离策略，maxConcurrentCalls设置为10，返回BulkheadRegistry对象。", "diff_path": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/diff/115.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codehub/manager/service/resilience4j/ResilienceConfig.java", "start_line": 19, "end_line": 26, "work_dir": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Configuration\npublic class ResilienceConfig {\n\n    // 信号量隔离策略配置\n    @Bean\n    public BulkheadRegistry bulkheadRegistry() {\n        BulkheadConfig config = BulkheadConfig.custom()\n                .maxConcurrentCalls(10)          // 最大并发数\n                .maxWaitDuration(Duration.ofMillis(50)) // 等待时间\n                .build();\n        return BulkheadRegistry.of(config);\n    }\n\n    // 线程池隔离策略配置\n```\n\nThe context below is:\n```java\n\n    @Bean\n    public TimeLimiterRegistry timeLimiterRegistry() {\n        TimeLimiterConfig config = TimeLimiterConfig.custom()\n                .timeoutDuration(Duration.ofSeconds(2))  // 全局默认超时时间\n                .cancelRunningFuture(true)  // 超时后取消正在执行的 Future\n                .build();\n        return TimeLimiterRegistry.of(config);\n    }\n}\n```\n\nThe new feature is 配置Resilience4j的线程池隔离策略，最大线程数设置为20，核心线程数设置为5，队列容量设置为50，返回ThreadPoolBulkheadRegistry对象。.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "CodeHubManagerSvr_w00452591#116", "good_example_response": "```java\n    public ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry() {\n        ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()\n                .maxThreadPoolSize(20)           // 最大线程数\n                .coreThreadPoolSize(5)          // 核心线程数\n                .queueCapacity(50)              // 队列容量\n                .build();\n        return ThreadPoolBulkheadRegistry.of(config);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/codehub/manager/service/resilience4j/ResilienceConfigTest.java -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "配置Resilience4j的线程池隔离策略，最大线程数设置为20，核心线程数设置为5，队列容量设置为50，返回ThreadPoolBulkheadRegistry对象。", "diff_path": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/diff/116.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codehub/manager/service/resilience4j/ResilienceConfig.java", "start_line": 29, "end_line": 37, "work_dir": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class StringUtil {\n    public static int strBoolToInt(String strBool); /* transfer string type boolean value to int type */\n    public static String escapePercentSymbol(String origin); /* 在String.format场景下，%只能用%%来达到转义目的 */\n    public static String escapeChar(String origin); /* 名称模糊查询处理 */\n    public static boolean isIP(String addr); /* 判断是否为IP */\n    public static String escapeString(String type, String lookup);\n    public String lookup(String str);\n    public static List<String> getEnvironmentAsList(String key); /* get environment from config properties as list. */\n    public static int getEnvironmentAsInteger(String key, int defaultValue);\n    public static boolean getEnvironmentAsBoolean(String key, boolean defaultValue);\n    public static String getEnvironment(String key);\n    public static String getNoNullString(String str);\n    public static String generateUuid();\n    public static boolean areEmpty(String... params);\n    public static boolean isNotEmpty(String str);\n    public static boolean isEmpty(String str);\n}\n```\n\nThe context above is:\n```java\n@Component\npublic class SecurityGroupHelper {\n\n    @Resource\n    private SecurityGroupMapper securityGroupMapper;\n\n    @Resource\n    private PortGroupBindingMapper portGroupBindingMapper;\n\n    public SecurityGroup getSecurityGroup(String groupId) {\n        QueryWrapper<SecurityGroup> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(SecurityGroup::getCloudGroupId, groupId);\n        Page<SecurityGroup> page = new Page<>(1, 1);\n        IPage<SecurityGroup> securityGroupPage = securityGroupMapper.selectPage(page, queryWrapper);\n        List<SecurityGroup> groups = securityGroupPage.getRecords();\n        if (CollectionUtils.isEmpty(groups)) {\n            return null;\n        }\n        return groups.get(0);\n    }\n\n    public int addSecurityGroup(SecurityGroup securityGroup) {\n        return securityGroupMapper.insert(securityGroup);\n    }\n\n    public SecurityGroup getSecurityGroupForInstance(String projectId, String instanceId) {\n        QueryWrapper<SecurityGroup> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(SecurityGroup::getInstanceId, instanceId).eq(SecurityGroup::getProjectId, projectId);\n        return securityGroupMapper.selectOne(queryWrapper);\n    }\n\n    public int deleteSecurityGroup(String id) {\n        return securityGroupMapper.deleteById(id);\n    }\n\n    public int addPortGroupBinding(PortGroupBinding binding) {\n        return portGroupBindingMapper.insert(binding);\n    }\n\n    public int deletePortGroupBindingByGroupId(String groupId) {\n        if (StringUtil.isEmpty(groupId)) {\n            throw new PmtsMgrException(\"group id cannot be empty\");\n        }\n        QueryWrapper<PortGroupBinding> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(PortGroupBinding::getGroupId, groupId);\n        return portGroupBindingMapper.delete(queryWrapper);\n    }\n```\n\nThe context below is:\n```java\n\n    public List<PortGroupBinding> getPortByGroupId(String groupId) {\n        QueryWrapper<PortGroupBinding> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(PortGroupBinding::getGroupId, groupId);\n        List<PortGroupBinding> list = portGroupBindingMapper.selectList(queryWrapper);\n        if (CollectionUtils.isEmpty(list)) {\n            return null;\n        }\n        return list;\n    }\n\n    public int updateSecurityGroup(String id, String cloudId, String name) {\n        if (StringUtil.isEmpty(id)) {\n            throw new PmtsMgrException(\"group id cannot be empty\");\n        }\n        SecurityGroup securityGroup = securityGroupMapper.selectById(id);\n        securityGroup.setCloudGroupId(cloudId);\n        securityGroup.setCloudGroupName(name);\n        return securityGroupMapper.updateById(securityGroup);\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic int deletePortGroupBindingByGroupIdAndPortId(String groupId, List<String> tenantPortIds)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "apic-manager_z00806805#118", "good_example_response": "```java\n    public int deletePortGroupBindingByGroupId(String groupId) {\n        if (StringUtil.isEmpty(groupId)) {\n            throw new PmtsMgrException(\"group id cannot be empty\");\n        }\n        QueryWrapper<PortGroupBinding> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(PortGroupBinding::getGroupId, groupId);\n        return portGroupBindingMapper.delete(queryWrapper);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f src/pmts-parent/pom.xml  -e -Dtest=/com/huawei/cloud/pmts/manager/helper/SecurityGroupHelperTest#test_deletePortGroupBindingByGroupId", "extra_content": {"query": "使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/apic-manager_z00806805/diff/118.patch", "test_result": "fail", "file_path": "/src/pmts-parent/pmts-manager/src/main/java/com/huawei/cloud/pmts/manager/helper/SecurityGroupHelper.java", "start_line": 63, "end_line": 71, "work_dir": "/docker/JavaRunProject/apic-manager_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class KafkaTransactionConfig {\n\n    // 生产者工厂（启用事务支持）\n```\n\nThe context below is:\n```java\n\n    // Kafka事务管理器\n    public KafkaTransactionManager<String, String> kafkaTransactionManager() {\n        return new KafkaTransactionManager<>(producerFactory());\n    }\n\n}\n```\n\nThe new feature is 配置KafkaTransactionManager中的生产者信息.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic ProducerFactory<String, String> producerFactory()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#121", "good_example_response": "```java\n    public ProducerFactory<String, String> producerFactory() {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        configs.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n        configs.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n        configs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"tx-\"); // 事务ID前缀（必须唯一）\n\n        DefaultKafkaProducerFactory<String, String> factory = new DefaultKafkaProducerFactory<>(configs);\n        factory.setTransactionIdPrefix(\"tx-\"); // 设置事务ID前缀\n        return factory;\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-common/pom.xml -Dtest=com.huaweicloud.devspore.cic.common.kafka.transaction.KafkaTransactionConfigTest clean test", "extra_content": {"query": "配置KafkaTransactionManager中的生产者信息", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/121.patch", "test_result": "pass", "file_path": "/devspore-cic-common/src/main/java/com/huaweicloud/devspore/cic/common/kafka/transaction/KafkaTransactionConfig.java", "start_line": 16, "end_line": 27, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class DevsporeAuthSpringContextUtil {\n    public static <T> T getBean(final String className, Class<T> clazz);\n    public static <T> T getBean(Class<T> clazz);\n}\n\npublic class ContextAttributesStore {\n    public static void clear();\n    public static void update(String contextAttrStr);\n    public static String getXContextAttributes();\n    public static String getDestinationVpceps();\n    public static String getVpcSourceIp();\n    public static String getSourceVpce();\n    public static String getSourceIp();\n    public static Boolean getSecureTransport();\n    public static String getUserAgent();\n    public static String getReferer();\n}\n\npublic class RequestContext {\n    public static final ThreadLocal<UserInfo> USER_INFO;\n    public static final ThreadLocal<String> COOKIE_LOCALE; /* locale in cookie */\n    public static final ThreadLocal<List<String>> ROLES; /* roles in token */\n    public static final ThreadLocal<String> TENANT_NAME; /* tenantName id in token */\n    public static final ThreadLocal<String> TENANT_ID; /* tenantId id in token */\n    public static final ThreadLocal<String> USER_NAME; /* userName id in token */\n    public static final ThreadLocal<String> USER_ID; /* userId id in token */\n    public static final ThreadLocal<String> TOKEN;\n    public static final ThreadLocal<String> X_AUTH_TOKEN; /* parsed from \"X-Auth-Token\" in http request header */\n    public static final ThreadLocal<String> CLIENT_IP; /* original client ip */\n    public static void buildUserInfo(UserInfo userInfo);\n    public static void close(); /* 清空ThreadLocal */\n    public static void setUserInfo(UserInfo userInfo);\n    public static UserInfo getUserInfo();\n    public static void setRoles(List<String> roles);\n    public static List<String> getRoles();\n    public static void setTenantName(String tenantName);\n    public static String getTenantName();\n    public static void setTenantId(String tenantId);\n    public static String getTenantId();\n    public static void setToken(String token);\n    public static String getToken();\n    public static String getCookieLocale();\n    public static void setUserName(String userName);\n    public static String getUserName();\n    public static void setUserId(String userId);\n    public static String getUserId();\n    public static String getXAuthToken();\n    public static String getClientIPAddress();\n}\n\npublic class UserProfile {\n    public static UserProfile parse(String xUserProfile);\n    public PrincipalType getPrincipalType();\n    public boolean enablePdp5();\n}\n\npublic class JWTAuth {\n    public static final String AUTHORIZATION_HEADER;\n    public static final String DEFAULT_JWT_HEADER_NAME;\n    public static final String JWT_MISSING;\n    public static final String JWT_AUTH_FAILED;\n    public static final long REFRESH_TIMEOUT;\n    public static final long LIFESPAN;\n    public void auth(String originalJwtToken);\n}\n\npublic class TokenUtils {\n    public static final String SIGN_HEADER_SERVER;\n    public static final String SIGN_HEADER_NONCE;\n    public static final String SIGN_HEADER_TIME;\n    public static final String TOKEN_HEADER_SYSTEM_AK;\n    public static final String CLIENT_HEADER_APP_ID;\n    public static final String TOKEN_HEADER_ADMIN_KEY;\n    public static final String TOKEN_HEADER_TOKEN_NEW;\n    public static final String TOKEN_HEADER_TOKEN_KEY;\n    public static String parseClientIP(HttpServletRequest httpRequest); /* parse original client ip address from http request */\n}\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class IamAuthenticationFilter extends OncePerRequestFilter {\n    IamTokenParser iamTokenParser;\n\n    AuthenticationManager authenticationManager;\n\n    RequestMatcher requestMatcher;\n\n    IamConfigProperties iamConfigProperties;\n\n    JWTAuth jwtAuth;\n\n    private UserStore userStore;\n\n    boolean enableIamV5;\n\n    private static final String X_USER_PROFILE_HEADER = \"X-User-Profile\";\n\n    private static final String X_CONTEXT_ATTRIBUTES_HEADER = \"X-Context-Attributes\";\n\n    private static final String X_SECURITY_TOKEN_HEADER = \"X-Security-Token\";\n\n    private static final String X_SOURCE_ACCOUNT_HEADER = \"X-Source-Account\";\n\n    private static final String X_SOURCE_URN_HEADER = \"X-Source-Urn\";\n\n    private static final String X_REQUEST_PROOF = \"X-Request-Proof\";\n\n    private static final String X_AUTH_TOKEN = \"X-Auth-Token\";\n\n    private static final String LOCALE = \"locale\";\n\n    public IamAuthenticationFilter(RequestMatcher requestMatcher, IamConfigProperties iamConfigProperties,\n        IamTokenParser iamTokenParser, AuthenticationManager authenticationManager) {\n        iamTokenParser.setAuthConfig(getAuthConfig(iamConfigProperties));\n        this.requestMatcher = requestMatcher;\n        this.iamTokenParser = iamTokenParser;\n        this.authenticationManager = authenticationManager;\n        this.iamConfigProperties = iamConfigProperties;\n        this.enableIamV5 = iamConfigProperties.enableIamV5();\n        if (enableIamV5) {\n            this.jwtAuth = new JWTAuth(iamConfigProperties);\n        }\n    }\n\n    private AuthConfig getAuthConfig(IamConfigProperties iamConfigProperties) {\n        AuthConfig authConfig = new AuthConfig();\n        authConfig.setIamUrl(iamConfigProperties.getIamUrl());\n        authConfig.setIamUser(iamConfigProperties.getIamUser());\n        authConfig.setInternalUser(iamConfigProperties.getInternalUser());\n        authConfig.setChineseSupport(iamConfigProperties.isChineseSupport());\n        authConfig.setLanguage(iamConfigProperties.getLanguage());\n        return authConfig;\n    }\n\n    /**\n     * 总体认证逻辑：若用户同时传入pkiToken(iamv3)和x-user-profile、jwt(iamv5)，那么这两个都认证通过才算认证通过，任一解析失败都视为认证失败\n     * iamv5认证：\n     * 1、jwt不一定与x-user-profile同时存在\n     * 2、x-user-profile和x-context-attributes 若有则解析，若无则不处理\n     * IAM认证开启新平面头时：\n     * 使用PKIToken直接调用APIGW，后端服务能获取到PKIToken和XCA\n     * 使用AKSK签名调用APIGW，后端服务能获取到XUP、PKIToken、XCA、XRP\n     */\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws ServletException, IOException {\n        try {\n            if (!requestMatcher.matches(request)) {\n                filterChain.doFilter(request, response);\n                return;\n            }\n\n            userStore = DevsporeAuthSpringContextUtil.getBean(UserStore.class);\n            if (null == userStore) {\n                log.warn(\"No UserStore SPI implementation defined!\");\n            }\n            if (!enableIamV5) {\n                verifyIamV3Token(request, response, filterChain);\n                return;\n            }\n            String jwtToken = getJwtToken(request);\n            if (StringUtils.isEmpty(jwtToken)) {\n                verifyIamV3Token(request, response, filterChain);\n                return;\n            }\n            if (!verifyJwtToken(jwtToken, response)) {\n                return;\n            }\n            if (StringUtils.isNotEmpty(request.getHeader(X_AUTH_TOKEN))) {\n                verifyIamV3Token(request, response, filterChain);\n                return;\n            }\n            updateDevcloudTokenStore(request);\n            filterChain.doFilter(request, response);\n        } finally {\n            DevCloudTokenStore.clearThreadLocal();\n            ContextAttributesStore.clear();\n            RequestContext.close();\n        }\n    }\n\n    private void updateDevcloudTokenStore(HttpServletRequest request) {\n        parseUserProfile(request);\n        DevCloudTokenStore.SECURITY_TOKEN.set(request.getHeader(X_SECURITY_TOKEN_HEADER));\n        DevCloudTokenStore.SOURCE_ACCOUNT.set(request.getHeader(X_SOURCE_ACCOUNT_HEADER));\n        DevCloudTokenStore.SOURCE_URN.set(request.getHeader(X_SOURCE_URN_HEADER));\n        DevCloudTokenStore.X_USER_PROFILE.set(request.getHeader(X_USER_PROFILE_HEADER));\n        DevCloudTokenStore.X_REQUEST_PROOF.set(request.getHeader(X_REQUEST_PROOF));\n        DevCloudTokenStore.setToken(request.getHeader(X_AUTH_TOKEN));\n        initRequestContext(request);\n        ContextAttributesStore.update(request.getHeader(X_CONTEXT_ATTRIBUTES_HEADER));\n        userStore.setUserInfo(buildUserInfo());\n    }\n\n    private void parseUserProfile(HttpServletRequest request) {\n        if (StringUtils.isEmpty(request.getHeader(X_USER_PROFILE_HEADER))) {\n            return;\n        }\n        UserProfile userProfile = UserProfile.parse(request.getHeader(X_USER_PROFILE_HEADER));\n        DevCloudTokenStore.PRINCIPAL_ID.set(userProfile.getPrincipalId());\n        DevCloudTokenStore.PRINCIPAL_URN.set(userProfile.getPrincipalUrn());\n        DevCloudTokenStore.setDomainId(userProfile.getAccountId());\n        DevCloudTokenStore.DOMAIN.set(userProfile.getAccountName());\n        DevCloudTokenStore.IS_ROOT_USER.set(userProfile.isPrincipalIsRootUser());\n        DevCloudTokenStore.SERVICE_PRINCIPAL.set(userProfile.getServicePrincipal());\n        DevCloudTokenStore.ENABLE_PDP5.set(userProfile.enablePdp5());\n        DevCloudTokenStore.GROUP_IDS.set(userProfile.getGroupIds());\n        DevCloudTokenStore.SERVICE_LINKED_AGENCY_NAME.set(userProfile.getServiceLinkedAgencyName());\n        DevCloudTokenStore.PRINCIPAL_TYPE.set(userProfile.getPrincipalType());\n    }\n```\n\nThe context below is:\n```java\n\n    private boolean verifyJwtToken(String jwtToken, HttpServletResponse servletResponse) {\n        try {\n            jwtAuth.auth(jwtToken);\n        } catch (Exception e) {\n            respondError(servletResponse, e.getMessage());\n            return false;\n        }\n        return true;\n    }\n\n    private String getJwtToken(HttpServletRequest servletRequest) {\n        if (JWTParamLocation.QUERY.equals(iamConfigProperties.getJwtParamLocation())) {\n            return servletRequest.getParameter(iamConfigProperties.getJwtParamKey());\n        } else {\n            return servletRequest.getHeader(iamConfigProperties.getJwtParamKey());\n        }\n    }\n\n    public static class IamTokenAuthentication extends CommonTokenHelper implements IamTokenParser {\n        public boolean parse(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {\n            return verifyAndParseToken(servletRequest, servletResponse);\n        }\n\n        @Override\n        public void setAuthConfig(AuthConfig authConfig) {\n            super.setAuthConfig(authConfig);\n        }\n    }\n\n    /**\n     * op_svc_project子账号，内置认证用于服务间调用\n     */\n    public static class IamInternalTokenAuthentication extends CommonTokenHelper implements IamTokenParser {\n        public boolean parse(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {\n            return verifyAndParseToken(servletRequest, servletResponse);\n        }\n\n        @Override\n        public void setAuthConfig(AuthConfig authConfig) {\n            super.setAuthConfig(authConfig);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"parser:\" + iamTokenParser.getClass().getName() + \" request marcher:\" + requestMatcher.toString();\n    }\n\n    private void respondError(HttpServletResponse response, String reason) {\n        if (reason != null) {\n            response.setContentType(ContentType.APPLICATION_JSON.toString());\n            try (PrintWriter printWriter = response.getWriter()) {\n                printWriter.write(reason);\n                response.setStatus(HttpStatus.UNAUTHORIZED.value());\n            } catch (IOException e) {\n                log.error(\"fail to write Unauthorized response\", e);\n            }\n        }\n    }\n\n    private UserInfo buildUserInfo() {\n        UserInfo userInfo = new UserInfo();\n        userInfo.setToken(DevCloudTokenStore.getToken());\n        userInfo.setUserId(DevCloudTokenStore.getUserId());\n        userInfo.setUserName(DevCloudTokenStore.getUserName());\n        userInfo.setTenantId(DevCloudTokenStore.getDomainId());\n        userInfo.setTenantName(DevCloudTokenStore.getDomainName());\n        userInfo.setRoles(DevCloudTokenStore.getRoles());\n        return userInfo;\n    }\n\n    /**\n     * 初始化赋值\n     *\n     * @param httpRequest http请求\n     */\n    private void initRequestContext(HttpServletRequest httpRequest) {\n        RequestContext.USER_ID.set(DevCloudTokenStore.getUserId());\n        RequestContext.X_AUTH_TOKEN.set(DevCloudTokenStore.getToken());\n        RequestContext.USER_NAME.set(DevCloudTokenStore.getUserName());\n        RequestContext.CLIENT_IP.set(TokenUtils.parseClientIP(httpRequest));\n        if (Objects.nonNull(httpRequest) && Objects.nonNull(httpRequest.getCookies())) {\n            Cookie[] cookies = httpRequest.getCookies();\n            Optional<Cookie> localeCookie =\n                Arrays.stream(cookies).filter(cookie -> LOCALE.equals(cookie.getName())).findAny();\n            localeCookie.ifPresent(cook -> RequestContext.COOKIE_LOCALE.set(cook.getValue()));\n        }\n    }\n}\n```\n\nThe new feature is 使用Spring AuthenticationManager验证提供的认证信息（如用户名和密码）是否合法，如果认证成功，继续往下执行，认证失败则异常退出.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprivate void verifyIamV3Token(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "CoralAuth_p00520557#130", "good_example_response": "```java\n    private void verifyIamV3Token(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws ServletException, IOException {\n        if (!iamTokenParser.parse(request, response)) {\n            return;\n        }\n        IamAuthenticationToken authRequest =\n            new IamAuthenticationToken(DevCloudTokenStore.getUserId(), AuthorityUtils.NO_AUTHORITIES);\n        Authentication authentication = authenticationManager.authenticate(authRequest);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        // 初始化RequestContext\n        initRequestContext(request);\n        if (enableIamV5) {\n            updateDevcloudTokenStore(request);\n        } else {\n            userStore.setUserInfo(buildUserInfo());\n        }\n        filterChain.doFilter(request, response);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huaweicloud/devspore/auth/iam/authentication/IamAuthenticationFilterTest.java  clean test", "extra_content": {"query": "使用Spring AuthenticationManager验证提供的认证信息（如用户名和密码）是否合法，如果认证成功，继续往下执行，认证失败则异常退出", "diff_path": "/docker/JavaRunProject/CoralAuth_p00520557/diff/130.patch", "test_result": "pass", "file_path": "/devspore-auth-iam/src/main/java/com/huaweicloud/devspore/auth/iam/authentication/IamAuthenticationFilter.java", "start_line": 182, "end_line": 200, "work_dir": "/docker/JavaRunProject/CoralAuth_p00520557/"}}
