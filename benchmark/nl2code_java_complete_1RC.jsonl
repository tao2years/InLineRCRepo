{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class CommonPage {\n    public static <T> CommonPage<T> restPage(IPage<T> pageInfo); /* 将Page分页后的list转为分页信息 */\n}\n\npublic class ExceptionUtils {\n    public static VscServiceException getSqlException(DataAccessException dataAccessException, String msg);\n    public static VscUserException handleUserException(CommonErrorCode commonErrorCode, String msg); /* 处理用户侧异常函数 */\n    public static VscServerException handleServeException(CommonErrorCode commonErrorCode, String msg); /* 处理服务端异常函数 */\n}\n\npublic class CommonUtil {\n    public static int getQuerySwitch(Integer querySwitch); /* 检查前台传入的querySwitch配置参数,如果没传根据shardingSwitch判断 */\n    public boolean checkObjAllFieldsIsNull(Object obj) throws VscServerException; /* 任务列表查询条件不能为空 */\n    public String downloadFile(String srcFilePath, String dstFilePath) throws VscServerException;\n    public void insertLogToDb(List<? extends LogContent> list, Integer count, int operateType, String operateUser, String operateUuid); /* 将这次的操作记录到审计表 */\n    public void changeParamAndCheck(ShowTaskListDataRequestBody showTaskListDataRequestBody, HashMap<String, Object> map); /* 构造符合条件的map */\n    public OperLogEntity getOperLogEntity(List<? extends LogContent> list, Integer count, String operateUser, int operateType,\n                                          String operateLogUuid); /* 构建实体类 */\n    public TableBatchLogContent getOpTableBatchLogEntity(List<String> uuids, int status, String operateType, String tableName); /* 构造表批量操作日志消息体 */\n    public TableLogContent getOperateTableLogEntity(String uuid, int status, String operateType, String tableName); /* 构造scan维度操作日志消息体 */\n    public UserOperLogContent getUserLogEntity(String taskId, int httpStatus, int isForce, String operateType); /* 构造user维度操作日志消息体 */\n    public ArrayList<? extends SelectPageRequestBody> getNotNullField(SelectPageRequestBody selectPageRequestBody) throws IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了SelectPageRequestBody的类 */\n    public ArrayList<? extends RequestBodyUuid> getNotNullField(TableRequestBody tableRequestBody) throws VscUserException, IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了RequestBodyUuid的类 */\n    public List<UserTaskEntity> getUserTaskEntityByUserTaskId(List<String> userTaskIds, Integer querySwitch); /* 通过userTaskId，查找usertaskInfo */\n    public SetScanTaskRequestBody getSetScanTaskRequestBody(String userTaskId, String scanTaskId, String operateUser, Integer isForce); /* 设置失败，重新触发请求体  ---->taskctrl */\n    public CmdTaskRequestBody getCmdTaskRequestBody(String userTaskId, String operateUser, String uuid, Integer isForce); /* 暂停，停止请求体  --->taskctrl */\n    public String checkRouteId(String routeId);\n    public ResponseEntity<?> getPostResponseEntity(Object requestBody, String url, String routeId); /* post请求 */\n    public static void checkIds(String userTaskid, String scanTaskId) throws VscUserException, VscServerException;\n    public static String toCamelCase(String s); /* _|-转小驼峰 */\n    public static void cleanFile(String filePath);\n    public static Long getUploadTimeRange(Long fileSize); /* 获取文件上传需要时间长度 */\n    public static HashMap<String, Object> objectToMap(Object object); /* 将简单的对象转换成map集合,对象中数据不需要做处理，直接可以转换的可以用该函数 */\n    public static String getSubmitTime(String submitTime, String timePrefix, String timeSuffix);\n    public static boolean isNotFinishTask(TaskDataDo taskDataDo); /* 判断任务是否是结束状态， */\n}\n```\n\nThe context above is:\n```java\n  1: @Service(\"tResMsService\")\n  2: public class TResMsServiceImpl implements TResMsService {\n  3:     private static final Logger LOGGER = LogManager.getLogger(TResMsServiceImpl.class);\n  4: \n  5:     private static final String TABLE_NAME = \"t_res_micro_service\";\n  6: \n  7:     @Autowired\n  8:     CommonUtil commonUtil;\n  9: \n 10:     @Autowired\n 11:     private TResMicroServiceMapper tResMicroServiceMapper;\n 12: \n 13:     @Autowired\n 14:     private TResMsBaseCfgMapper tResMsBaseCfgMapper;\n 15: \n 16:     @Override\n 17:     public CommonPage<TResServiceResp> listService(Integer pageNum, Integer pageSize) throws VscServiceException {\n 18:         LOGGER.info(\"[begin listService][tableName={}]\", TABLE_NAME);\n 19:         IPage page = new Page(pageNum, pageSize);\n 20:         try {\n 21:             IPage<TResServiceResp> servicePage = tResMicroServiceMapper.getServiceList(page);\n 22:             LOGGER.info(\"[end listService][tableName={}]\", TABLE_NAME);\n 23:             return CommonPage.restPage(servicePage);\n 24:         } catch (DataAccessException e) {\n 25:             LOGGER.error(\"[listService from {} error][message = {}]\", TABLE_NAME, e.getMessage());\n 26:             throw ExceptionUtils.getSqlException(e, \"query service list from database error\");\n 27:         }\n 28:     }\n 29: \n 30:     @Override\n 31:     public int delete(String uuid) throws VscServiceException {\n 32:         String operateUser = DevCloudTokenStore.getUserName();\n 33:         LOGGER.info(\"[begin deleteResMicroService][tableName={}, operateUser={}, uuid={}]\", TABLE_NAME, operateUser,\n 34:             uuid);\n 35:         String operateUuid = UUID.randomUUID().toString();\n 36:         List<TableLogContent> logContents = new ArrayList<>();\n 37:         try {\n 38:             int result = tResMicroServiceMapper.deleteByPrimaryKey(uuid);\n 39:             TableLogContent logContent = commonUtil.getOperateTableLogEntity(uuid, result, CommonConstans.DELETE, TABLE_NAME);\n 40:             logContents.add(logContent);\n 41:             commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n 42:             LOGGER.info(\"[end deleteResMicroService][tableName={}, operateUser={}, uuid={}]\", TABLE_NAME, operateUser,\n 43:                 uuid);\n 44:             return result;\n 45:         } catch (DataAccessException e) {\n 46:             LOGGER.error(\"[deleteResMicroService data from {} error][uuid = {}, message = {}]\", TABLE_NAME, uuid,\n 47:                 e.getMessage());\n 48:             throw ExceptionUtils.getSqlException(e, \"delete micro service data from database error\");\n 49:         }\n 50:     }\n 51: \n 52:     @Transactional(rollbackFor = Exception.class)\n 53:     @Override\n 54:     public int deleteByUuids(List<String> uuids) throws VscServiceException {\n 55:         String operateUser = DevCloudTokenStore.getUserName();\n 56:         LOGGER.info(\"[begin deleteResMicroServiceList][tableName={}, operateUser={}, uuids={}]\", TABLE_NAME,\n 57:             operateUser, JsonUtils.toJSONString(uuids));\n 58:         String operateUuid = UUID.randomUUID().toString();\n 59:         List<TableBatchLogContent> logContents = new ArrayList<>();\n 60:         try {\n 61:             // 1. 查出微服务名称列表\n 62:             List<String> serviceNameList = tResMicroServiceMapper.getServiceNameList(uuids);\n 63:             // 2. 根据微服务名称删除微服务基础配置\n 64:             if (!serviceNameList.isEmpty()) {\n 65:                 tResMsBaseCfgMapper.deleteByMicroService(serviceNameList);\n 66:             }\n 67:             // 3. 删除微服务管理表信息\n 68:             int result = tResMicroServiceMapper.deleteByUuids(uuids);\n 69:             TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(uuids, result, CommonConstans.DELETE, TABLE_NAME);\n 70:             logContents.add(logContent);\n 71:             commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n 72:             LOGGER.info(\"[end deleteResMicroServiceList][tableName={}, operateUser={}, uuids={}]\", TABLE_NAME,\n 73:                 operateUser, JsonUtils.toJSONString(uuids));\n 74:             return result;\n 75:         } catch (DataAccessException e) {\n 76:             LOGGER.error(\"[deleteResMicroServiceList data from {} error][uuids = {}, message = {}]\", TABLE_NAME, JsonUtils.toJSONString(uuids),\n 77:                 e.getMessage());\n 78:             throw ExceptionUtils.getSqlException(e, \"batch delete micro service data from database error\");\n 79:         }\n 80:     }\n```\n\nThe context below is:\n```java\n101: @Override\n102:     public int update(ResMsRequestBody requestBody) throws VscServiceException {\n103:         String operateUser = DevCloudTokenStore.getUserName();\n104:         LOGGER.info(\"[begin updateResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n105:             operateUser, JsonUtils.toJSONString(requestBody));\n106:         String operateUuid = UUID.randomUUID().toString();\n107:         List<TableLogContent> logContents = new ArrayList<>();\n108:         TResMicroService tResMicroService = new TResMicroService();\n109:         BeanUtils.copyProperties(requestBody, tResMicroService);\n110:         tResMicroService.setLastUpdateUser(DevCloudTokenStore.getCurrentUser());\n111:         try {\n112:             int result = tResMicroServiceMapper.updateByPrimaryKeySelective(tResMicroService);\n113:             TableLogContent logContent = commonUtil.getOperateTableLogEntity(tResMicroService.getUuid(), result, CommonConstans.UPDATE, TABLE_NAME);\n114:             logContents.add(logContent);\n115:             commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n116:             LOGGER.info(\"[end updateResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n117:                 operateUser, JsonUtils.toJSONString(requestBody));\n118:             return result;\n119:         } catch (DataAccessException e) {\n120:             LOGGER.error(\"[updateResMicroService data into {} error][entity={}, message = {}]\", TABLE_NAME,\n121:                 JsonUtils.toJSONString(tResMicroService), e.getMessage());\n122:             throw ExceptionUtils.getSqlException(e, \"update micro service data into database error\");\n123:         }\n124:     }\n125: \n126:     @Override\n127:     public int add(ResMsRequestBody requestBody) throws VscServiceException {\n128:         String operateUser = DevCloudTokenStore.getUserName();\n129:         LOGGER.info(\"[begin addResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME, operateUser,\n130:             JsonUtils.toJSONString(requestBody));\n131:         String operateUuid = UUID.randomUUID().toString();\n132:         List<TableLogContent> logContents = new ArrayList<>();\n133:         TResMicroService tResMicroService = convertToTResAreaRef(requestBody);\n134:         try {\n135:             int result = tResMicroServiceMapper.insert(tResMicroService);\n136:             TableLogContent logContent = commonUtil.getOperateTableLogEntity(tResMicroService.getUuid(), result, CommonConstans.ADD, TABLE_NAME);\n137:             logContents.add(logContent);\n138:             commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n139:             LOGGER.info(\"[end addResMicroService][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n140:                 operateUser, JsonUtils.toJSONString(requestBody));\n141:             return result;\n142:         } catch (DataAccessException e) {\n143:             LOGGER.error(\"[addResMicroService data into {} error][entity = {}, message = {}]\", TABLE_NAME,\n144:                 JsonUtils.toJSONString(tResMicroService), e.getMessage());\n145:             throw ExceptionUtils.getSqlException(e, \"insert micro service data into database error\");\n146:         }\n147:     }\n148: \n149:     /**\n150:      * 批量添加微服务\n151:      *\n152:      * @param requestBodyList\n153:      * @return int\n154:      * @throws\n155:      **/\n156:     @Override\n157:     public int addList(List<ResMsRequestBody> requestBodyList) throws VscServiceException {\n158:         String operateUser = DevCloudTokenStore.getUserName();\n159:         LOGGER.info(\"[begin addResMicroServiceList][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n160:             operateUser, JsonUtils.toJSONString(requestBodyList));\n161:         String operateUuid = UUID.randomUUID().toString();\n162:         List<TableBatchLogContent> logContents = new ArrayList<>();\n163:         List<TResMicroService> msList = new ArrayList<>(requestBodyList.size());\n164:         for (ResMsRequestBody resMsRequestBody : requestBodyList) {\n165:             TResMicroService tResMicroService = convertToTResAreaRef(resMsRequestBody);\n166:             msList.add(tResMicroService);\n167:         }\n168:         List<String> uuids = msList.stream().map(TResMicroService::getUuid).collect(Collectors.toList());\n169:         try {\n170:             int result = tResMicroServiceMapper.insertList(msList);\n171:             TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(uuids, result, CommonConstans.ADD, TABLE_NAME);\n172:             logContents.add(logContent);\n173:             commonUtil.insertLogToDb(logContents, result, OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n174:             LOGGER.info(\"[end addResMicroServiceList][tableName={}, operateUser={}, parameter={}]\", TABLE_NAME,\n175:                 operateUser, JsonUtils.toJSONString(requestBodyList));\n176:             return result;\n177:         } catch (DataAccessException e) {\n178:             LOGGER.error(\"[addResMicroServiceList data into {} error][list = {}, message = {}]\", TABLE_NAME,\n179:                 JsonUtils.toJSONString(msList), e.getMessage());\n180:             throw ExceptionUtils.getSqlException(e, \"batch insert micro service data into database error\");\n181:         }\n182:     }\n183: \n184:     /**\n185:      * 封装更新和新增需要创建新的对象函数\n186:      *\n187:      * @param requestBody 请求体\n188:      * @return 实例对象\n189:      */\n190:     private TResMicroService convertToTResAreaRef(ResMsRequestBody requestBody) {\n191:         TResMicroService tResMicroService = new TResMicroService();\n192:         BeanUtils.copyProperties(requestBody, tResMicroService);\n193:         tResMicroService.setUuid(UUID.randomUUID().toString());\n194:         tResMicroService.setLastUpdateUser(DevCloudTokenStore.getCurrentUser());\n195:         return tResMicroService;\n196:     }\n197: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -46,6 +46,0 @@\n-  47: LOGGER.error(\"delete error: {}\", e.getMessage());\n-  46: throw new VscServiceException(e);\n+  46: LOGGER.error(\"[deleteResMicroService data from {} error][uuid = {}, message = {}]\", TABLE_NAME, uuid,\n+  47: e.getMessage());\n+  48: throw ExceptionUtils.getSqlException(e, \"delete micro service data from database error\");\n   49: }\n```\n\nThese recent changes show the development progressionThe new feature is 使用mybatis-plus-lambdaquerywrapper构建查询条件&&使用mybatis-plus-page构建分页条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic CommonPage<TResMicroService> list(String serviceName, Integer pageNum, Integer pageSize) throws VscServiceException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "AdminCtrlService_z00806805#106", "good_example_response": "```java\n    public CommonPage<TResMicroService> list(String serviceName, Integer pageNum, Integer pageSize) throws VscServiceException {\n        LOGGER.info(\"[begin listResMicroService][tableName={}, serviceName={}]\", TABLE_NAME, serviceName);\n        Page<TResMicroService> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<TResMicroService> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(StringUtil.isNotEmpty(serviceName), TResMicroService::getServiceName, serviceName);\n        queryWrapper.orderByDesc(true, TResMicroService::getLastUpdateTime);\n        try {\n            Page<TResMicroService> servicePage = tResMicroServiceMapper.selectPage(page, queryWrapper);\n            LOGGER.info(\"[end listResMicroService][tableName={}, serviceName={}]\", TABLE_NAME, serviceName);\n            return CommonPage.restPage(servicePage);\n        } catch (DataAccessException e) {\n            LOGGER.error(\"[listResMicroService data from {} error][serviceName={}, message = {}]\", TABLE_NAME,\n                serviceName, e.getMessage());\n            throw ExceptionUtils.getSqlException(e, \"query micro service data from database error\");\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/TResMsServiceImplTest#test_list_should_return_not_null_when_test_data_combination", "extra_content": {"query": "使用mybatis-plus-lambdaquerywrapper构建查询条件&&使用mybatis-plus-page构建分页条件", "diff_path": "/docker/JavaRunProject/AdminCtrlService_z00806805/diff/106.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/TResMsServiceImpl.java", "start_line": 121, "end_line": 137, "work_dir": "/docker/JavaRunProject/AdminCtrlService_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class CommonPage {\n    public static <T> CommonPage<T> restPage(IPage<T> pageInfo); /* 将Page分页后的list转为分页信息 */\n}\n\npublic class ExceptionUtils {\n    public static VscServiceException getSqlException(DataAccessException dataAccessException, String msg);\n    public static VscUserException handleUserException(CommonErrorCode commonErrorCode, String msg); /* 处理用户侧异常函数 */\n    public static VscServerException handleServeException(CommonErrorCode commonErrorCode, String msg); /* 处理服务端异常函数 */\n}\n\npublic class CommonUtil {\n    public static int getQuerySwitch(Integer querySwitch); /* 检查前台传入的querySwitch配置参数,如果没传根据shardingSwitch判断 */\n    public boolean checkObjAllFieldsIsNull(Object obj) throws VscServerException; /* 任务列表查询条件不能为空 */\n    public String downloadFile(String srcFilePath, String dstFilePath) throws VscServerException;\n    public void insertLogToDb(List<? extends LogContent> list, Integer count, int operateType, String operateUser, String operateUuid); /* 将这次的操作记录到审计表 */\n    public void changeParamAndCheck(ShowTaskListDataRequestBody showTaskListDataRequestBody, HashMap<String, Object> map); /* 构造符合条件的map */\n    public OperLogEntity getOperLogEntity(List<? extends LogContent> list, Integer count, String operateUser, int operateType,\n                                          String operateLogUuid); /* 构建实体类 */\n    public TableBatchLogContent getOpTableBatchLogEntity(List<String> uuids, int status, String operateType, String tableName); /* 构造表批量操作日志消息体 */\n    public TableLogContent getOperateTableLogEntity(String uuid, int status, String operateType, String tableName); /* 构造scan维度操作日志消息体 */\n    public UserOperLogContent getUserLogEntity(String taskId, int httpStatus, int isForce, String operateType); /* 构造user维度操作日志消息体 */\n    public ArrayList<? extends SelectPageRequestBody> getNotNullField(SelectPageRequestBody selectPageRequestBody) throws IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了SelectPageRequestBody的类 */\n    public ArrayList<? extends RequestBodyUuid> getNotNullField(TableRequestBody tableRequestBody) throws VscUserException, IllegalAccessException; /* 判断变量是否为空，返回不为空的变量 只用于继承了RequestBodyUuid的类 */\n    public List<UserTaskEntity> getUserTaskEntityByUserTaskId(List<String> userTaskIds, Integer querySwitch); /* 通过userTaskId，查找usertaskInfo */\n    public SetScanTaskRequestBody getSetScanTaskRequestBody(String userTaskId, String scanTaskId, String operateUser, Integer isForce); /* 设置失败，重新触发请求体  ---->taskctrl */\n    public CmdTaskRequestBody getCmdTaskRequestBody(String userTaskId, String operateUser, String uuid, Integer isForce); /* 暂停，停止请求体  --->taskctrl */\n    public String checkRouteId(String routeId);\n    public ResponseEntity<?> getPostResponseEntity(Object requestBody, String url, String routeId); /* post请求 */\n    public static void checkIds(String userTaskid, String scanTaskId) throws VscUserException, VscServerException;\n    public static String toCamelCase(String s); /* _|-转小驼峰 */\n    public static void cleanFile(String filePath);\n    public static Long getUploadTimeRange(Long fileSize); /* 获取文件上传需要时间长度 */\n    public static HashMap<String, Object> objectToMap(Object object); /* 将简单的对象转换成map集合,对象中数据不需要做处理，直接可以转换的可以用该函数 */\n    public static String getSubmitTime(String submitTime, String timePrefix, String timeSuffix);\n    public static boolean isNotFinishTask(TaskDataDo taskDataDo); /* 判断任务是否是结束状态， */\n}\n```\n\nThe context above is:\n```java\n  1: @Service\n  2: public class BaseLineServiceImpl implements BaseLineService {\n  3: \n  4:     private static final Logger LOGGER = LogManager.getLogger(BaseLineServiceImpl.class);\n  5: \n  6:     @Resource\n  7:     private CommonUtil commonUtil;\n  8: \n  9:     @Resource(name = \"redisPipelineDegradeUtils\")\n 10:     RedisPipelineDegradeUtils redisPipelineUtils;\n 11: \n 12:     @Resource(name = \"redis2PipelineDegradeUtils\")\n 13:     RedisPipelineDegradeUtils redis2PipelineUtils;\n 14: \n 15:     @Resource\n 16:     private BaseLineMapper baseLineMapper;\n```\n\nThe context below is:\n```java\n 39: /**\n 40:      * 批量更新告警基线数据\n 41:      *\n 42:      * @param requestBody\n 43:      * @return 成功更新的条数\n 44:      * @throws VscServiceException\n 45:      **/\n 46:     @Override\n 47:     @Transactional(rollbackFor = Exception.class)\n 48:     public int batchUpdate(UpdateBaseLineRequestBody requestBody) throws VscServiceException {\n 49:         String operateUser = DevCloudTokenStore.getUserName();\n 50:         LOGGER.info(\"[begin batchUpdate baseline][operateUser = {}, requestBody = {}]\", operateUser, JsonUtils.toJSONString(requestBody));\n 51:         String operateUuid = UUID.randomUUID().toString();\n 52:         List<TableBatchLogContent> logContents = new ArrayList<>();\n 53:         try {\n 54:             // 根据表名对sid进行分组\n 55:             List<BatchBaseLineRequestBody> batchList = requestBody.getBatchList();\n 56:             Map<String, List<String>> tableGroup = getTableGroup(batchList);\n 57:             Map<String, Object> paramMap = getUpdateParamMap(requestBody);\n 58:             AtomicInteger affectRows = new AtomicInteger();\n 59:             // 分组对基线数据分表进行批量更新\n 60:             tableGroup.forEach((key, value) -> {\n 61:                 if (StringUtil.isNotEmpty(key) && !CollectionUtils.isEmpty(value)) {\n 62:                     paramMap.put(\"tableName\", key);\n 63:                     paramMap.put(\"sids\", value);\n 64:                     int rows = baseLineMapper.updateBySids(paramMap);\n 65:                     affectRows.addAndGet(rows);\n 66:                     TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(value, rows, CommonConstans.UPDATE, key);\n 67:                     logContents.add(logContent);\n 68:                 }\n 69:             });\n 70:             commonUtil.insertLogToDb(logContents, affectRows.get(), OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n 71:             LOGGER.info(\"[end batchUpdate baseline][operateUser = {}, requestBody = {}]\", operateUser, JsonUtils.toJSONString(requestBody));\n 72:             return affectRows.get();\n 73:         } catch (Exception e) {\n 74:             LOGGER.error(\"[batch update baseline data to database error][requestBody = {}, message = {}]\", JsonUtils.toJSONString(requestBody),\n 75:                 e.toString());\n 76:             throw ExceptionUtils.handleServeException(CommonErrorCode.SERVER_INTERNAL_ERROR, \"batch update baseline data error\");\n 77:         }\n 78:     }\n 79: \n 80:     /**\n 81:      * 批量删除告警基线数据\n 82:      *\n 83:      * @param requestBodyList\n 84:      * @return 成功删除的条数\n 85:      * @throws VscServiceException\n 86:      **/\n 87:     @Override\n 88:     @Transactional(rollbackFor = Exception.class)\n 89:     public int batchDelete(List<BatchBaseLineRequestBody> requestBodyList) throws VscServiceException {\n 90:         String operateUser = DevCloudTokenStore.getUserName();\n 91:         LOGGER.info(\"[begin batchDelete baseline][operateUser = {}, requestBodyList = {}]\", operateUser, JsonUtils.toJSONString(requestBodyList));\n 92:         if (CollectionUtils.isEmpty(requestBodyList)) {\n 93:             throw ExceptionUtils.handleServeException(CommonErrorCode.USER_ILLEGAL_ARGUMENT, \"batch delete baseline argument cannot be empty\");\n 94:         }\n 95:         String operateUuid = UUID.randomUUID().toString();\n 96:         List<TableBatchLogContent> logContents = new ArrayList<>();\n 97:         try {\n 98:             // 根据表名对sid进行分组\n 99:             Map<String, List<String>> tableGroup = getTableGroup(requestBodyList);\n100:             Map<String, Object> paramMap = new HashMap<>();\n101:             AtomicInteger affectRows = new AtomicInteger();\n102:             // 分组对基线数据分表进行批量删除\n103:             tableGroup.forEach((key, value) -> {\n104:                 if (StringUtil.isNotEmpty(key) && !CollectionUtils.isEmpty(value)) {\n105:                     paramMap.put(\"tableName\", key);\n106:                     paramMap.put(\"sids\", value);\n107:                     int rows = baseLineMapper.deleteBySids(paramMap);\n108:                     affectRows.addAndGet(rows);\n109:                     TableBatchLogContent logContent = commonUtil.getOpTableBatchLogEntity(value, rows, CommonConstans.DELETE, key);\n110:                     logContents.add(logContent);\n111:                 }\n112:             });\n113:             // 清理缓存\n114:             String[] mergeKeys = requestBodyList.stream().map(BatchBaseLineRequestBody::getMergeKey).toArray(String[]::new);\n115:             LOGGER.info(\"[batch delete labelId from redis begin][keys = {} ]\", JsonUtils.toJSONString(mergeKeys));\n116:             redisPipelineUtils.multiDel(mergeKeys);\n117:             redis2PipelineUtils.multiDel(mergeKeys);\n118:             LOGGER.info(\"[batch delete labelId from redis end][keys = {} ]\", JsonUtils.toJSONString(mergeKeys));\n119:             commonUtil.insertLogToDb(logContents, affectRows.get(), OperateType.CONFIG_CENTER.getCode(), operateUser, operateUuid);\n120:             LOGGER.info(\"[end batchDelete baseline][operateUser = {}, requestBodyList = {}]\", operateUser, JsonUtils.toJSONString(requestBodyList));\n121:             return affectRows.get();\n122:         } catch (Exception e) {\n123:             LOGGER.error(\"[batch delete baseline data from database error][requestBodyList = {}, message = {}]\",\n124:                 JsonUtils.toJSONString(requestBodyList), e.toString());\n125:             throw ExceptionUtils.handleServeException(CommonErrorCode.SERVER_INTERNAL_ERROR, \"batch delete baseline data error\");\n126:         }\n127:     }\n128: \n129:     /**\n130:      * 将请求体转换成map\n131:      **/\n132:     private Map<String, Object> getParamMap(ListBaseLineRequestBody requestBody) throws VscUserException {\n133:         Map<String, Object> paramMap = new HashMap<>();\n134:         if (!CollectionUtils.isEmpty(requestBody.getMergeKeys())) {\n135:             paramMap.put(\"mergeKeys\", requestBody.getMergeKeys());\n136:         }\n137: \n138:         if (StringUtil.isNotEmpty(requestBody.getScanTaskId())) {\n139:             paramMap.put(\"scanTaskId\", requestBody.getScanTaskId());\n140:         }\n141: \n142:         if (StringUtil.isNotEmpty(requestBody.getAnalyseUser())) {\n143:             paramMap.put(\"analyseUser\", requestBody.getAnalyseUser());\n144:         }\n145: \n146:         if (StringUtil.isNotEmpty(requestBody.getApproveUser())) {\n147:             paramMap.put(\"approveUser\", requestBody.getApproveUser());\n148:         }\n149: \n150:         if (requestBody.getAnalyseResult() != null) {\n151:             paramMap.put(\"analyseResult\", requestBody.getAnalyseResult());\n152:         }\n153: \n154:         if (StringUtil.isNotEmpty(requestBody.getSynchronizeTimeStart())) {\n155:             paramMap.put(\"synchronizeTimeStart\", requestBody.getSynchronizeTimeStart());\n156:         }\n157: \n158:         if (StringUtil.isNotEmpty(requestBody.getSynchronizeTimeEnd())) {\n159:             paramMap.put(\"synchronizeTimeEnd\", requestBody.getSynchronizeTimeEnd());\n160:         }\n161: \n162:         if (StringUtil.isNotEmpty(requestBody.getLabelId())) {\n163:             paramMap.put(\"labelId\", requestBody.getLabelId());\n164:             String tableName = TaskUtil.getAlarmBaselineTableName(requestBody.getLabelId());\n165:             paramMap.put(\"tableName\", tableName);\n166:         } else {\n167:             getTableNames(paramMap);\n168:         }\n169:         return paramMap;\n170:     }\n171: \n172:     /**\n173:      * 获取分表的所有表名\n174:      **/\n175:     private void getTableNames(Map<String, Object> paramMap) {\n176:         List<String> tableNames = new ArrayList<>();\n177:         for (int i = 0; i < 10; i++) {\n178:             tableNames.add(\"t_am_baseline_\" + i);\n179:         }\n180:         paramMap.put(\"tableName\", tableNames.get(0));\n181:         if (tableNames.size() > 1) {\n182:             String[] otherTables = new String[tableNames.size() - 1];\n183:             for (int i = 1; i < tableNames.size(); i++) {\n184:                 otherTables[i - 1] = tableNames.get(i);\n185:             }\n186:             paramMap.put(\"otherTables\", otherTables);\n187:         }\n188:     }\n189: \n190:     /**\n191:      * 将请求体转成更新map\n192:      **/\n193:     @NotNull\n194:     private Map<String, Object> getUpdateParamMap(UpdateBaseLineRequestBody requestBody) {\n195:         Map<String, Object> paramMap = new HashMap<>();\n196:         if (requestBody.getAnalyseResult() != null) {\n197:             paramMap.put(\"analyseResult\", requestBody.getAnalyseResult());\n198:         }\n199:         if (StringUtil.isNotEmpty(requestBody.getAnalyseDetail())) {\n200:             paramMap.put(\"analyseDetail\", requestBody.getAnalyseDetail());\n201:         }\n202: \n203:         if (StringUtil.isNotEmpty(requestBody.getApproveDetail())) {\n204:             paramMap.put(\"approveDetail\", requestBody.getApproveDetail());\n205:         }\n206:         paramMap.put(\"lastUpdateUser\", DevCloudTokenStore.getUserName());\n207:         return paramMap;\n208:     }\n209: \n210:     /**\n211:      * 根据分表表名对sid进行分组\n212:      **/\n213:     @NotNull\n214:     private Map<String, List<String>> getTableGroup(List<BatchBaseLineRequestBody> requestBodyList) throws VscUserException {\n215:         Map<String, List<String>> tableGroup = new HashMap<>();\n216:         for (BatchBaseLineRequestBody item : requestBodyList) {\n217:             String tableName = TaskUtil.getAlarmBaselineTableName(item.getLabelId());\n218:             List<String> sids = tableGroup.getOrDefault(tableName, new ArrayList<>());\n219:             sids.add(item.getSid());\n220:             tableGroup.put(tableName, sids);\n221:         }\n222:         return tableGroup;\n223:     }\n224: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -134,20 +134,0 @@\n- 139: // TODO basic filters only\n- 138: // return paramMap;\n+ 138: if (StringUtil.isNotEmpty(requestBody.getScanTaskId())) {\n+ 139: paramMap.put(\"scanTaskId\", requestBody.getScanTaskId());\n+ 136: }\n+ 142: if (StringUtil.isNotEmpty(requestBody.getAnalyseUser())) {\n+ 143: paramMap.put(\"analyseUser\", requestBody.getAnalyseUser());\n+ 140: }\n+ 146: if (StringUtil.isNotEmpty(requestBody.getApproveUser())) {\n+ 147: paramMap.put(\"approveUser\", requestBody.getApproveUser());\n+ 144: }\n+ 150: if (requestBody.getAnalyseResult() != null) {\n+ 151: paramMap.put(\"analyseResult\", requestBody.getAnalyseResult());\n+ 148: }\n+ 137: if (StringUtil.isNotEmpty(requestBody.getSynchronizeTimeStart())) {\n+ 141: paramMap.put(\"synchronizeTimeStart\", requestBody.getSynchronizeTimeStart());\n+ 152: }\n+ 145: if (StringUtil.isNotEmpty(requestBody.getSynchronizeTimeEnd())) {\n+ 149: paramMap.put(\"synchronizeTimeEnd\", requestBody.getSynchronizeTimeEnd());\n+ 153: }\n```\n\nThese recent changes show the development progressionThe new feature is 使用mybatis-plus-page构建分页条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 分页查询告警基线数据\npublic CommonPage<BaseLineEntity> listBaseLine(ListBaseLineRequestBody requestBody) throws VscServiceException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "AdminCtrlService_z00806805#107", "good_example_response": "```java\n    public CommonPage<BaseLineEntity> listBaseLine(ListBaseLineRequestBody requestBody) throws VscServiceException {\n        LOGGER.info(\"[begin listBaseLine][requestBody = {}]\", JsonUtils.toJSONString(requestBody));\n        try {\n            Map<String, Object> paramMap = getParamMap(requestBody);\n            IPage<BaseLineEntity> baseLinePage = new Page<>(requestBody.getPageNum(), requestBody.getPageSize());\n            // 若分表字段不为空，则去该分表查询\n            if (StringUtil.isNotEmpty(requestBody.getLabelId())) {\n                baseLinePage = baseLineMapper.selectPageByLabelId(baseLinePage, paramMap);\n            } else {\n                baseLinePage = baseLineMapper.selectPageByMap(baseLinePage, paramMap);\n            }\n            LOGGER.info(\"[end listBaseLine][requestBody = {}]\", JsonUtils.toJSONString(requestBody));\n            return CommonPage.restPage(baseLinePage);\n        } catch (Exception e) {\n            LOGGER.info(\"[get baseline list from database error][requestBody = {}, message = {}]\", JsonUtils.toJSONString(requestBody), e.toString());\n            throw ExceptionUtils.handleServeException(CommonErrorCode.SERVER_INTERNAL_ERROR, \"list baseline data error\");\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/BaseLineServiceImplTest#test_list_base_line_should_return_not_null_when_test_data_combination", "extra_content": {"query": "使用mybatis-plus-page构建分页条件", "diff_path": "/docker/JavaRunProject/AdminCtrlService_z00806805/diff/107.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/secguard/vscloud/vscloudadminctrlservice/service/impl/BaseLineServiceImpl.java", "start_line": 77, "end_line": 95, "work_dir": "/docker/JavaRunProject/AdminCtrlService_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class FixedThreadPool {\n  2:     public static ThreadPoolExecutor newFixedThreadPool(Integer threads) {\n  3:         return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n  4:     }\n```\n\nThe context below is:\n```java\n 12: public static ThreadPoolExecutor newFixedThreadPool(String name, Integer threads, int queues) {\n 13:         ThreadFactory factory = new ThreadFactory() {\n 14:             private final AtomicInteger integer = new AtomicInteger(0);\n 15: \n 16:             @Override\n 17:             public Thread newThread(@NotNull Runnable r) {\n 18:                 return new Thread(r, name + \"-\" + integer.getAndIncrement());\n 19:             }\n 20:         };\n 21: \n 22:         return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS,\n 23:                 new LinkedBlockingQueue<Runnable>(queues), factory);\n 24:     }\n 25: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -18,4 +18,0 @@\n-  18: return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS,\n-  21: new LinkedBlockingQueue<Runnable>(queues));\n+  21: return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS,\n+  18: new LinkedBlockingQueue<Runnable>(queues), factory);\n```\n\nThese recent changes show the development progressionThe new feature is 指定线程池线程数量，返回满足需要的线程池.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static ThreadPoolExecutor newFixedThreadPool(Integer threads, int queues)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#65", "good_example_response": "```java\n    public static ThreadPoolExecutor newFixedThreadPool(Integer threads) {\n        return new ThreadPoolExecutor(threads, threads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n    }\n```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.FixedThreadPoolTest clean test", "extra_content": {"query": "指定线程池线程数量，返回满足需要的线程池", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/65.patch", "test_result": "pass", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/FixedThreadPool.java", "start_line": 13, "end_line": 16, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class ThreadPoolManager {\n```\n\nThe context below is:\n```java\n  9: public static ExecutorService newCachedThreadPool() {\n 10:         return Executors.newCachedThreadPool();\n 11:     }\n 12: \n 13:     public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n 14:         return Executors.newScheduledThreadPool(corePoolSize);\n 15:     }\n 16: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -1,2 +1,0 @@\n-   1: public class ThreadPools {\n+   1: public class ThreadPoolManager {\n```\n\nThese recent changes show the development progressionThe new feature is 使用java.util.concurrent工具包实现一个创建固定线程数量的线程池的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#95", "good_example_response": "```java\n    public static ExecutorService newFixedThreadPool(int nThreads) {\n        return Executors.newFixedThreadPool(nThreads);\n    }\n```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.ThreadPoolManagerTest clean test", "extra_content": {"query": "使用java.util.concurrent工具包实现一个创建固定线程数量的线程池的方法", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/95.patch", "test_result": "pass", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/ThreadPoolManager.java", "start_line": 12, "end_line": 15, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class ThreadPoolManager {\n  2:     public static ExecutorService newFixedThreadPool(int nThreads) {\n  3:         return Executors.newFixedThreadPool(nThreads);\n  4:     }\n```\n\nThe context below is:\n```java\n 12: public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n 13:         return Executors.newScheduledThreadPool(corePoolSize);\n 14:     }\n 15: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -1,2 +1,0 @@\n-   1: public class ThreadPools {\n+   1: public class ThreadPoolManager {\n```\n\nThese recent changes show the development progressionThe new feature is 使用java.util.concurrent工具包实现一个创建可动态调整线程数的线程池的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static ExecutorService newCachedThreadPool()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#96", "good_example_response": "```java\n    public static ExecutorService newCachedThreadPool() {\n        return Executors.newCachedThreadPool();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.ThreadPoolManagerTest clean test", "extra_content": {"query": "使用java.util.concurrent工具包实现一个创建可动态调整线程数的线程池的方法", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/96.patch", "test_result": "pass", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/ThreadPoolManager.java", "start_line": 16, "end_line": 19, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class ThreadPoolManager {\n  2:     public static ExecutorService newFixedThreadPool(int nThreads) {\n  3:         return Executors.newFixedThreadPool(nThreads);\n  4:     }\n  5: \n  6:     public static ExecutorService newCachedThreadPool() {\n  7:         return Executors.newCachedThreadPool();\n  8:     }\n```\n\nThe context below is:\n```java\n 15: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -1,2 +1,0 @@\n-   1: public class ThreadPools {\n+   1: public class ThreadPoolManager {\n```\n\nThese recent changes show the development progressionThe new feature is 使用java.util.concurrent工具包实现一个创建可定时执行任务的线程池的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "BuildJob_z00644813#97", "good_example_response": "```java\n    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        return Executors.newScheduledThreadPool(corePoolSize);\n    }```", "reward_command": "cd /docker/JavaRunProject/BuildJob_z00644813/job-common;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com.huawei.cloudbuild.common.util.ThreadPoolManagerTest clean test", "extra_content": {"query": "使用java.util.concurrent工具包实现一个创建可定时执行任务的线程池的方法", "diff_path": "/docker/JavaRunProject/BuildJob_z00644813/diff/97.patch", "test_result": "fail", "file_path": "/job-common/src/main/java/com/huawei/cloudbuild/common/util/ThreadPoolManager.java", "start_line": 20, "end_line": 22, "work_dir": "/docker/JavaRunProject/BuildJob_z00644813/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Configuration\n  2: public class ResilienceConfig {\n  3: \n  4:     // 信号量隔离策略配置\n```\n\nThe context below is:\n```java\n 16: // 线程池隔离策略配置\n 17:     @Bean\n 18:     public ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry() {\n 19:         ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()\n 20:                 .maxThreadPoolSize(20)           // 最大线程数\n 21:                 .coreThreadPoolSize(5)          // 核心线程数\n 22:                 .queueCapacity(50)              // 队列容量\n 23:                 .build();\n 24:         return ThreadPoolBulkheadRegistry.of(config);\n 25:     }\n 26: \n 27:     @Bean\n 28:     public TimeLimiterRegistry timeLimiterRegistry() {\n 29:         TimeLimiterConfig config = TimeLimiterConfig.custom()\n 30:                 .timeoutDuration(Duration.ofSeconds(2))  // 全局默认超时时间\n 31:                 .cancelRunningFuture(true)  // 超时后取消正在执行的 Future\n 32:                 .build();\n 33:         return TimeLimiterRegistry.of(config);\n 34:     }\n 35: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 2\n(Intermediate preparation)\n```diff\n@@ -12,11 +12,0 @@\n-  16: // TODO: add ThreadPoolBulkhead bean\n+  16: // 线程池隔离策略配置\n+  17: @Bean\n+  18: public ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry() {\n+  19: ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()\n+  20: .maxThreadPoolSize(20)           // 最大线程数\n+  21: .coreThreadPoolSize(5)          // 核心线程数\n+  22: .queueCapacity(50)              // 队列容量\n+  12: .build();\n+  13: return ThreadPoolBulkheadRegistry.of(config);\n+  14: }\n```\n\nThese recent changes show the development progressionThe new feature is 配置Resilience4j的信号量隔离策略，maxConcurrentCalls设置为10，返回BulkheadRegistry对象。.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic BulkheadRegistry bulkheadRegistry()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "CodeHubManagerSvr_w00452591#115", "good_example_response": "```java\n    public BulkheadRegistry bulkheadRegistry() {\n        BulkheadConfig config = BulkheadConfig.custom()\n                .maxConcurrentCalls(10)          // 最大并发数\n                .maxWaitDuration(Duration.ofMillis(50)) // 等待时间\n                .build();\n        return BulkheadRegistry.of(config);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/codehub/manager/service/resilience4j/ResilienceConfigTest.java -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "配置Resilience4j的信号量隔离策略，maxConcurrentCalls设置为10，返回BulkheadRegistry对象。", "diff_path": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/diff/115.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codehub/manager/service/resilience4j/ResilienceConfig.java", "start_line": 19, "end_line": 26, "work_dir": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Configuration\n  2: public class ResilienceConfig {\n  3: \n  4:     // 信号量隔离策略配置\n  5:     @Bean\n  6:     public BulkheadRegistry bulkheadRegistry() {\n  7:         BulkheadConfig config = BulkheadConfig.custom()\n  8:                 .maxConcurrentCalls(10)          // 最大并发数\n  9:                 .maxWaitDuration(Duration.ofMillis(50)) // 等待时间\n 10:                 .build();\n 11:         return BulkheadRegistry.of(config);\n 12:     }\n 13: \n 14:     // 线程池隔离策略配置\n```\n\nThe context below is:\n```java\n 27: @Bean\n 28:     public TimeLimiterRegistry timeLimiterRegistry() {\n 29:         TimeLimiterConfig config = TimeLimiterConfig.custom()\n 30:                 .timeoutDuration(Duration.ofSeconds(2))  // 全局默认超时时间\n 31:                 .cancelRunningFuture(true)  // 超时后取消正在执行的 Future\n 32:                 .build();\n 33:         return TimeLimiterRegistry.of(config);\n 34:     }\n 35: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -5,9 +5,0 @@\n-   5: // TODO: add BulkheadRegistry bean\n+   5: @Bean\n+   6: public BulkheadRegistry bulkheadRegistry() {\n+   7: BulkheadConfig config = BulkheadConfig.custom()\n+   8: .maxConcurrentCalls(10)          // 最大并发数\n+   9: .maxWaitDuration(Duration.ofMillis(50)) // 等待时间\n+  10: .build();\n+  11: return BulkheadRegistry.of(config);\n+  12: }\n```\n\nThese recent changes show the development progressionThe new feature is 配置Resilience4j的线程池隔离策略，最大线程数设置为20，核心线程数设置为5，队列容量设置为50，返回ThreadPoolBulkheadRegistry对象。.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "CodeHubManagerSvr_w00452591#116", "good_example_response": "```java\n    public ThreadPoolBulkheadRegistry threadPoolBulkheadRegistry() {\n        ThreadPoolBulkheadConfig config = ThreadPoolBulkheadConfig.custom()\n                .maxThreadPoolSize(20)           // 最大线程数\n                .coreThreadPoolSize(5)          // 核心线程数\n                .queueCapacity(50)              // 队列容量\n                .build();\n        return ThreadPoolBulkheadRegistry.of(config);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/codehub/manager/service/resilience4j/ResilienceConfigTest.java -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "配置Resilience4j的线程池隔离策略，最大线程数设置为20，核心线程数设置为5，队列容量设置为50，返回ThreadPoolBulkheadRegistry对象。", "diff_path": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/diff/116.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codehub/manager/service/resilience4j/ResilienceConfig.java", "start_line": 29, "end_line": 37, "work_dir": "/docker/JavaRunProject/CodeHubManagerSvr_w00452591/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class DevsporeAuthSpringContextUtil {\n    public static <T> T getBean(final String className, Class<T> clazz);\n    public static <T> T getBean(Class<T> clazz);\n}\n\npublic class ContextAttributesStore {\n    public static void clear();\n    public static void update(String contextAttrStr);\n    public static String getXContextAttributes();\n    public static String getDestinationVpceps();\n    public static String getVpcSourceIp();\n    public static String getSourceVpce();\n    public static String getSourceIp();\n    public static Boolean getSecureTransport();\n    public static String getUserAgent();\n    public static String getReferer();\n}\n\npublic class RequestContext {\n    public static final ThreadLocal<UserInfo> USER_INFO;\n    public static final ThreadLocal<String> COOKIE_LOCALE; /* locale in cookie */\n    public static final ThreadLocal<List<String>> ROLES; /* roles in token */\n    public static final ThreadLocal<String> TENANT_NAME; /* tenantName id in token */\n    public static final ThreadLocal<String> TENANT_ID; /* tenantId id in token */\n    public static final ThreadLocal<String> USER_NAME; /* userName id in token */\n    public static final ThreadLocal<String> USER_ID; /* userId id in token */\n    public static final ThreadLocal<String> TOKEN;\n    public static final ThreadLocal<String> X_AUTH_TOKEN; /* parsed from \"X-Auth-Token\" in http request header */\n    public static final ThreadLocal<String> CLIENT_IP; /* original client ip */\n    public static void buildUserInfo(UserInfo userInfo);\n    public static void close(); /* 清空ThreadLocal */\n    public static void setUserInfo(UserInfo userInfo);\n    public static UserInfo getUserInfo();\n    public static void setRoles(List<String> roles);\n    public static List<String> getRoles();\n    public static void setTenantName(String tenantName);\n    public static String getTenantName();\n    public static void setTenantId(String tenantId);\n    public static String getTenantId();\n    public static void setToken(String token);\n    public static String getToken();\n    public static String getCookieLocale();\n    public static void setUserName(String userName);\n    public static String getUserName();\n    public static void setUserId(String userId);\n    public static String getUserId();\n    public static String getXAuthToken();\n    public static String getClientIPAddress();\n}\n\npublic class UserProfile {\n    public static UserProfile parse(String xUserProfile);\n    public PrincipalType getPrincipalType();\n    public boolean enablePdp5();\n}\n\npublic class JWTAuth {\n    public static final String AUTHORIZATION_HEADER;\n    public static final String DEFAULT_JWT_HEADER_NAME;\n    public static final String JWT_MISSING;\n    public static final String JWT_AUTH_FAILED;\n    public static final long REFRESH_TIMEOUT;\n    public static final long LIFESPAN;\n    public void auth(String originalJwtToken);\n}\n\npublic class TokenUtils {\n    public static final String SIGN_HEADER_SERVER;\n    public static final String SIGN_HEADER_NONCE;\n    public static final String SIGN_HEADER_TIME;\n    public static final String TOKEN_HEADER_SYSTEM_AK;\n    public static final String CLIENT_HEADER_APP_ID;\n    public static final String TOKEN_HEADER_ADMIN_KEY;\n    public static final String TOKEN_HEADER_TOKEN_NEW;\n    public static final String TOKEN_HEADER_TOKEN_KEY;\n    public static String parseClientIP(HttpServletRequest httpRequest); /* parse original client ip address from http request */\n}\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class IamAuthenticationFilter extends OncePerRequestFilter {\n  3:     IamTokenParser iamTokenParser;\n  4: \n  5:     AuthenticationManager authenticationManager;\n  6: \n  7:     RequestMatcher requestMatcher;\n  8: \n  9:     IamConfigProperties iamConfigProperties;\n 10: \n 11:     JWTAuth jwtAuth;\n 12: \n 13:     private UserStore userStore;\n 14: \n 15:     boolean enableIamV5;\n 16: \n 17:     private static final String X_USER_PROFILE_HEADER = \"X-User-Profile\";\n 18: \n 19:     private static final String X_CONTEXT_ATTRIBUTES_HEADER = \"X-Context-Attributes\";\n 20: \n 21:     private static final String X_SECURITY_TOKEN_HEADER = \"X-Security-Token\";\n 22: \n 23:     private static final String X_SOURCE_ACCOUNT_HEADER = \"X-Source-Account\";\n 24: \n 25:     private static final String X_SOURCE_URN_HEADER = \"X-Source-Urn\";\n 26: \n 27:     private static final String X_REQUEST_PROOF = \"X-Request-Proof\";\n 28: \n 29:     private static final String X_AUTH_TOKEN = \"X-Auth-Token\";\n 30: \n 31:     private static final String LOCALE = \"locale\";\n 32: \n 33:     public IamAuthenticationFilter(RequestMatcher requestMatcher, IamConfigProperties iamConfigProperties,\n 34:         IamTokenParser iamTokenParser, AuthenticationManager authenticationManager) {\n 35:         iamTokenParser.setAuthConfig(getAuthConfig(iamConfigProperties));\n 36:         this.requestMatcher = requestMatcher;\n 37:         this.iamTokenParser = iamTokenParser;\n 38:         this.authenticationManager = authenticationManager;\n 39:         this.iamConfigProperties = iamConfigProperties;\n 40:         this.enableIamV5 = iamConfigProperties.enableIamV5();\n 41:         if (enableIamV5) {\n 42:             this.jwtAuth = new JWTAuth(iamConfigProperties);\n 43:         }\n 44:     }\n 45: \n 46:     private AuthConfig getAuthConfig(IamConfigProperties iamConfigProperties) {\n 47:         AuthConfig authConfig = new AuthConfig();\n 48:         authConfig.setIamUrl(iamConfigProperties.getIamUrl());\n 49:         authConfig.setIamUser(iamConfigProperties.getIamUser());\n 50:         authConfig.setInternalUser(iamConfigProperties.getInternalUser());\n 51:         authConfig.setChineseSupport(iamConfigProperties.isChineseSupport());\n 52:         authConfig.setLanguage(iamConfigProperties.getLanguage());\n 53:         return authConfig;\n 54:     }\n 55: \n 56:     /**\n 57:      * 总体认证逻辑：若用户同时传入pkiToken(iamv3)和x-user-profile、jwt(iamv5)，那么这两个都认证通过才算认证通过，任一解析失败都视为认证失败\n 58:      * iamv5认证：\n 59:      * 1、jwt不一定与x-user-profile同时存在\n 60:      * 2、x-user-profile和x-context-attributes 若有则解析，若无则不处理\n 61:      * IAM认证开启新平面头时：\n 62:      * 使用PKIToken直接调用APIGW，后端服务能获取到PKIToken和XCA\n 63:      * 使用AKSK签名调用APIGW，后端服务能获取到XUP、PKIToken、XCA、XRP\n 64:      */\n 65:     @Override\n 66:     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n 67:         throws ServletException, IOException {\n 68:         try {\n 69:             if (!requestMatcher.matches(request)) {\n 70:                 filterChain.doFilter(request, response);\n 71:                 return;\n 72:             }\n 73: \n 74:             userStore = DevsporeAuthSpringContextUtil.getBean(UserStore.class);\n 75:             if (null == userStore) {\n 76:                 log.warn(\"No UserStore SPI implementation defined!\");\n 77:             }\n 78:             if (!enableIamV5) {\n 79:                 verifyIamV3Token(request, response, filterChain);\n 80:                 return;\n 81:             }\n 82:             String jwtToken = getJwtToken(request);\n 83:             if (StringUtils.isEmpty(jwtToken)) {\n 84:                 verifyIamV3Token(request, response, filterChain);\n 85:                 return;\n 86:             }\n 87:             if (!verifyJwtToken(jwtToken, response)) {\n 88:                 return;\n 89:             }\n 90:             if (StringUtils.isNotEmpty(request.getHeader(X_AUTH_TOKEN))) {\n 91:                 verifyIamV3Token(request, response, filterChain);\n 92:                 return;\n 93:             }\n 94:             updateDevcloudTokenStore(request);\n 95:             filterChain.doFilter(request, response);\n 96:         } finally {\n 97:             DevCloudTokenStore.clearThreadLocal();\n 98:             ContextAttributesStore.clear();\n 99:             RequestContext.close();\n100:         }\n101:     }\n102: \n103:     private void updateDevcloudTokenStore(HttpServletRequest request) {\n104:         parseUserProfile(request);\n105:         DevCloudTokenStore.SECURITY_TOKEN.set(request.getHeader(X_SECURITY_TOKEN_HEADER));\n106:         DevCloudTokenStore.SOURCE_ACCOUNT.set(request.getHeader(X_SOURCE_ACCOUNT_HEADER));\n107:         DevCloudTokenStore.SOURCE_URN.set(request.getHeader(X_SOURCE_URN_HEADER));\n108:         DevCloudTokenStore.X_USER_PROFILE.set(request.getHeader(X_USER_PROFILE_HEADER));\n109:         DevCloudTokenStore.X_REQUEST_PROOF.set(request.getHeader(X_REQUEST_PROOF));\n110:         DevCloudTokenStore.setToken(request.getHeader(X_AUTH_TOKEN));\n111:         initRequestContext(request);\n112:         ContextAttributesStore.update(request.getHeader(X_CONTEXT_ATTRIBUTES_HEADER));\n113:         userStore.setUserInfo(buildUserInfo());\n114:     }\n115: \n116:     private void parseUserProfile(HttpServletRequest request) {\n117:         if (StringUtils.isEmpty(request.getHeader(X_USER_PROFILE_HEADER))) {\n118:             return;\n119:         }\n120:         UserProfile userProfile = UserProfile.parse(request.getHeader(X_USER_PROFILE_HEADER));\n121:         DevCloudTokenStore.PRINCIPAL_ID.set(userProfile.getPrincipalId());\n122:         DevCloudTokenStore.PRINCIPAL_URN.set(userProfile.getPrincipalUrn());\n123:         DevCloudTokenStore.setDomainId(userProfile.getAccountId());\n124:         DevCloudTokenStore.DOMAIN.set(userProfile.getAccountName());\n125:         DevCloudTokenStore.IS_ROOT_USER.set(userProfile.isPrincipalIsRootUser());\n126:         DevCloudTokenStore.SERVICE_PRINCIPAL.set(userProfile.getServicePrincipal());\n127:         DevCloudTokenStore.ENABLE_PDP5.set(userProfile.enablePdp5());\n128:         DevCloudTokenStore.GROUP_IDS.set(userProfile.getGroupIds());\n129:         DevCloudTokenStore.SERVICE_LINKED_AGENCY_NAME.set(userProfile.getServiceLinkedAgencyName());\n130:         DevCloudTokenStore.PRINCIPAL_TYPE.set(userProfile.getPrincipalType());\n131:     }\n```\n\nThe context below is:\n```java\n154: private boolean verifyJwtToken(String jwtToken, HttpServletResponse servletResponse) {\n155:         try {\n156:             jwtAuth.auth(jwtToken);\n157:         } catch (Exception e) {\n158:             respondError(servletResponse, e.getMessage());\n159:             return false;\n160:         }\n161:         return true;\n162:     }\n163: \n164:     private String getJwtToken(HttpServletRequest servletRequest) {\n165:         if (JWTParamLocation.QUERY.equals(iamConfigProperties.getJwtParamLocation())) {\n166:             return servletRequest.getParameter(iamConfigProperties.getJwtParamKey());\n167:         } else {\n168:             return servletRequest.getHeader(iamConfigProperties.getJwtParamKey());\n169:         }\n170:     }\n171: \n172:     public static class IamTokenAuthentication extends CommonTokenHelper implements IamTokenParser {\n173:         public boolean parse(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {\n174:             return verifyAndParseToken(servletRequest, servletResponse);\n175:         }\n176: \n177:         @Override\n178:         public void setAuthConfig(AuthConfig authConfig) {\n179:             super.setAuthConfig(authConfig);\n180:         }\n181:     }\n182: \n183:     /**\n184:      * op_svc_project子账号，内置认证用于服务间调用\n185:      */\n186:     public static class IamInternalTokenAuthentication extends CommonTokenHelper implements IamTokenParser {\n187:         public boolean parse(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {\n188:             return verifyAndParseToken(servletRequest, servletResponse);\n189:         }\n190: \n191:         @Override\n192:         public void setAuthConfig(AuthConfig authConfig) {\n193:             super.setAuthConfig(authConfig);\n194:         }\n195:     }\n196: \n197:     @Override\n198:     public String toString() {\n199:         return \"parser:\" + iamTokenParser.getClass().getName() + \" request marcher:\" + requestMatcher.toString();\n200:     }\n201: \n202:     private void respondError(HttpServletResponse response, String reason) {\n203:         if (reason != null) {\n204:             response.setContentType(ContentType.APPLICATION_JSON.toString());\n205:             try (PrintWriter printWriter = response.getWriter()) {\n206:                 printWriter.write(reason);\n207:                 response.setStatus(HttpStatus.UNAUTHORIZED.value());\n208:             } catch (IOException e) {\n209:                 log.error(\"fail to write Unauthorized response\", e);\n210:             }\n211:         }\n212:     }\n213: \n214:     private UserInfo buildUserInfo() {\n215:         UserInfo userInfo = new UserInfo();\n216:         userInfo.setToken(DevCloudTokenStore.getToken());\n217:         userInfo.setUserId(DevCloudTokenStore.getUserId());\n218:         userInfo.setUserName(DevCloudTokenStore.getUserName());\n219:         userInfo.setTenantId(DevCloudTokenStore.getDomainId());\n220:         userInfo.setTenantName(DevCloudTokenStore.getDomainName());\n221:         userInfo.setRoles(DevCloudTokenStore.getRoles());\n222:         return userInfo;\n223:     }\n224: \n225:     /**\n226:      * 初始化赋值\n227:      *\n228:      * @param httpRequest http请求\n229:      */\n230:     private void initRequestContext(HttpServletRequest httpRequest) {\n231:         RequestContext.USER_ID.set(DevCloudTokenStore.getUserId());\n232:         RequestContext.X_AUTH_TOKEN.set(DevCloudTokenStore.getToken());\n233:         RequestContext.USER_NAME.set(DevCloudTokenStore.getUserName());\n234:         RequestContext.CLIENT_IP.set(TokenUtils.parseClientIP(httpRequest));\n235:         if (Objects.nonNull(httpRequest) && Objects.nonNull(httpRequest.getCookies())) {\n236:             Cookie[] cookies = httpRequest.getCookies();\n237:             Optional<Cookie> localeCookie =\n238:                 Arrays.stream(cookies).filter(cookie -> LOCALE.equals(cookie.getName())).findAny();\n239:             localeCookie.ifPresent(cook -> RequestContext.COOKIE_LOCALE.set(cook.getValue()));\n240:         }\n241:     }\n242: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -66,38 +66,0 @@\n   66: protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n   67: throws ServletException, IOException {\n   68: try {\n   69: if (!requestMatcher.matches(request)) {\n   95: filterChain.doFilter(request, response);\n   92: return;\n   89: }\n   74: userStore = DevsporeAuthSpringContextUtil.getBean(UserStore.class);\n   75: if (null == userStore) {\n   76: log.warn(\"No UserStore SPI implementation defined!\");\n   93: }\n-  71: // v3-only: 直接按 V3 认证\n-  79: verifyIamV3Token(request, response, filterChain);\n-  78: return;\n+  78: if (!enableIamV5) {\n+  79: verifyIamV3Token(request, response, filterChain);\n+  71: return;\n+  72: }\n+  82: String jwtToken = getJwtToken(request);\n+  83: if (StringUtils.isEmpty(jwtToken)) {\n+  84: verifyIamV3Token(request, response, filterChain);\n+  80: return;\n+  77: }\n+  87: if (!verifyJwtToken(jwtToken, response)) {\n+  85: return;\n+  81: }\n+  90: if (StringUtils.isNotEmpty(request.getHeader(X_AUTH_TOKEN))) {\n+  91: verifyIamV3Token(request, response, filterChain);\n+  88: return;\n+  86: }\n+  94: updateDevcloudTokenStore(request);\n+  70: filterChain.doFilter(request, response);\n   96: } finally {\n   97: DevCloudTokenStore.clearThreadLocal();\n   98: ContextAttributesStore.clear();\n   99: RequestContext.close();\n  100: }\n  101: }\n```\n\nThese recent changes show the development progressionThe new feature is 使用Spring AuthenticationManager验证提供的认证信息（如用户名和密码）是否合法，如果认证成功，继续往下执行，认证失败则异常退出.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprivate void verifyIamV3Token(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "CoralAuth_p00520557#130", "good_example_response": "```java\n    private void verifyIamV3Token(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws ServletException, IOException {\n        if (!iamTokenParser.parse(request, response)) {\n            return;\n        }\n        IamAuthenticationToken authRequest =\n            new IamAuthenticationToken(DevCloudTokenStore.getUserId(), AuthorityUtils.NO_AUTHORITIES);\n        Authentication authentication = authenticationManager.authenticate(authRequest);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        // 初始化RequestContext\n        initRequestContext(request);\n        if (enableIamV5) {\n            updateDevcloudTokenStore(request);\n        } else {\n            userStore.setUserInfo(buildUserInfo());\n        }\n        filterChain.doFilter(request, response);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huaweicloud/devspore/auth/iam/authentication/IamAuthenticationFilterTest.java  clean test", "extra_content": {"query": "使用Spring AuthenticationManager验证提供的认证信息（如用户名和密码）是否合法，如果认证成功，继续往下执行，认证失败则异常退出", "diff_path": "/docker/JavaRunProject/CoralAuth_p00520557/diff/130.patch", "test_result": "pass", "file_path": "/devspore-auth-iam/src/main/java/com/huaweicloud/devspore/auth/iam/authentication/IamAuthenticationFilter.java", "start_line": 182, "end_line": 200, "work_dir": "/docker/JavaRunProject/CoralAuth_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class SecurityStringUtils {\n    public static String normal(String str);\n    public static String random(int count, boolean letter, boolean numbers);\n    public static String random(int count);\n}\n```\n\nThe context above is:\n```java\n  1: @Service\n  2: @Slf4j\n  3: public class TokenDaoServiceImpl implements TokenDaoService {\n  4: \n  5:     @Autowired\n  6:     ServiceTokenHistoryMapper serviceTokenHistoryMapper;\n  7: \n  8:     @Autowired\n  9:     ServiceTokenInfoMapper serviceTokenInfoMapper;\n 10: \n 11:     @Autowired\n 12:     CacheTokenService cacheTokenService;\n 13: \n 14:     @Autowired\n 15:     CredentialUserService credentialUserService;\n 16: \n 17:     @Value(\"${fuxi.security.token.length:20}\")\n 18:     Integer tokenLength;\n 19: \n 20:     @Autowired\n 21:     SccCrypto sccCrypto;\n 22: \n 23:     @Override\n 24:     @Cacheable(key = \"'TOKEN:'+#toValidToken\", value = \"token\", unless = \"#result == null\")\n 25:     @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n 26:     public String checkIfTokenValid(String toValidToken) {\n 27:         ServiceTokenInfo result = queryToken(toValidToken);\n 28:         return result == null || !result.getEnable() ? null : result.getServiceName();\n 29:     }\n 30: \n 31:     @Override\n 32:     public boolean refreshToken() {\n 33:         log.info(\"refresh cache to avoid long time query\");\n 34:         queryToken(SecurityStringUtils.random(10));\n 35:         log.info(\"refresh cache finished\");\n 36:         return true;\n 37:     }\n 38: \n 39:     @Override\n 40:     public boolean changeEnableStatus(Long id) {\n 41:         Optional<ServiceTokenInfo> serviceTokenInfoOp = Optional.ofNullable(serviceTokenInfoMapper.selectById(id));\n 42:         if (!serviceTokenInfoOp.isPresent()) {\n 43:             throw new BizException(String.format(\"当前服务不存在，id:%s\", id));\n 44:         }\n 45:         ServiceTokenInfo serviceTokenInfo = serviceTokenInfoOp.get();\n 46:         serviceTokenInfo.setEnable(!serviceTokenInfo.getEnable());\n 47:         serviceTokenInfo.setUpdateTime(new Date());\n 48:         serviceTokenInfoMapper.updateById(serviceTokenInfo);\n 49:         return serviceTokenInfo.getEnable();\n 50:     }\n 51: \n 52:     @Override\n 53:     public ServiceTokenInfo queryById(Long id) {\n 54:         return serviceTokenInfoMapper.selectById(id);\n 55:     }\n 56: \n 57:     @Override\n 58:     public boolean deleteServiceToken(Long id) {\n 59:         int row = serviceTokenInfoMapper.deleteById(id);\n 60:         return row == 1;\n 61:     }\n```\n\nThe context below is:\n```java\n 75: @Override\n 76:     public boolean isAdmin(String sub) {\n 77:         CredentialUserEntity credentialUserEntity = credentialUserService.queryUserInfoBySub(sub);\n 78:         return Optional.ofNullable(serviceTokenInfoMapper.isAdmin(credentialUserEntity.getId())).isPresent();\n 79:     }\n 80: \n 81:     private ServiceTokenInfo queryToken(String toFindToken) {\n 82:         Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n 83:         Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n 84:             .filter(\n 85:                 e -> StringUtils.equalsIgnoreCase(toFindToken, cacheTokenService.getDecryptString(e.getEncodeToken())))\n 86:             .findFirst();\n 87:         return opServiceTokenInfo.orElse(null);\n 88:     }\n 89: \n 90:     private String queryEncryToken(String toFindToken) {\n 91:         Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n 92:         Optional<ServiceTokenInfo> optionalServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n 93:             .filter(\n 94:                 e -> StringUtils.equalsIgnoreCase(cacheTokenService.getDecryptString(e.getEncodeToken()), toFindToken))\n 95:             .findAny();\n 96:         return optionalServiceTokenInfo.map(ServiceTokenInfo::getEncodeToken).orElse(null);\n 97:     }\n 98: \n 99:     @Override\n100:     @CacheEvict(key = \"'TOKEN:'+#rawToken\", value = \"token\")\n101:     @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n102:     public boolean refreshServiceToken(String rawToken, String newToken) {\n103:         String encryToken = sccCrypto.encrypt(newToken);\n104:         String rawEncrtyToken = queryEncryToken(rawToken);\n105: \n106:         if (StringUtils.isBlank(rawEncrtyToken)) {\n107:             return false;\n108:         }\n109:         ServiceTokenInfo rawServiceTokenInfo = serviceTokenInfoMapper.findFirstByEncodeToken(rawEncrtyToken);\n110:         if (rawServiceTokenInfo == null) {\n111:             log.info(\"query by raw Token error\");\n112:             return false;\n113:         }\n114: \n115:         String rawServiceTokenInfoServiceName = rawServiceTokenInfo.getServiceName();\n116:         ServiceTokenInfo.builder().id(rawServiceTokenInfo.getId()).encodeToken(encryToken);\n117: \n118:         int updateLines = serviceTokenInfoMapper.refreshServiceToken(rawServiceTokenInfo.getId(), encryToken);\n119:         if (updateLines == 0) {\n120:             log.info(\"refresh token error\");\n121:             return false;\n122:         }\n123: \n124:         ServiceTokenHistory history = ServiceTokenHistory.builder()\n125:             .priorToken(rawEncrtyToken)\n126:             .serviceName(rawServiceTokenInfoServiceName)\n127:             .build();\n128:         serviceTokenHistoryMapper.insert(history);\n129:         return true;\n130:     }\n131: \n132:     @Override\n133:     public String addNewServiceToken(String serviceName) {\n134:         String newKey = SecurityStringUtils.random(tokenLength, true, true);\n135:         String newEncrtyToken = sccCrypto.encrypt(newKey);\n136: \n137:         ServiceTokenInfo serviceTokenInfo = ServiceTokenInfo.builder()\n138:             .serviceName(serviceName)\n139:             .encodeToken(newEncrtyToken)\n140:             .createTime(new Date())\n141:             .updateTime(new Date())\n142:             .build();\n143:         serviceTokenInfoMapper.insert(serviceTokenInfo);\n144:         return newKey;\n145:     }\n146: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -77,11 +77,0 @@\n-  86: Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n-  85: Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), false)\n-  84: .filter(e -> StringUtils.equalsIgnoreCase(toFindToken, e.getEncodeToken()))\n-  83: .findFirst();\n-  82: return opServiceTokenInfo.orElse(null);\n+  82: Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n+  83: Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n+  84: .filter(\n+  85: e -> StringUtils.equalsIgnoreCase(toFindToken, cacheTokenService.getDecryptString(e.getEncodeToken())))\n+  86: .findFirst();\n+  87: return opServiceTokenInfo.orElse(null);\n```\n\nThese recent changes show the development progressionThe new feature is 使用mybatis-plus-page构建分页条件&&使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "api-security-service_z00806805#84", "good_example_response": "```java\n    public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) {\n        Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc(\n            ServiceTokenInfo::getCreateTime);\n        if (StringUtils.isNotBlank(service)) {\n            queryWrapper.like(ServiceTokenInfo::getServiceName, service);\n        }\n        return serviceTokenInfoMapper.selectPage(page, queryWrapper);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/fuxi/security/service/impl/TokenDaoServiceImplTest", "extra_content": {"query": "使用mybatis-plus-page构建分页条件&&使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/api-security-service_z00806805/diff/84.patch", "test_result": "pass", "file_path": "/src/main/java/com/huawei/fuxi/security/service/impl/TokenDaoServiceImpl.java", "start_line": 100, "end_line": 109, "work_dir": "/docker/JavaRunProject/api-security-service_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class StringUtil {\n    public static int strBoolToInt(String strBool); /* transfer string type boolean value to int type */\n    public static String escapePercentSymbol(String origin); /* 在String.format场景下，%只能用%%来达到转义目的 */\n    public static String escapeChar(String origin); /* 名称模糊查询处理 */\n    public static boolean isIP(String addr); /* 判断是否为IP */\n    public static String escapeString(String type, String lookup);\n    public String lookup(String str);\n    public static List<String> getEnvironmentAsList(String key); /* get environment from config properties as list. */\n    public static int getEnvironmentAsInteger(String key, int defaultValue);\n    public static boolean getEnvironmentAsBoolean(String key, boolean defaultValue);\n    public static String getEnvironment(String key);\n    public static String getNoNullString(String str);\n    public static String generateUuid();\n    public static boolean areEmpty(String... params);\n    public static boolean isNotEmpty(String str);\n    public static boolean isEmpty(String str);\n}\n```\n\nThe context above is:\n```java\n  1: @Component\n  2: public class SecurityGroupHelper {\n  3: \n  4:     @Resource\n  5:     private SecurityGroupMapper securityGroupMapper;\n  6: \n  7:     @Resource\n  8:     private PortGroupBindingMapper portGroupBindingMapper;\n  9: \n 10:     public SecurityGroup getSecurityGroup(String groupId) {\n 11:         QueryWrapper<SecurityGroup> queryWrapper = new QueryWrapper<>();\n 12:         queryWrapper.lambda().eq(SecurityGroup::getCloudGroupId, groupId);\n 13:         Page<SecurityGroup> page = new Page<>(1, 1);\n 14:         IPage<SecurityGroup> securityGroupPage = securityGroupMapper.selectPage(page, queryWrapper);\n 15:         List<SecurityGroup> groups = securityGroupPage.getRecords();\n 16:         if (CollectionUtils.isEmpty(groups)) {\n 17:             return null;\n 18:         }\n 19:         return groups.get(0);\n 20:     }\n 21: \n 22:     public int addSecurityGroup(SecurityGroup securityGroup) {\n 23:         return securityGroupMapper.insert(securityGroup);\n 24:     }\n 25: \n 26:     public SecurityGroup getSecurityGroupForInstance(String projectId, String instanceId) {\n 27:         QueryWrapper<SecurityGroup> queryWrapper = new QueryWrapper<>();\n 28:         queryWrapper.lambda().eq(SecurityGroup::getInstanceId, instanceId).eq(SecurityGroup::getProjectId, projectId);\n 29:         return securityGroupMapper.selectOne(queryWrapper);\n 30:     }\n 31: \n 32:     public int deleteSecurityGroup(String id) {\n 33:         return securityGroupMapper.deleteById(id);\n 34:     }\n 35: \n 36:     public int addPortGroupBinding(PortGroupBinding binding) {\n 37:         return portGroupBindingMapper.insert(binding);\n 38:     }\n 39: \n 40:     public int deletePortGroupBindingByGroupId(String groupId) {\n 41:         if (StringUtil.isEmpty(groupId)) {\n 42:             throw new PmtsMgrException(\"group id cannot be empty\");\n 43:         }\n 44:         QueryWrapper<PortGroupBinding> queryWrapper = new QueryWrapper<>();\n 45:         queryWrapper.lambda().eq(PortGroupBinding::getGroupId, groupId);\n 46:         return portGroupBindingMapper.delete(queryWrapper);\n 47:     }\n```\n\nThe context below is:\n```java\n 60: public List<PortGroupBinding> getPortByGroupId(String groupId) {\n 61:         QueryWrapper<PortGroupBinding> queryWrapper = new QueryWrapper<>();\n 62:         queryWrapper.lambda().eq(PortGroupBinding::getGroupId, groupId);\n 63:         List<PortGroupBinding> list = portGroupBindingMapper.selectList(queryWrapper);\n 64:         if (CollectionUtils.isEmpty(list)) {\n 65:             return null;\n 66:         }\n 67:         return list;\n 68:     }\n 69: \n 70:     public int updateSecurityGroup(String id, String cloudId, String name) {\n 71:         if (StringUtil.isEmpty(id)) {\n 72:             throw new PmtsMgrException(\"group id cannot be empty\");\n 73:         }\n 74:         SecurityGroup securityGroup = securityGroupMapper.selectById(id);\n 75:         securityGroup.setCloudGroupId(cloudId);\n 76:         securityGroup.setCloudGroupName(name);\n 77:         return securityGroupMapper.updateById(securityGroup);\n 78:     }\n 79: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -13,8 +13,0 @@\n-  13: return securityGroupMapper.selectOne(queryWrapper);\n+  13: Page<SecurityGroup> page = new Page<>(1, 1);\n+  14: IPage<SecurityGroup> securityGroupPage = securityGroupMapper.selectPage(page, queryWrapper);\n+  15: List<SecurityGroup> groups = securityGroupPage.getRecords();\n+  16: if (CollectionUtils.isEmpty(groups)) {\n+  17: return null;\n+  18: }\n+  19: return groups.get(0);\n```\n\nThese recent changes show the development progressionThe new feature is 使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic int deletePortGroupBindingByGroupIdAndPortId(String groupId, List<String> tenantPortIds)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "apic-manager_z00806805#118", "good_example_response": "```java\n    public int deletePortGroupBindingByGroupId(String groupId) {\n        if (StringUtil.isEmpty(groupId)) {\n            throw new PmtsMgrException(\"group id cannot be empty\");\n        }\n        QueryWrapper<PortGroupBinding> queryWrapper = new QueryWrapper<>();\n        queryWrapper.lambda().eq(PortGroupBinding::getGroupId, groupId);\n        return portGroupBindingMapper.delete(queryWrapper);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f src/pmts-parent/pom.xml  -e -Dtest=/com/huawei/cloud/pmts/manager/helper/SecurityGroupHelperTest#test_deletePortGroupBindingByGroupId", "extra_content": {"query": "使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/apic-manager_z00806805/diff/118.patch", "test_result": "fail", "file_path": "/src/pmts-parent/pmts-manager/src/main/java/com/huawei/cloud/pmts/manager/helper/SecurityGroupHelper.java", "start_line": 63, "end_line": 71, "work_dir": "/docker/JavaRunProject/apic-manager_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @RocketMQTransactionListener\n  3: public class TransactionListenerImpl implements RocketMQLocalTransactionListener {\n```\n\nThe context below is:\n```java\n 31: /**\n 32:      * 该方法时MQ进行消息事务状态回查、\n 33:      * <p>\n 34:      *\n 35:      * @param msg\n 36:      * @return bollback, commit or unknown\n 37:      */\n 38:     @Override\n 39:     public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n 40:         log.info(\">>>> MQ事务执行器，事务状态回查 message={} <<<<\", msg);\n 41:         try {\n 42:             String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n 43:             OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n 44: \n 45:             log.info(\"事务回查：checkLocalTransaction提交事务啦！payload ={} \", payload);\n 46:             return RocketMQLocalTransactionState.COMMIT;\n 47:         } catch (Exception e) {\n 48:             log.error(\"回调的事务出错啦~ e:{}\", e.getMessage(), e);\n 49:             return RocketMQLocalTransactionState.ROLLBACK;\n 50:         }\n 51:     }\n 52: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -27,10 +27,0 @@\n-  33: /**\n-  32: * TODO: check local transaction status\n-  31: */\n+  31: /**\n+  32: * 该方法时MQ进行消息事务状态回查、\n+  33: * <p>\n+  34: *\n+  35: * @param msg\n+  36: * @return bollback, commit or unknown\n+  27: */\n```\n\nThese recent changes show the development progressionThe new feature is 使用RocketMq检测半消息，确认当前消息状态并提交事务.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 检测半消息，在该方法中，执行本地事务\npublic RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "cloudoctopusagentgw_p00520557#108", "good_example_response": "```java\n    public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n        log.info(\">>>> MQ事务执行器，执行本地事务 message={},args={} <<<<\", msg, arg);\n\n        try {\n            String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n            OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n\n            //模拟业务操作，当paidMoney >5 则提交，否则等事务会查\n            if (payload.getPaidMoney().compareTo(new BigDecimal(\"5\")) > 0) {\n                //提交事务\n                log.info(\"MQ提交事务啦！payload ={} \", payload);\n                return RocketMQLocalTransactionState.COMMIT;\n            }\n\n            //不知道状态，转 checkLocalTransaction 回查执行\n            log.info(\"MQ无法确定，等回查！payload ={} \", payload);\n            return RocketMQLocalTransactionState.UNKNOWN;\n        } catch (Exception e) {\n            log.error(\"事务消息出错啦~ e:{}\", e.getMessage(), e);\n            //回滚\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImplTest.java  clean test", "extra_content": {"query": "使用RocketMq检测半消息，确认当前消息状态并提交事务", "diff_path": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/diff/108.patch", "test_result": "fail", "file_path": "/cloudoctopusagentgw/src/main/java/com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImpl.java", "start_line": 33, "end_line": 56, "work_dir": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @RocketMQTransactionListener\n  3: public class TransactionListenerImpl implements RocketMQLocalTransactionListener {\n  4: \n  5:     /**\n  6:      * 检测半消息，在该方法中，执行本地事务\n  7:      *\n  8:      * @param msg 发送消息\n  9:      * @param arg 外部参数\n 10:      * @return commit：提交事务，它允许消费者消费此消息。bollback：回滚事务，它代表该消息将被删除，不允许被消费。 unknown：中间状态，它代表需要检查消息队列来确定状态（checkLocalTransaction方法）。\n 11:      */\n 12:     @Override\n 13:     public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\n 14:         log.info(\">>>> MQ事务执行器，执行本地事务 message={},args={} <<<<\", msg, arg);\n 15: \n 16:         try {\n 17:             String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n 18:             OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n 19: \n 20:             //模拟业务操作，当paidMoney >5 则提交，否则等事务会查\n 21:             if (payload.getPaidMoney().compareTo(new BigDecimal(\"5\")) > 0) {\n 22:                 //提交事务\n 23:                 log.info(\"MQ提交事务啦！payload ={} \", payload);\n 24:                 return RocketMQLocalTransactionState.COMMIT;\n 25:             }\n 26: \n 27:             //不知道状态，转 checkLocalTransaction 回查执行\n 28:             log.info(\"MQ无法确定，等回查！payload ={} \", payload);\n 29:             return RocketMQLocalTransactionState.UNKNOWN;\n 30:         } catch (Exception e) {\n 31:             log.error(\"事务消息出错啦~ e:{}\", e.getMessage(), e);\n 32:             //回滚\n 33:             return RocketMQLocalTransactionState.ROLLBACK;\n 34:         }\n 35:     }\n```\n\nThe context below is:\n```java\n 52: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -14,20 +14,0 @@\n-  16: // TODO implement business and decide transaction state\n-  14: return RocketMQLocalTransactionState.UNKNOWN;\n+  14: log.info(\">>>> MQ事务执行器，执行本地事务 message={},args={} <<<<\", msg, arg);\n+  16: try {\n+  17: String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n+  18: OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n+  15: //模拟业务操作，当paidMoney >5 则提交，否则等事务会查\n+  21: if (payload.getPaidMoney().compareTo(new BigDecimal(\"5\")) > 0) {\n+  19: //提交事务\n+  23: log.info(\"MQ提交事务啦！payload ={} \", payload);\n+  24: return RocketMQLocalTransactionState.COMMIT;\n+  25: }\n+  20: //不知道状态，转 checkLocalTransaction 回查执行\n+  28: log.info(\"MQ无法确定，等回查！payload ={} \", payload);\n+  29: return RocketMQLocalTransactionState.UNKNOWN;\n+  30: } catch (Exception e) {\n+  31: log.error(\"事务消息出错啦~ e:{}\", e.getMessage(), e);\n+  22: //回滚\n+  33: return RocketMQLocalTransactionState.ROLLBACK;\n+  26: }\n```\n\nThese recent changes show the development progressionThe new feature is 实现RocketMq事务消息状态回查机制，确认事务消息状态.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 该方法时MQ进行消息事务状态回查、 <p>\npublic RocketMQLocalTransactionState checkLocalTransaction(Message msg)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "cloudoctopusagentgw_p00520557#109", "good_example_response": "```java\n    public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\n        log.info(\">>>> MQ事务执行器，事务状态回查 message={} <<<<\", msg);\n        try {\n            String jsonString = new String((byte[]) msg.getPayload(), StandardCharsets.UTF_8);\n            OrderPaidEvent payload = JSON.parseObject(jsonString, OrderPaidEvent.class);\n\n            log.info(\"事务回查：checkLocalTransaction提交事务啦！payload ={} \", payload);\n            return RocketMQLocalTransactionState.COMMIT;\n        } catch (Exception e) {\n            log.error(\"回调的事务出错啦~ e:{}\", e.getMessage(), e);\n            return RocketMQLocalTransactionState.ROLLBACK;\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImplTest.java  clean test", "extra_content": {"query": "实现RocketMq事务消息状态回查机制，确认事务消息状态", "diff_path": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/diff/109.patch", "test_result": "pass", "file_path": "/cloudoctopusagentgw/src/main/java/com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/TransactionListenerImpl.java", "start_line": 66, "end_line": 78, "work_dir": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @Component\n  3: @RocketMQMessageListener(topic = \"Consumer_Transaction\",//主题\n  4:     consumerGroup = \"Consumer_Transaction_group\"//消费组  唯一\n  5: )\n  6: public class ConsumerTransaction implements RocketMQListener<OrderPaidEvent>, RocketMQPushConsumerLifecycleListener {\n```\n\nThe context below is:\n```java\n 23: /**\n 24:      * consumer配置都是通过这个\n 25:      *\n 26:      * @param consumer consumer配置\n 27:      */\n 28:     @Override\n 29:     public void prepareStart(DefaultMQPushConsumer consumer) {\n 30:         //设最大重试次数，默认16次\n 31:         //距离上一次重试间隔\n 32:         //第1次：10s    第2次：30s     第3次：1min    第4次：2min     第5次：3min     第6次：4min     第7次：5min    第8次：6min\n 33:         //第9次：7min   第10次：8min   第11次：9min   第12次：10min   第13次：20min   第14次：30min   第15次：1h     第16次：2h   16次以后：都是2h\n 34:         //某条消息在一直消费失败的前提下，将会在接下来的 4 小时 46 分钟之内进行 16 次重试，超过这个时间范围消息将不再重试投递。\n 35:         consumer.setMaxReconsumeTimes(3);\n 36: \n 37:         //关于消费位点,默认CONSUME_FROM_LAST_OFFSET(从上一个偏移量消费)\n 38:         consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n 39: \n 40:         //关于消费位点,从第一个偏移量消费（即全量消费,正常消息相同存储均为 3 天，3 天后会被自动删除）\n 41:         //consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n 42: \n 43:         //关于消费位点,以秒精度回溯消费时间，按指定回溯时间开始消费,默认回溯半小时前的消费时间。\n 44:         //时间格式为20131223171201<br>暗示2013年12月23日17点12分01秒<br>\n 45:         //consumer.setConsumeTimestamp(UtilAll.timeMillisToHumanString3(System.currentTimeMillis()));\n 46:         //consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_TIMESTAMP);\n 47:     }\n 48: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -26,17 +26,0 @@\n-  31: // TODO configure retry and offsets\n-  30: }\n+  30: //设最大重试次数，默认16次\n+  31: //距离上一次重试间隔\n+  32: //第1次：10s    第2次：30s     第3次：1min    第4次：2min     第5次：3min     第6次：4min     第7次：5min    第8次：6min\n+  33: //第9次：7min   第10次：8min   第11次：9min   第12次：10min   第13次：20min   第14次：30min   第15次：1h     第16次：2h   16次以后：都是2h\n+  34: //某条消息在一直消费失败的前提下，将会在接下来的 4 小时 46 分钟之内进行 16 次重试，超过这个时间范围消息将不再重试投递。\n+  35: consumer.setMaxReconsumeTimes(3);\n+  36: //关于消费位点,默认CONSUME_FROM_LAST_OFFSET(从上一个偏移量消费)\n+  38: consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n+  37: //关于消费位点,从第一个偏移量消费（即全量消费,正常消息相同存储均为 3 天，3 天后会被自动删除）\n+  39: //consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n+  40: //关于消费位点,以秒精度回溯消费时间，按指定回溯时间开始消费,默认回溯半小时前的消费时间。\n+  41: //时间格式为20131223171201<br>暗示2013年12月23日17点12分01秒<br>\n+  42: //consumer.setConsumeTimestamp(UtilAll.timeMillisToHumanString3(System.currentTimeMillis()));\n+  27: //consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_TIMESTAMP);\n+  26: }\n```\n\nThese recent changes show the development progressionThe new feature is 使用RocketMq监听消息，对报错消息进行消费重试.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 消费者 程序报错则进行重试\npublic void onMessage(OrderPaidEvent orderPaidEvent)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "cloudoctopusagentgw_p00520557#110", "good_example_response": "```java\n    public void onMessage(OrderPaidEvent orderPaidEvent) {\n        try {\n            //模拟业务逻辑处理中...\n            log.info(\"ConsumerTransaction 事务消息消费 message: {}  \", orderPaidEvent);\n            TimeUnit.SECONDS.sleep(10);\n            //模拟出错，触发重试\n            //            int i = 1 / 0;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e.getMessage());\n        }\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true  -Dtest=com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/RocketMQServiceImplTest.java  clean test", "extra_content": {"query": "使用RocketMq监听消息，对报错消息进行消费重试", "diff_path": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/diff/110.patch", "test_result": "pass", "file_path": "/cloudoctopusagentgw/src/main/java/com/huawei/clouddragon/cloudoctopusagentgw/rocketmq/ConsumerTransaction.java", "start_line": 27, "end_line": 39, "work_dir": "/docker/JavaRunProject/cloudoctopusagentgw_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class KafkaTransactionConfig {\n  2: \n  3:     // 生产者工厂（启用事务支持）\n```\n\nThe context below is:\n```java\n 19: // Kafka事务管理器\n 20:     public KafkaTransactionManager<String, String> kafkaTransactionManager() {\n 21:         return new KafkaTransactionManager<>(producerFactory());\n 22:     }\n 23: \n 24: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -15,4 +15,0 @@\n+  18: // Kafka事务管理器\n+  15: public KafkaTransactionManager<String, String> kafkaTransactionManager() {\n+  16: return new KafkaTransactionManager<>(producerFactory());\n+  17: }\n```\n\nThese recent changes show the development progressionThe new feature is 配置KafkaTransactionManager中的生产者信息.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic ProducerFactory<String, String> producerFactory()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#121", "good_example_response": "```java\n    public ProducerFactory<String, String> producerFactory() {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        configs.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n        configs.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n        configs.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"tx-\"); // 事务ID前缀（必须唯一）\n\n        DefaultKafkaProducerFactory<String, String> factory = new DefaultKafkaProducerFactory<>(configs);\n        factory.setTransactionIdPrefix(\"tx-\"); // 设置事务ID前缀\n        return factory;\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-common/pom.xml -Dtest=com.huaweicloud.devspore.cic.common.kafka.transaction.KafkaTransactionConfigTest clean test", "extra_content": {"query": "配置KafkaTransactionManager中的生产者信息", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/121.patch", "test_result": "pass", "file_path": "/devspore-cic-common/src/main/java/com/huaweicloud/devspore/cic/common/kafka/transaction/KafkaTransactionConfig.java", "start_line": 16, "end_line": 27, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Service\n  2: @Slf4j\n  3: public class KafkaProducerService {\n  4: \n  5:     private final KafkaTemplate<String, String> kafkaTemplate;\n  6: \n  7:     public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {\n  8:         this.kafkaTemplate = kafkaTemplate;\n  9:     }\n 10: \n 11:     /**\n 12:      * 发送消息到 Kafka 指定主题\n 13:      *\n 14:      * @param topic 目标主题\n 15:      * @param key 消息键\n 16:      * @param message 消息内容\n 17:      * @throws IllegalArgumentException 如果主题为空或无效\n 18:      */\n 19:     public ListenableFuture<?> sendMessage(String topic, String key, String message) {\n 20:         if (topic == null || topic.trim().isEmpty()) {\n 21:             throw new IllegalArgumentException(\"Topic must not be null or empty\");\n 22:         }\n 23:         return kafkaTemplate.send(topic, key, message);\n 24:     }\n 25: \n 26:     /**\n 27:      * 带回调的方法\n 28:      *\n 29:      * @param topic\n 30:      * @param key\n 31:      * @param message\n 32:      * @param successCallback\n 33:      * @param failureCallback\n 34:      */\n 35:     public void sendWithCallback(String topic, String key, String message, Runnable successCallback,\n 36:         Runnable failureCallback) {\n 37:         ListenableFuture<?> future = sendMessage(topic, key, message);\n 38:         future.addCallback(result -> successCallback.run(), ex -> failureCallback.run());\n 39:     }\n```\n\nThe context below is:\n```java\n 53: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -26,16 +26,0 @@\n-  27: // TODO: expose callback style later\n-  26: // public void sendAsync(...) { }\n+  26: /**\n+  27: * 带回调的方法\n+  28: *\n+  29: * @param topic\n+  30: * @param key\n+  31: * @param message\n+  32: * @param successCallback\n+  33: * @param failureCallback\n+  34: */\n+  35: public void sendWithCallback(String topic, String key, String message, Runnable successCallback,\n+  36: Runnable failureCallback) {\n+  37: ListenableFuture<?> future = sendMessage(topic, key, message);\n+  38: future.addCallback(result -> successCallback.run(), ex -> failureCallback.run());\n+  39: }\n```\n\nThese recent changes show the development progressionThe new feature is 如何配置KafkaTemplate.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// KafkaTemplate\npublic static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#73", "good_example_response": "```java\n    public static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers) {\n        Map<String, Object> config = new HashMap<>();\n        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n\n        ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(config);\n        return new KafkaTemplate<>(producerFactory);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-common/pom.xml -Dtest=com.huaweicloud.devspore.cic.common.kafka.KafkaProducerWithConfigTest clean test", "extra_content": {"query": "如何配置KafkaTemplate", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/73.patch", "test_result": "pass", "file_path": "/devspore-cic-common/src/main/java/com/huaweicloud/devspore/cic/common/kafka/KafkaProducerService.java", "start_line": 63, "end_line": 72, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Service\n  2: @Slf4j\n  3: public class KafkaProducerService {\n  4: \n  5:     private final KafkaTemplate<String, String> kafkaTemplate;\n  6: \n  7:     public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {\n  8:         this.kafkaTemplate = kafkaTemplate;\n  9:     }\n```\n\nThe context below is:\n```java\n 19: /**\n 20:      * 带回调的方法\n 21:      *\n 22:      * @param topic\n 23:      * @param key\n 24:      * @param message\n 25:      * @param successCallback\n 26:      * @param failureCallback\n 27:      */\n 28:     public void sendWithCallback(String topic, String key, String message, Runnable successCallback,\n 29:         Runnable failureCallback) {\n 30:         ListenableFuture<?> future = sendMessage(topic, key, message);\n 31:         future.addCallback(result -> successCallback.run(), ex -> failureCallback.run());\n 32:     }\n 33: \n 34:     /**\n 35:      * KafkaTemplate\n 36:      * \n 37:      * @param bootstrapServers\n 38:      * @return\n 39:      */\n 40:     public static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers) {\n 41:         Map<String, Object> config = new HashMap<>();\n 42:         config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n 43:         config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n 44:         config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n 45: \n 46:         ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(config);\n 47:         return new KafkaTemplate<>(producerFactory);\n 48:     }\n 49: \n 50: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -31,10 +31,0 @@\n-  33: // TODO: 之后再抽离KafkaTemplate工厂\n-  40: public static KafkaTemplate<String, String> configureKafkaTemplate(String servers) { return null; }\n+  40: public static KafkaTemplate<String, String> configureKafkaTemplate(String bootstrapServers) {\n+  33: Map<String, Object> config = new HashMap<>();\n+  31: config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+  32: config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+  34: config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+  35: ProducerFactory<String, String> producerFactory = new DefaultKafkaProducerFactory<>(config);\n+  36: return new KafkaTemplate<>(producerFactory);\n+  37: }\n```\n\nThese recent changes show the development progressionThe new feature is 使用KafkaTemplate发送消息.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送消息到 Kafka 指定主题\npublic ListenableFuture<?> sendMessage(String topic, String key, String message)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#74", "good_example_response": "```java\n    public ListenableFuture<?> sendMessage(String topic, String key, String message) {\n        if (topic == null || topic.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Topic must not be null or empty\");\n        }\n        return kafkaTemplate.send(topic, key, message);\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-common/pom.xml -Dtest=com.huaweicloud.devspore.cic.common.kafka.KafkaProducerServiceTest clean test", "extra_content": {"query": "使用KafkaTemplate发送消息", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/74.patch", "test_result": "pass", "file_path": "/devspore-cic-common/src/main/java/com/huaweicloud/devspore/cic/common/kafka/KafkaProducerService.java", "start_line": 35, "end_line": 40, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ErrorMessage {\n    public void setSuggestion(String suggestion);\n    public String getSuggestion();\n    public void setExplain(String explain);\n    public String getExplain();\n    public void setErrorMessage(String errorMessage);\n    public String getErrorMessage();\n    public void setErrorCode(String errorCode);\n    public String getErrorCode();\n}\n```\n\nThe context above is:\n```java\n  1: public abstract class AbstractRemoteCallService {\n  2:     protected static final Logger LOG = LoggerFactory.getLogger(AbstractRemoteCallService.class);\n  3: \n  4:     @Autowired\n  5:     private ServiceAvailableDetectConfig serviceAvailableDetectService;\n  6: \n  7:     private LubanRestTemplate lubanRestTemplate;\n  8: \n  9:     private String server;\n 10: \n 11:     private int connectTimeout = 5000;\n 12: \n 13:     private int readTimeout = 240000;\n 14: \n 15:     private int connectionRequestTimeout = 20000;\n 16: \n 17:     protected LubanRestTemplate getLubanRestTemplate() {\n 18:         if (lubanRestTemplate != null) {\n 19:             return lubanRestTemplate;\n 20:         }\n 21:         synchronized (this) {\n 22:             if (lubanRestTemplate != null) {\n 23:                 return lubanRestTemplate;\n 24:             }\n 25:             lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n 26:         }\n 27:         return lubanRestTemplate;\n 28:     }\n 29: \n 30:     protected String getServer() {\n 31:         return server;\n 32:     }\n 33: \n 34:     public void setServer(String server) {\n 35:         this.server = server;\n 36:     }\n 37: \n 38:     protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n 39: \n 40:         List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n 41: \n 42:         if (availableAddress.isEmpty()) {\n 43:             throw new ApiClientException(\"not available address:\");\n 44:         }\n 45:         RestTemplate templete = getLubanRestTemplate();\n 46:         HttpHeaders headers = new HttpHeaders();\n 47:         headers.setContentType(MediaType.APPLICATION_JSON);\n 48:         // 未来此处可以添加body体\n 49:         String requestBody = JSON.toJSONString(request);\n 50:         HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n 51: \n 52:         ResponseEntity<T> response = null;\n 53: \n 54:         // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n 55:         RestClientException ex = null;\n 56:         for (String str : availableAddress) {\n 57:             try {\n 58:                 String address = str + url;\n 59:                 response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n 60:                 break;\n 61:             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n 62:                 int status = logException.getRawStatusCode();\n 63:                 String body = logException.getResponseBodyAsString();\n 64:                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n 65:                 ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n 66:                 if (em == null) {\n 67:                     throw new ApiClientException(body, logException);\n 68:                 }\n 69:                 if (em.getErrorCode() == null) {\n 70:                     throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n 71:                 } else {\n 72:                     throw new ApiClientException(em);\n 73:                 }\n 74: \n 75:             } catch (RestClientException logException) { // 客户端的数据\n 76: \n 77:                 ex = logException;\n 78:                 continue;\n 79:             }\n 80:         }\n 81: \n 82:         if (response == null) {\n 83:             throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n 84:         }\n 85: \n 86:         return response.getBody();\n 87:     }\n```\n\nThe context below is:\n```java\n142: /**\n143:      * 新的get方法\n144:      *\n145:      * @param url\n146:      * @param responseType\n147:      * @param <T>\n148:      * @return\n149:      * @author lwx521892\n150:      * @since 2019年12月19日\n151:      */\n152:     protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n153:         List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n154:         if (availableAddress.isEmpty()) {\n155:             throw new ApiClientException(\"not available address:\");\n156:         }\n157:         RestTemplate templete = getLubanRestTemplate();\n158:         HttpHeaders headers = new HttpHeaders();\n159:         headers.setContentType(MediaType.APPLICATION_JSON);\n160:         // 未来此处可以添加body体\n161: \n162:         HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n163: \n164:         ResponseEntity<T> response = null;\n165: \n166:         // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n167:         RestClientException ex = null;\n168:         for (String str : availableAddress) {\n169:             try {\n170:                 String address = str + url;\n171:                 response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n172:                 break;\n173:             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n174:                 int status = logException.getRawStatusCode();\n175:                 String body = logException.getResponseBodyAsString();\n176:                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n177:                 ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n178:                 if (em == null) {\n179:                     throw new ApiClientException(body, logException);\n180:                 } else if (em.getErrorCode() == null) {\n181:                     throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n182:                 } else {\n183:                     throw new ApiClientException(em);\n184:                 }\n185:             } catch (RestClientException logException) { // 客户端的数据\n186:                 ex = logException;\n187:                 continue;\n188:             }\n189:         }\n190: \n191:         if (response == null) {\n192:             throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n193:         }\n194: \n195:         return response.getBody();\n196:     }\n197: \n198:     /**\n199:      * 发送Get请求，并且获取结果转换成对象 <br>\n200:      *\n201:      * @param url\n202:      * @param responseType\n203:      * @return\n204:      * @author y00438022\n205:      * @since 2019年6月28日\n206:      */\n207:     protected <T> T getForObject(String url, Class<T> responseType) {\n208:         List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n209: \n210:         if (availableAddress.isEmpty()) {\n211:             throw new ApiClientException(\"not available address:\");\n212:         }\n213:         RestTemplate templete = getLubanRestTemplate();\n214:         HttpHeaders headers = new HttpHeaders();\n215:         headers.setContentType(MediaType.APPLICATION_JSON);\n216:         // 未来此处可以添加body体\n217:         HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n218:         ResponseEntity<String> response = null;\n219:         // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n220:         RestClientException ex = null;\n221:         for (String str : availableAddress) {\n222:             try {\n223:                 String address = str + url;\n224:                 response = templete.exchange(address, HttpMethod.GET, requestEntity, String.class);\n225:                 break;\n226:             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n227:                 int status = logException.getRawStatusCode();\n228:                 String body = logException.getResponseBodyAsString();\n229:                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n230:                 ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n231:                 if (em == null) {\n232:                     throw new ApiClientException(body, logException);\n233:                 }\n234:                 if (em.getErrorCode() == null) {\n235:                     throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n236:                 } else {\n237:                     throw new ApiClientException(em);\n238:                 }\n239:             } catch (RestClientException logException) { // 客户端的数据\n240:                 ex = logException;\n241:                 continue;\n242:             }\n243:         }\n244: \n245:         if (response == null) {\n246:             throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n247:         }\n248: \n249:         String result = response.getBody();\n250:         return JSON.parseObject(result, responseType);\n251:     }\n252: \n253:     public int getConnectTimeout() {\n254:         return connectTimeout;\n255:     }\n256: \n257:     public void setConnectTimeout(int connectTimeout) {\n258:         this.connectTimeout = connectTimeout;\n259:     }\n260: \n261:     public int getReadTimeout() {\n262:         return readTimeout;\n263:     }\n264: \n265:     public void setReadTimeout(int readTimeout) {\n266:         this.readTimeout = readTimeout;\n267:     }\n268: \n269:     public int getConnectionRequestTimeout() {\n270:         return connectionRequestTimeout;\n271:     }\n272: \n273:     public void setConnectionRequestTimeout(int connectionRequestTimeout) {\n274:         this.connectionRequestTimeout = connectionRequestTimeout;\n275:     }\n276: \n277: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -80,7 +80,0 @@\n   84: }\n-  82: return response.getBody();\n+  82: if (response == null) {\n+  83: throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n+  80: }\n+  86: return response.getBody();\n   81: }\n```\n\nThese recent changes show the development progressionThe new feature is 通过spring RestTemplate发送post请求.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送post请求，并且获取结果转换成对象 <br>\nprotected <T> T postForObject(String url, Object request, Class<T> responseType)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "lubanjob_f00563108#63", "good_example_response": "```java\n    protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/lubanjob_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.luban.cmdb.client.config.AbstractRemoteCallServiceTest.java#test_postForObject_should_return_not_null_when_condition", "extra_content": {"query": "通过spring RestTemplate发送post请求", "diff_path": "/docker/JavaRunProject/lubanjob_f00563108/diff/63.patch", "test_result": "fail", "file_path": "/common/cmdb-client/src/main/java/com/huawei/luban/cmdb/client/config/AbstractRemoteCallService.java", "start_line": 67, "end_line": 117, "work_dir": "/docker/JavaRunProject/lubanjob_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @Service\n  3: public class RocketMQServiceImpl implements IRocketMQService {\n  4: \n  5:     @Autowired\n  6:     private RocketMQTemplate rocketMqTemplate;\n  7: \n  8:     @Autowired\n  9:     private DefaultMQProducer producer;\n 10: \n 11:     @Override\n 12:     public SendResult sendMessage(String destination, Object msg) {\n 13:         String[] split = destination.split(\":\");\n 14:         if (split.length == 2) {\n 15:             return this.sendMessage(split[0], split[1], msg);\n 16:         }\n 17:         return this.sendMessage(destination, null, msg);\n 18:     }\n 19: \n 20:     @Override\n 21:     public SendResult sendMessage(String topicName, String tags, Object msg) {\n 22:         return this.sendMessage(topicName, tags, null, msg);\n 23:     }\n 24: \n 25:     @Override\n 26:     public SendResult sendMessage(String topicName, String tags, String key, Object msg) {\n 27:         MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n 28:         //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n 29:         if (StringUtils.isNotBlank(key)) {\n 30:             messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n 31:         }\n 32:         Message<?> message = messageBuilder.build();\n 33:         SendResult sendResult = this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), message);\n 34:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n 35:             log.info(\"MQ发送同步消息成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n 36:         } else {\n 37:             log.warn(\"MQ发送同步消息不一定成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n 38:         }\n 39:         return sendResult;\n 40:     }\n 41: \n 42:     @Override\n 43:     public SendResult sendMessageBySql(String topicName, Map<String, Object> map, Object msg) {\n 44:         return this.sendMessageBySql(topicName, map, null, msg);\n 45:     }\n 46: \n 47:     @Override\n 48:     public SendResult sendMessageBySql(String topicName, Map<String, Object> map, String key, Object msg) {\n 49:         MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n 50:         //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n 51:         if (StringUtils.isNotBlank(key)) {\n 52:             messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n 53:         }\n 54:         //设置自定义属性\n 55:         if (map != null && !map.isEmpty()) {\n 56:             for (Map.Entry<String, Object> entry : map.entrySet()) {\n 57:                 messageBuilder.setHeader(entry.getKey(), entry.getValue());\n 58:             }\n 59:         }\n 60:         Message<?> message = messageBuilder.build();\n 61:         SendResult sendResult = this.rocketMqTemplate.syncSend(topicName, message);\n 62:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n 63:             log.info(\"发送同步消息-SQL92模式成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n 64:         } else {\n 65:             log.warn(\"发送同步消息-SQL92模式不一定成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n 66:         }\n 67:         return sendResult;\n 68:     }\n 69: \n 70:     @Override\n 71:     public void sendAsyncMessage(String destination, Object msg, SendCallback sendCallback) {\n 72:     }\n 73: \n 74:     @Override\n 75:     public void sendOneway(String destination, Object msg) {\n 76:         this.rocketMqTemplate.sendOneWay(destination, msg);\n 77:         log.info(\"MQ发送单向消息,destination={} msg={}\", destination, msg);\n 78:     }\n 79: \n 80:     @Override\n 81:     public void sendBatchMessage(String destination, List<?> list) {\n 82:         String topicName = destination;\n 83:         String tags = \"\";\n 84: \n 85:         String[] split = destination.split(\":\");\n 86:         if (split.length == 2) {\n 87:             topicName = split[0];\n 88:             tags = split[1];\n 89:         }\n 90:         this.sendBatchMessage(topicName, tags, 30000L, list);\n 91:     }\n 92: \n 93:     @Override\n 94:     public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n 95:     }\n 96: \n 97:     @Override\n 98:     public SendResult sendDelayLevel(String destination, Object msg, int delayTimeLevel) {\n 99:         return this.sendDelayLevel(destination, msg, 30000, delayTimeLevel);\n100:     }\n101: \n102:     @Override\n103:     public SendResult sendDelayLevel(String destination, Object msg, int timeout, int delayTimeLevel) {\n104:         Message<?> message = MessageBuilder\n105:             .withPayload(msg)\n106:             .build();\n107:         SendResult sendResult = this.rocketMqTemplate.syncSend(destination, message, timeout, delayTimeLevel);\n108:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n109:             log.info(\"MQ发送延时消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n110:         } else {\n111:             log.warn(\"MQ发送延时消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n112:         }\n113:         return sendResult;\n114:     }\n115: \n116:     @Override\n117:     public SendResult sendInOrder(String destination, Object msg, String hashKey) {\n118:         Message<?> message = MessageBuilder\n119:             .withPayload(msg)\n120:             .build();\n121:         //hashKey:  根据其哈希值取模后确定发送到哪一个队列\n122:         SendResult sendResult = this.rocketMqTemplate.syncSendOrderly(destination, message, hashKey);\n123:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n124:             log.info(\"MQ发送顺序消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n125:         } else {\n126:             log.warn(\"MQ发送顺序消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n127:         }\n128:         return sendResult;\n129:     }\n```\n\nThe context below is:\n```java\n148: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -80,14 +80,0 @@\n   80: @Override\n-  82: public void sendBatchMessage(String destination, List<?> list) {\n-  81: }\n+  81: public void sendBatchMessage(String destination, List<?> list) {\n+  82: String topicName = destination;\n+  83: String tags = \"\";\n+  85: String[] split = destination.split(\":\");\n+  86: if (split.length == 2) {\n+  87: topicName = split[0];\n+  88: tags = split[1];\n+  89: }\n+  90: this.sendBatchMessage(topicName, tags, 30000L, list);\n+  91: }\n   93: @Override\n```\n\nThese recent changes show the development progressionThe new feature is 使用RocketMq实现一个支持事务机制发送消息的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic SendResult sendMessageInTransaction(String destination, Object msg, Object arg)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "metadata-center_p00520557#100", "good_example_response": "```java\n    public SendResult sendMessageInTransaction(String destination, Object msg, Object arg) {\n        Message<?> message = MessageBuilder\n            //转为JSON格式\n            .withPayload(msg instanceof String ? msg : JSON.toJSONString(msg))\n            .build();\n\n        TransactionSendResult sendResult = rocketMqTemplate.sendMessageInTransaction(destination, message, arg);\n\n        if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n            log.info(\"MQ发送事务消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        } else {\n            log.warn(\"MQ发送事务消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n        }\n        return sendResult;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -s /usr/lib/apache-maven-3.9.8/conf/settings_wyw.xml -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImplTest.java clean test", "extra_content": {"query": "使用RocketMq实现一个支持事务机制发送消息的方法", "diff_path": "/docker/JavaRunProject/metadata-center_p00520557/diff/100.patch", "test_result": "pass", "file_path": "/src/main/java/com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImpl.java", "start_line": 164, "end_line": 178, "work_dir": "/docker/JavaRunProject/metadata-center_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @Service\n  3: public class RocketMQServiceImpl implements IRocketMQService {\n  4: \n  5:     @Autowired\n  6:     private RocketMQTemplate rocketMqTemplate;\n  7: \n  8:     @Autowired\n  9:     private DefaultMQProducer producer;\n 10: \n 11:     @Override\n 12:     public SendResult sendMessage(String destination, Object msg) {\n 13:         String[] split = destination.split(\":\");\n 14:         if (split.length == 2) {\n 15:             return this.sendMessage(split[0], split[1], msg);\n 16:         }\n 17:         return this.sendMessage(destination, null, msg);\n 18:     }\n 19: \n 20:     @Override\n 21:     public SendResult sendMessage(String topicName, String tags, Object msg) {\n 22:         return this.sendMessage(topicName, tags, null, msg);\n 23:     }\n 24: \n 25:     @Override\n 26:     public SendResult sendMessage(String topicName, String tags, String key, Object msg) {\n 27:         MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n 28:         //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n 29:         if (StringUtils.isNotBlank(key)) {\n 30:             messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n 31:         }\n 32:         Message<?> message = messageBuilder.build();\n 33:         SendResult sendResult = this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), message);\n 34:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n 35:             log.info(\"MQ发送同步消息成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n 36:         } else {\n 37:             log.warn(\"MQ发送同步消息不一定成功,topicName={},tags={},msg={},sendResult={}\", topicName, tags, msg, sendResult);\n 38:         }\n 39:         return sendResult;\n 40:     }\n 41: \n 42:     @Override\n 43:     public SendResult sendMessageBySql(String topicName, Map<String, Object> map, Object msg) {\n 44:         return this.sendMessageBySql(topicName, map, null, msg);\n 45:     }\n 46: \n 47:     @Override\n 48:     public SendResult sendMessageBySql(String topicName, Map<String, Object> map, String key, Object msg) {\n 49:         MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n 50:         //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n 51:         if (StringUtils.isNotBlank(key)) {\n 52:             messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n 53:         }\n 54:         //设置自定义属性\n 55:         if (map != null && !map.isEmpty()) {\n 56:             for (Map.Entry<String, Object> entry : map.entrySet()) {\n 57:                 messageBuilder.setHeader(entry.getKey(), entry.getValue());\n 58:             }\n 59:         }\n 60:         Message<?> message = messageBuilder.build();\n 61:         SendResult sendResult = this.rocketMqTemplate.syncSend(topicName, message);\n 62:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n 63:             log.info(\"发送同步消息-SQL92模式成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n 64:         } else {\n 65:             log.warn(\"发送同步消息-SQL92模式不一定成功,topicName={},map={},msg={},sendResult={}\", topicName, map, msg, sendResult);\n 66:         }\n 67:         return sendResult;\n 68:     }\n 69: \n 70:     @Override\n 71:     public void sendAsyncMessage(String destination, Object msg, SendCallback sendCallback) {\n 72:     }\n 73: \n 74:     @Override\n 75:     public void sendOneway(String destination, Object msg) {\n 76:         this.rocketMqTemplate.sendOneWay(destination, msg);\n 77:         log.info(\"MQ发送单向消息,destination={} msg={}\", destination, msg);\n 78:     }\n```\n\nThe context below is:\n```java\n 84: @Override\n 85:     public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n 86:     }\n 87: \n 88:     @Override\n 89:     public SendResult sendDelayLevel(String destination, Object msg, int delayTimeLevel) {\n 90:         return this.sendDelayLevel(destination, msg, 30000, delayTimeLevel);\n 91:     }\n 92: \n 93:     @Override\n 94:     public SendResult sendDelayLevel(String destination, Object msg, int timeout, int delayTimeLevel) {\n 95:         Message<?> message = MessageBuilder\n 96:             .withPayload(msg)\n 97:             .build();\n 98:         SendResult sendResult = this.rocketMqTemplate.syncSend(destination, message, timeout, delayTimeLevel);\n 99:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n100:             log.info(\"MQ发送延时消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n101:         } else {\n102:             log.warn(\"MQ发送延时消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n103:         }\n104:         return sendResult;\n105:     }\n106: \n107:     @Override\n108:     public SendResult sendInOrder(String destination, Object msg, String hashKey) {\n109:         Message<?> message = MessageBuilder\n110:             .withPayload(msg)\n111:             .build();\n112:         //hashKey:  根据其哈希值取模后确定发送到哪一个队列\n113:         SendResult sendResult = this.rocketMqTemplate.syncSendOrderly(destination, message, hashKey);\n114:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n115:             log.info(\"MQ发送顺序消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n116:         } else {\n117:             log.warn(\"MQ发送顺序消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n118:         }\n119:         return sendResult;\n120:     }\n121: \n122:     @Override\n123:     public SendResult sendMessageInTransaction(String destination, Object msg, Object arg) {\n124:         Message<?> message = MessageBuilder\n125:             //转为JSON格式\n126:             .withPayload(msg instanceof String ? msg : JSON.toJSONString(msg))\n127:             .build();\n128: \n129:         TransactionSendResult sendResult = rocketMqTemplate.sendMessageInTransaction(destination, message, arg);\n130: \n131:         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n132:             log.info(\"MQ发送事务消息成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n133:         } else {\n134:             log.warn(\"MQ发送事务消息不一定成功,destination={} msg={} sendResult={}\", destination, message, sendResult);\n135:         }\n136:         return sendResult;\n137:     }\n138: }\n```\n\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -79,5 +79,0 @@\n   81: @Override\n-  80: public void sendBatchMessage(String destination, List<?> list) {\n-  79: }\n+  79: public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n+  80: }\n```\n\nThese recent changes show the development progressionThe new feature is 使用RocketMq的DefaultMQProducer实现一个批量发送消息的方法.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic void sendBatchMessage(String destination, List<?> list)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "metadata-center_p00520557#99", "good_example_response": "```java\n    public void sendBatchMessage(String topicName, String tags, Long timeout, List<?> list) {\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -s /usr/lib/apache-maven-3.9.8/conf/settings_wyw.xml -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImplTest.java clean test", "extra_content": {"query": "使用RocketMq的DefaultMQProducer实现一个批量发送消息的方法", "diff_path": "/docker/JavaRunProject/metadata-center_p00520557/diff/99.patch", "test_result": "fail", "file_path": "/src/main/java/com/huawei/cloud/metadatacenter/rocketmq/producer/RocketMQServiceImpl.java", "start_line": 126, "end_line": 127, "work_dir": "/docker/JavaRunProject/metadata-center_p00520557/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @ConditionalOnProperty(prefix = \"apitest.dynamicglobalvariable\", name = \"storage\", havingValue = \"redis\")\n  2: @Service\n  3: public class RedisDynamicGlobalVariableService implements DynamicGlobalVariableService {\n```\n\nThe context below is:\n```java\n  6: \n  7:     @Value(\"${envcommunication.amountLimitPerTask:100}\")\n  8:     private int amountLimitPerTask;\n  9: \n 10:     @Autowired\n 11:     private RedisTemplate<String, String> redisTemplate;\n 12: \n 13:     private String keyPrefix = \"APITestExecuteDaemonService::dynamic-global-variable::\";\n 18: @Override\n 19:     public void put(String taskId, String key, String value) {\n 20:         BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n 21:         if (boundHashOperations.get(key) == null && boundHashOperations.size() >= amountLimitPerTask) {\n 22:             throwLimitExceedException(amountLimitPerTask);\n 23:         }\n 24:         boundHashOperations.put(key, value);\n 25:         boundHashOperations.expire(Duration.ofSeconds(ttlSeconds));\n 26:     }\n 27: \n 28:     @Override\n 29:     public long remove(String taskId, String key) {\n 30:         Long ret = redisTemplate.boundHashOps(prefix(taskId)).delete(key);\n 31:         if (ret == null) {\n 32:             return 0;\n 33:         }\n 34:         return ret;\n 35:     }\n 36: \n 37:     @Override\n 38:     public void removeAll(String taskId) {\n 39:         redisTemplate.delete(prefix(taskId));\n 40:     }\n 41: \n 42:     @Override\n 43:     public Map<String, String> listAll(String taskId) {\n 44:         Map<String, String> valMap = new HashMap<>();\n 45:         // 分页获取所有动态变量, 当数据量较大时, 按照20对K-V为一组分批次获取\n 46:         try (Cursor<Map.Entry<Object, Object>> cursor = redisTemplate.opsForHash()\n 47:                 .scan(prefix(taskId), ScanOptions.scanOptions().count(20).build())) {\n 48:             while (cursor.hasNext()) {\n 49:                 addToValMap(valMap, cursor.next());\n 50:             }\n 51:             return valMap;\n 52:         }\n 53:     }\n 54: \n 55:     /**\n 56:      * 添加元素至Map\n 57:      */\n 58:     public void addToValMap(Map<String, String> valMap, Map.Entry<Object, Object> entry) {\n 59:         String key = entry.getKey() == null ? \"\" : entry.getKey().toString();\n 60:         String value = entry.getValue() == null ? \"\" : entry.getValue().toString();\n 61:         valMap.put(key, value);\n 62:     }\n 63: \n 64:     private String prefix(String taskId) {\n 65:         return keyPrefix + taskId;\n 66:     }\n 67: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -19,8 +19,5 @@\n   19:     public void put(String taskId, String key, String value) {\n   20:         BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n+ 21:         if (boundHashOperations.get(key) == null && boundHashOperations.size() >= amountLimitPerTask) {\n+ 22:             throwLimitExceedException(amountLimitPerTask);\n+ 23:         }\n- 21:         // TODO: add per-task limit check in a follow-up change\n   24:         boundHashOperations.put(key, value);\n   25:         boundHashOperations.expire(Duration.ofSeconds(ttlSeconds));\n   26:     }\n```\n\nThese recent changes show the development progression\nThe new feature is 使用RedisTemplate实现taskid前缀的hash查询.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic String get(String taskId, String key)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "APITestDesign-l00617778#10", "good_example_response": "```java\n    public String get(String taskId, String key) {\n        BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n        return boundHashOperations.get(key);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6   &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloudtest/apitest/executedaemonservice/webcommon/dynamicglobalvariable/controller/DynamicGlobalVariableControllerTest.java#testGetKeyNotExist -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "使用RedisTemplate实现taskid前缀的hash查询", "diff_path": "/docker/JavaRunProject/APITestDesign-l00617778/diff/10.patch", "test_result": "pass", "file_path": "/dynamic-global-variable/src/main/java/com/huawei/cloudtest/apitest/executedaemonservice/webcommon/dynamicglobalvariable/service/RedisDynamicGlobalVariableService.java", "start_line": 39, "end_line": 43, "work_dir": "/docker/JavaRunProject/APITestDesign-l00617778/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3:     private ClassLoaderUtils() {\n  4:     }\n```\n\nThe context below is:\n```java\n  7:     public static URL[] getURLs(ClassLoader classLoader) {\n  8:         if (classLoader instanceof URLClassLoader) {\n  9:             return ((URLClassLoader) classLoader).getURLs();\n 10:         }\n 11:         try {\n 12:             Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 13:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 14:                 ucpField.setAccessible(true);\n 15:                 return null;\n 16:             });\n 17:             Object ucp = ucpField.get(classLoader);\n 18:             Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 19:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 20:                 pathField.setAccessible(true);\n 21:                 return null;\n 22:             });\n 23:             ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 24:             return path.toArray(new URL[0]);\n 25:         } catch (Exception e) {\n 26:             throw new DevsporeCicException(e);\n 27:         }\n 28:     }\n 29: \n 30:     public static void loadClassWithApplicationLoader(String className) {\n 31:         try {\n 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n 34: \n 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n 37:         } catch (ClassNotFoundException e) {\n 38:             log.error(\"load error: {}\", e.getMessage());\n 39:         }\n 40:     }\n 50: public static URL[] getExtensionClassLoaderUrls() {\n 51:         ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n 52:         ClassLoader extensionClassLoader = systemClassLoader.getParent();\n 53: \n 54:         if (extensionClassLoader instanceof URLClassLoader) {\n 55:             URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n 56:             return urlClassLoader.getURLs();\n 57:         }\n 58:         return null;\n 59:     }\n 60: \n 61:     /**\n 62:      * 动态加载类并执行指定方法\n 63:      *\n 64:      * @param loader 类加载器\n 65:      * @param className 完整类名（如 \"com.example.Plugin\"）\n 66:      * @param methodName 方法名（如 \"run\"）\n 67:      * @param parameterTypes 方法参数类型数组（无参数传 null）\n 68:      * @param args 方法参数值数组（无参数传 null）\n 69:      * @return 方法执行结果（无返回值方法返回 null）\n 70:      * @throws Exception 封装所有可能的反射异常\n 71:      */\n 72:     public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 73:         Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 74: \n 75:         // 1. 加载目标类\n 76:         Class<?> clazz = loader.loadClass(className);\n 77: \n 78:         // 2. 实例化对象（使用无参构造函数）\n 79:         Constructor<?> constructor = clazz.getDeclaredConstructor();\n 80:         constructor.setAccessible(true); // 允许调用私有构造方法\n 81:         Object instance = constructor.newInstance();\n 82: \n 83:         // 3. 获取并执行方法\n 84:         Method method = clazz.getMethod(methodName, parameterTypes);\n 85: \n 86:         // 判断是否为静态方法\n 87:         if (Modifier.isStatic(method.getModifiers())) {\n 88:             return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 89:         } else {\n 90:             // 非静态方法\n 91:             return returnType.cast(method.invoke(instance, args));\n 92:         }\n 93:     }\n 94: \n 95:     /**\n 96:      * 重载方法：简化无参方法的调用\n 97:      */\n 98:     public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n 99:         throws Exception {\n100:         Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n101:         return returnType.cast(result);\n102:     }\n103: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -30,11 +30,0 @@\n+ 30:     public static void loadClassWithApplicationLoader(String className) {\n+ 31:         try {\n+ 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n+ 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n+ 34: \n+ 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n+ 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n+ 37:         } catch (ClassNotFoundException e) {\n+ 38:             log.error(\"load error: {}\", e.getMessage());\n+ 39:         }\n+ 40:     }\n```\n\nThese recent changes show the development progression\nThe new feature is 判断给定类是否为Bootstrap ClassLoader.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static boolean isBootstrapClassLoader(String className)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#21", "good_example_response": "```java\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testIsBootstrapClassLoader clean test", "extra_content": {"query": "判断给定类是否为Bootstrap ClassLoader", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/21.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 65, "end_line": 73, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3:     private ClassLoaderUtils() {\n  4:     }\n```\n\nThe context below is:\n```java\n  7:     public static URL[] getURLs(ClassLoader classLoader) {\n  8:         if (classLoader instanceof URLClassLoader) {\n  9:             return ((URLClassLoader) classLoader).getURLs();\n 10:         }\n 11:         try {\n 12:             Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 13:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 14:                 ucpField.setAccessible(true);\n 15:                 return null;\n 16:             });\n 17:             Object ucp = ucpField.get(classLoader);\n 18:             Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 19:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 20:                 pathField.setAccessible(true);\n 21:                 return null;\n 22:             });\n 23:             ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 24:             return path.toArray(new URL[0]);\n 25:         } catch (Exception e) {\n 26:             throw new DevsporeCicException(e);\n 27:         }\n 28:     }\n 29: \n 30:     public static void loadClassWithApplicationLoader(String className) {\n 31:         try {\n 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n 34: \n 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n 37:         } catch (ClassNotFoundException e) {\n 38:             log.error(\"load error: {}\", e.getMessage());\n 39:         }\n 40:     }\n 41: \n 42:     public static boolean isBootstrapClassLoader(String className) {\n 43:         try {\n 44:             Class<?> langClass = Class.forName(className);\n 45:             return langClass.getClassLoader() == null;\n 46:         } catch (ClassNotFoundException e) {\n 47:             log.error(\"load error: {}\", e.getMessage());\n 48:         }\n 49:         return false;\n 50:     }\n 61: /**\n 62:      * 动态加载类并执行指定方法\n 63:      *\n 64:      * @param loader 类加载器\n 65:      * @param className 完整类名（如 \"com.example.Plugin\"）\n 66:      * @param methodName 方法名（如 \"run\"）\n 67:      * @param parameterTypes 方法参数类型数组（无参数传 null）\n 68:      * @param args 方法参数值数组（无参数传 null）\n 69:      * @return 方法执行结果（无返回值方法返回 null）\n 70:      * @throws Exception 封装所有可能的反射异常\n 71:      */\n 72:     public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 73:         Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 74: \n 75:         // 1. 加载目标类\n 76:         Class<?> clazz = loader.loadClass(className);\n 77: \n 78:         // 2. 实例化对象（使用无参构造函数）\n 79:         Constructor<?> constructor = clazz.getDeclaredConstructor();\n 80:         constructor.setAccessible(true); // 允许调用私有构造方法\n 81:         Object instance = constructor.newInstance();\n 82: \n 83:         // 3. 获取并执行方法\n 84:         Method method = clazz.getMethod(methodName, parameterTypes);\n 85: \n 86:         // 判断是否为静态方法\n 87:         if (Modifier.isStatic(method.getModifiers())) {\n 88:             return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 89:         } else {\n 90:             // 非静态方法\n 91:             return returnType.cast(method.invoke(instance, args));\n 92:         }\n 93:     }\n 94: \n 95:     /**\n 96:      * 重载方法：简化无参方法的调用\n 97:      */\n 98:     public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n 99:         throws Exception {\n100:         Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n101:         return returnType.cast(result);\n102:     }\n103: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -30,11 +30,0 @@\n+ 30:     public static void loadClassWithApplicationLoader(String className) {\n+ 31:         try {\n+ 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n+ 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n+ 34: \n+ 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n+ 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n+ 37:         } catch (ClassNotFoundException e) {\n+ 38:             log.error(\"load error: {}\", e.getMessage());\n+ 39:         }\n+ 40:     }\n```\n\nThese recent changes show the development progression\nThe new feature is 获取Extension ClassLoader加载路径.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static URL[] getExtensionClassLoaderUrls()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#22", "good_example_response": "```java\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testGetExtensionClassLoaderUrls clean test", "extra_content": {"query": "获取Extension ClassLoader加载路径", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/22.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 75, "end_line": 84, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3:     private ClassLoaderUtils() {\n  4:     }\n```\n\nThe context below is:\n```java\n  7:     public static URL[] getURLs(ClassLoader classLoader) {\n  8:         if (classLoader instanceof URLClassLoader) {\n  9:             return ((URLClassLoader) classLoader).getURLs();\n 10:         }\n 11:         try {\n 12:             Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 13:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 14:                 ucpField.setAccessible(true);\n 15:                 return null;\n 16:             });\n 17:             Object ucp = ucpField.get(classLoader);\n 18:             Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 19:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 20:                 pathField.setAccessible(true);\n 21:                 return null;\n 22:             });\n 23:             ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 24:             return path.toArray(new URL[0]);\n 25:         } catch (Exception e) {\n 26:             throw new DevsporeCicException(e);\n 27:         }\n 28:     }\n 40: public static boolean isBootstrapClassLoader(String className) {\n 41:         try {\n 42:             Class<?> langClass = Class.forName(className);\n 43:             return langClass.getClassLoader() == null;\n 44:         } catch (ClassNotFoundException e) {\n 45:             log.error(\"load error: {}\", e.getMessage());\n 46:         }\n 47:         return false;\n 48:     }\n 49: \n 50:     public static URL[] getExtensionClassLoaderUrls() {\n 51:         ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n 52:         ClassLoader extensionClassLoader = systemClassLoader.getParent();\n 53: \n 54:         if (extensionClassLoader instanceof URLClassLoader) {\n 55:             URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n 56:             return urlClassLoader.getURLs();\n 57:         }\n 58:         return null;\n 59:     }\n 60: \n 61:     /**\n 62:      * 动态加载类并执行指定方法\n 63:      *\n 64:      * @param loader 类加载器\n 65:      * @param className 完整类名（如 \"com.example.Plugin\"）\n 66:      * @param methodName 方法名（如 \"run\"）\n 67:      * @param parameterTypes 方法参数类型数组（无参数传 null）\n 68:      * @param args 方法参数值数组（无参数传 null）\n 69:      * @return 方法执行结果（无返回值方法返回 null）\n 70:      * @throws Exception 封装所有可能的反射异常\n 71:      */\n 72:     public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 73:         Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 74: \n 75:         // 1. 加载目标类\n 76:         Class<?> clazz = loader.loadClass(className);\n 77: \n 78:         // 2. 实例化对象（使用无参构造函数）\n 79:         Constructor<?> constructor = clazz.getDeclaredConstructor();\n 80:         constructor.setAccessible(true); // 允许调用私有构造方法\n 81:         Object instance = constructor.newInstance();\n 82: \n 83:         // 3. 获取并执行方法\n 84:         Method method = clazz.getMethod(methodName, parameterTypes);\n 85: \n 86:         // 判断是否为静态方法\n 87:         if (Modifier.isStatic(method.getModifiers())) {\n 88:             return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 89:         } else {\n 90:             // 非静态方法\n 91:             return returnType.cast(method.invoke(instance, args));\n 92:         }\n 93:     }\n 94: \n 95:     /**\n 96:      * 重载方法：简化无参方法的调用\n 97:      */\n 98:     public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n 99:         throws Exception {\n100:         Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n101:         return returnType.cast(result);\n102:     }\n103: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -1,1 +1,0 @@\n+  1: @Slf4j\n```\n\nThese recent changes show the development progression\nThe new feature is 使用系统的Application ClassLoader来加载一个指定的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static void loadClassWithApplicationLoader(String className)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#4", "good_example_response": "```java\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testLoadClassWithApplicationLoader clean test", "extra_content": {"query": "使用系统的Application ClassLoader来加载一个指定的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/4.patch", "test_result": "fail", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 53, "end_line": 63, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RedisRecoveryTimer {\n    public static void markRedisRecovery(); /* 提供外部使用接口，标记redis已恢复，监控组件尝试重启工厂以达到恢复连接的效果 */\n    public static void addInstance(WrappedRedisConnectionFactory factory, RedisMessageListenerContainer container); /* 添加待监控的连接工厂和redis消息监听容器,将其维护到监控集合 */\n}\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class RedisConnectFactoryBuilder {\n  3:     /**\n  4:      * redis模式——standalone\n  5:      */\n  6:     public static final String REDIS_MODE_STANDALONE = \"standalone\";\n```\n\nThe context below is:\n```java\n  9:      * redis模式——cluster\n 10:      */\n 11:     public static final String REDIS_MODE_CLUSTER = \"cluster\";\n 12: \n 13:     /**\n 14:      * redis模式——sentinel\n 15:      */\n 16:     public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n 17: \n 18:     /**\n 19:      * redis客户端类型——jedis\n 20:      */\n 21:     public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n 22: \n 23:     /**\n 24:      * redis客户端类型——lettuce\n 25:      */\n 26:     public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n 27: \n 28:     private RedisConnectFactoryBuilder() {\n 29:     }\n 30: \n 31:     /**\n 32:      * 根据config构建响应的redis连接工厂\n 33:      *\n 34:      * @param redisConfig redis配置项\n 35:      * @return redis连接工厂\n 36:      */\n 45: \n 46:     private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n 47:         JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n 48:             .connectTimeout(redisConfig.getConnectTimeout())\n 49:             .readTimeout(redisConfig.getReadTimeout())\n 50:             .usePooling()\n 51:             .poolConfig(redisConfig.getPool())\n 52:             .build();\n 53:         switch (redisConfig.getRedisMode()) {\n 54:             case REDIS_MODE_STANDALONE -> {\n 55:                 RedisStandaloneConfiguration standaloneConfiguration =\n 56:                     createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n 57:                 return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n 58:             }\n 59:             case REDIS_MODE_CLUSTER -> {\n 60:                 RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n 61:                 return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n 62:             }\n 63:             case REDIS_MODE_SENTINEL -> {\n 64:                 RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n 65:                 return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n 66:             }\n 67:             default ->\n 68:                 throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n 69:         }\n 70:     }\n 71: public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n 72:         return switch (redisConfig.getClientType()) {\n 73:             case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n 74:             case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n 75:             default ->\n 76:                 throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n 77:         };\n 78:     }\n 79: private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n 80:         String host) {\n 81:         RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n 82:         configuration.setPassword(redisConfig.getPassword());\n 83:         String[] items = host.trim().split(\":\");\n 84:         configuration.setHostName(items[0].trim());\n 85:         configuration.setPort(Integer.parseInt(items[1].trim()));\n 86:         configuration.setDatabase(redisConfig.getDatabase());\n 87:         return configuration;\n 88:     }\n 89: \n 90:     private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n 91:         RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n 92:         List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n 93:             String[] items = host.split(\":\");\n 94:             return new RedisNode(items[0], Integer.parseInt(items[1]));\n 95:         }).collect(Collectors.toList());\n 96:         configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n 97:         configuration.setClusterNodes(redisNodes);\n 98:         configuration.setPassword(redisConfig.getPassword());\n 99:         return configuration;\n100:     }\n101: \n102:     private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n103:         Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n104:         RedisSentinelConfiguration configuration =\n105:             new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n106:         configuration.setPassword(redisConfig.getPassword());\n107:         return configuration;\n108:     }\n109: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -63,4 +63,0 @@\n+ 63:             case REDIS_MODE_SENTINEL -> {\n+ 64:                 RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n+ 65:                 return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n+ 66:             }\n```\n\nThese recent changes show the development progression\nThe new feature is 根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprivate static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "DevUC-common_x00636091#6", "good_example_response": "```java\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn clean test -pl jin-cache", "extra_content": {"query": "根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory", "diff_path": "/docker/JavaRunProject/DevUC-common_x00636091/diff/6.patch", "test_result": "pass", "file_path": "/jin-cache/src/main/java/com/huawei/coral/cache/redis/connection/RedisConnectFactoryBuilder.java", "start_line": 75, "end_line": 82, "work_dir": "/docker/JavaRunProject/DevUC-common_x00636091/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class StringUtils {\n    public static final String LF;\n    public static final String EMPTY;\n    public static final String COMMA;\n    public static final String DOT;\n    public static String capitalize(String str); /* Capitalize a {@code String}, changing the first letter to upper case as per {@link Character#toUpperCase(char)}. No other letters are changed. */\n    public static String getFilename(String path); /* Extract the filename from the given Java resource path, e.g. {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}. */\n    public static String applyRelativePath(String path, String relativePath); /* Apply the given relative path to the given Java resource path, assuming standard Java folder separation (i.e. \"/\" separators). */\n    public static String replace(String inString, String oldPattern, String newPattern); /* Replace all occurrences of a substring within a string with another string. */\n    public static String deleteAny(String inString, String charsToDelete); /* Delete any character in a given {@code String}. */\n    public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete); /* Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. delimiter characters) delete all new lines and line feeds in a {@code String} */\n    public static String[] delimitedListToStringArray(String str, String delimiter); /* Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. delimiter characters) */\n    public static boolean hasLength(String str); /* Check that the given {@code String} is neither {@code null} nor of length 0. <p>Note: this method returns {@code true} for a {@code String} that purely consists of whitespace. */\n    public static String collectionToDelimitedString(Collection<?> coll, String delim, String prefix, String suffix); /* Convert a {@link Collection} to a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations. */\n    public static String collectionToDelimitedString(Collection<?> coll, String delim); /* Convert a {@code Collection} into a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations. */\n    public static String cleanPath(String path); /* Normalize the path by suppressing sequences like \"path/..\" and inner simple dots. <p>The result is convenient for path comparison. For other uses, notice that Windows separators (\"\\\") are replaced by simple slashes. <p><strong>NOTE</strong> that {@code cleanPath} should not be depended upon in a security context. Other mechanisms should be used to prevent path-traversal issues. */\n    public static boolean hasText(String str); /* Check whether the given {@code String} contains actual <em>text</em>. <p>More specifically, this method returns {@code true} if the {@code String} is not {@code null}, its length is greater than 0, and it contains at least one non-whitespace character. contain whitespace only */\n    public static String[] toStringArray(Collection<String> collection); /* Copy the given {@link Collection} into a {@code String} array. <p>The {@code Collection} must contain {@code String} elements only. */\n    public static String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens,\n            boolean ignoreEmptyTokens); /* Tokenize the given {@code String} into a {@code String} array via a {@link StringTokenizer}. <p>The given {@code delimiters} string can consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; individually considered as a delimiter) trimming; StringTokenizer will not consider subsequent delimiters as token in the first place). */\n    public static boolean equalsIgnoreCase(String str1, String str2); /* <p>Compares two CharSequences, returning {@code true} if they represent equal sequences of characters, ignoring case.</p> */\n    public static String deleteWhitespace(String str); /* <p>Deletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.</p> */\n    public static boolean startsWithIgnoreCase(final CharSequence str, final CharSequence prefix); /* <p>Case insensitive check if a CharSequence starts with a specified prefix.</p> <p>{@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The comparison is case insensitive.</p> */\n    public static boolean startsWith(final CharSequence str, final CharSequence prefix); /* <p>Check if a CharSequence starts with a specified prefix.</p> <p>{@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The comparison is case sensitive.</p> */\n    public static boolean isAnyBlank(final CharSequence... css); /* <p>Checks if any one of the CharSequences are blank (\"\") or null and not whitespace only..</p> */\n    public static boolean isNoneBlank(final CharSequence... css); /* <p>Checks if none of the CharSequences are blank (\"\") or null and whitespace only..</p> */\n    public static boolean contains(final CharSequence str, final CharSequence searchStr); /* Checks if CharSequence contains a search CharSequence. */\n    public static boolean containsIgnoreCase(final CharSequence str, final CharSequence searchStr); /* Checks if CharSequence contains a search CharSequence irrespective of case, handling {@code null}. Case-insensitivity is defined as by {@link String#equalsIgnoreCase(String)}. <p>A {@code null} CharSequence will return {@code false}.</p> null} string input */\n    public static String escapeJavaScript(String str);\n    public static String join(Collection collection, String separator); /* <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> */\n    public static String substringBetween(String str, String open, String close); /* Substring between two index. */\n    public static String trim(final String str); /* <p>Removes control characters (char &lt;= 32) from both ends of this String, handling {@code null} by returning {@code null}.</p> */\n    public static boolean equals(String str1, String str2); /* <p>Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.</p> */\n    public static String defaultIfEmpty(String str, String defaultStr); /* <p>Returns either the passed in CharSequence, or if the CharSequence is empty or {@code null}, the value of {@code defaultStr}.</p> */\n    public static boolean isEmpty(String str); /* <p>Checks if a str is empty (\"\") or null.</p> */\n    public static boolean isNotEmpty(String str); /* <p>Checks if a str is not empty (\"\") or not null.</p> */\n    public static boolean isNotBlank(String str); /* <p>Checks if a string is not empty (\"\"), not null and not whitespace only.</p> */\n    public static boolean isBlank(final CharSequence cs); /* <p>Checks if a string is  empty (\"\"), null and  whitespace only.</p> */\n    public static String newStringForUtf8(byte[] bytes); /* <p>Create a string with encoding format as utf8.</p> */\n}\n\npublic class NacosUser {\n    public void setGlobalAdmin(boolean globalAdmin);\n    public boolean isGlobalAdmin();\n    public void setToken(String token);\n    public String getToken();\n}\n\npublic final class JacksonUtils {\n    public static JavaType constructJavaType(Type type); /* construct java type -> Jackson Java Type. */\n    public static JsonNode transferToJsonNode(Object obj); /* Parse object to Jackson {@link JsonNode}. */\n    public static ArrayNode createEmptyArrayNode(); /* Create a new empty Jackson {@link ArrayNode}. */\n    public static ObjectNode createEmptyJsonNode(); /* Create a new empty Jackson {@link ObjectNode}. */\n    public static void registerSubtype(Class<?> clz, String type); /* Register sub type for child class. */\n    public static JsonNode toObj(String json); /* Json string deserialize to Jackson {@link JsonNode}. */\n    public static <T> T toObj(InputStream inputStream, Type type); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, TypeReference<T> typeReference); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, Type type); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, Class<T> cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, TypeReference<T> typeReference); /* Json string deserialize to Object. */\n    public static <T> T toObj(InputStream inputStream, Class<T> cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, Type cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, Class<T> cls); /* Json string deserialize to Object. */\n    public static byte[] toJsonBytes(Object obj); /* Object to json string byte array. */\n    public static String toJson(Object obj); /* Object to json string. */\n}\n```\n\nThe context above is:\n```java\n  1: public final class NacosSignatureAlgorithm {\n```\n\nThe context below is:\n```java\n  4: \n  5:     private static final int HEADER_POSITION = 0;\n  6: \n  7:     private static final int PAYLOAD_POSITION = 1;\n  8: \n  9:     private static final int SIGNATURE_POSITION = 2;\n 10: \n 11:     private static final int JWT_PARTS = 3;\n 12: \n 13:     private static final String HS256_JWT_HEADER = \"eyJhbGciOiJIUzI1NiJ9\";\n 14: \n 15:     private static final String HS384_JWT_HEADER = \"eyJhbGciOiJIUzM4NCJ9\";\n 16: \n 17:     private static final String HS512_JWT_HEADER_OLD = \"eyJhbGciOiJIUzUxMiJ9\";\n 18: \n 19:     private static final String HS512_JWT_HEADER = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9\";\n 20: \n 21:     private static final Base64.Encoder URL_BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n 22: \n 23:     private static final Base64.Decoder URL_BASE64_DECODER = Base64.getUrlDecoder();\n 24: \n 25:     private static final Map<String, NacosSignatureAlgorithm> MAP = new HashMap<>(4);\n 26: \n 27:     public static final NacosSignatureAlgorithm HS256 = new NacosSignatureAlgorithm(\"HS256\", \"HmacSHA256\",\n 28:             HS256_JWT_HEADER);\n 29: \n 30:     public static final NacosSignatureAlgorithm HS384 = new NacosSignatureAlgorithm(\"HS384\", \"HmacSHA384\",\n 31:             HS384_JWT_HEADER);\n 32: \n 33:     public static final NacosSignatureAlgorithm HS512 = new NacosSignatureAlgorithm(\"HS512\", \"HmacSHA512\",\n 34:             HS512_JWT_HEADER);\n 35: \n 36:     public static final NacosSignatureAlgorithm HS512_OLD = new NacosSignatureAlgorithm(\"HS512\", \"HmacSHA512\",\n 37:         HS512_JWT_HEADER_OLD);\n 38: \n 39:     private final String algorithm;\n 40: \n 41:     private final String jcaName;\n 42: \n 43:     private final String header;\n 44: \n 45:     static {\n 46:         MAP.put(HS256_JWT_HEADER, HS256);\n 47:         MAP.put(HS384_JWT_HEADER, HS384);\n 48:         MAP.put(HS512_JWT_HEADER, HS512);\n 49:         MAP.put(HS512_JWT_HEADER_OLD, HS512_OLD);\n 50:     }\n 51: \n 52:     /**\n 53:      * verify jwt.\n 54:      *\n 55:      * @param jwt complete jwt string\n 56:      * @param key for signature\n 57:      * @return object for payload\n 58:      * @throws AccessException access exception\n 59:      */\n 60:     public static NacosUser verify(String jwt, Key key) throws AccessException {\n 61:         if (StringUtils.isBlank(jwt)) {\n 62:             throw new AccessException(\"user not found!\");\n 63:         }\n 64:         String[] split = jwt.split(\"\\\\.\");\n 65:         if (split.length != JWT_PARTS) {\n 66:             throw new AccessException(\"token invalid!\");\n 67:         }\n 68:         String header = split[HEADER_POSITION];\n 69:         String payload = split[PAYLOAD_POSITION];\n 70:         String signature = split[SIGNATURE_POSITION];\n 71: \n 72:         NacosSignatureAlgorithm signatureAlgorithm = MAP.get(header);\n 73:         if (signatureAlgorithm == null) {\n 74:             throw new AccessException(\"unsupported signature algorithm\");\n 75:         }\n 76:         NacosUser user = signatureAlgorithm.verify(header, payload, signature, key);\n 77:         // add by cse, validate user info\n 78:         if (user.getUserName().equals(\"cse\") && AuthConstants.GLOBAL_ADMIN_ROLE.equals(user.getAuth())) {\n 79:             user.setGlobalAdmin(true);\n 80:         }\n 81:         user.setToken(jwt);\n 82:         return user;\n 83:     }\n 84: \n 85:     /**\n 86:      * verify jwt.\n 87:      *\n 88:      * @param header    header of jwt\n 89:      * @param payload   payload of jwt\n 90:      * @param signature signature of jwt\n 91:      * @param key       for signature\n 92:      * @return object for payload\n 93:      * @throws AccessException access exception\n 94:      */\n 95:     public NacosUser verify(String header, String payload, String signature, Key key) throws AccessException {\n 96:         Mac macInstance = getMacInstance(key);\n 97:         byte[] bytes = macInstance.doFinal((header + JWT_SEPERATOR + payload).getBytes(StandardCharsets.US_ASCII));\n 98:         if (!URL_BASE64_ENCODER.encodeToString(bytes).equals(signature)) {\n 99:             throw new AccessException(\"Invalid signature\");\n100:         }\n101:         NacosJwtPayload nacosJwtPayload = JacksonUtils.toObj(URL_BASE64_DECODER.decode(payload), NacosJwtPayload.class);\n102:         if (nacosJwtPayload.getExp() >= TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis())) {\n103:             // add by cse, valid token info\n104:             NacosUser nacosUser = new NacosUser();\n105:             nacosUser.setAuth(nacosJwtPayload.getAuth());\n106:             nacosUser.setPerm(nacosJwtPayload.getPerm());\n107:             nacosUser.setUserName(nacosJwtPayload.getSub());\n108:             return nacosUser;\n109:         }\n110: \n111:         throw new AccessException(\"token expired!\");\n112:     }\n113: \n114:     /**\n115:      * get jwt expire time in seconds.\n116:      *\n117:      * @param jwt complete jwt string\n118:      * @param key for signature\n119:      * @return expire time in seconds\n120:      * @throws AccessException access exception\n121:      */\n122:     public static long getExpiredTimeInSeconds(String jwt, Key key) throws AccessException {\n123:         if (StringUtils.isBlank(jwt)) {\n124:             throw new AccessException(\"user not found!\");\n125:         }\n126:         String[] split = jwt.split(\"\\\\.\");\n127:         if (split.length != JWT_PARTS) {\n128:             throw new AccessException(\"token invalid!\");\n129:         }\n130:         String header = split[HEADER_POSITION];\n131:         String payload = split[PAYLOAD_POSITION];\n132:         String signature = split[SIGNATURE_POSITION];\n133: \n134:         NacosSignatureAlgorithm signatureAlgorithm = MAP.get(header);\n135:         if (signatureAlgorithm == null) {\n136:             throw new AccessException(\"unsupported signature algorithm\");\n137:         }\n138:         return signatureAlgorithm.getExpireTimeInSeconds(header, payload, signature, key);\n139:     }\n140: \n141:     /**\n142:      * get jwt expire time in seconds.\n143:      *\n144:      * @param header    header of jwt\n145:      * @param payload   payload of jwt\n146:      * @param signature signature of jwt\n147:      * @param key       for signature\n148:      * @return expire time in seconds\n149:      * @throws AccessException access exception\n150:      */\n151:     public long getExpireTimeInSeconds(String header, String payload, String signature, Key key)\n152:             throws AccessException {\n153:         Mac macInstance = getMacInstance(key);\n154:         byte[] bytes = macInstance.doFinal((header + JWT_SEPERATOR + payload).getBytes(StandardCharsets.US_ASCII));\n155:         if (!URL_BASE64_ENCODER.encodeToString(bytes).equals(signature)) {\n156:             throw new AccessException(\"Invalid signature\");\n157:         }\n158:         NacosJwtPayload nacosJwtPayload = JacksonUtils.toObj(URL_BASE64_DECODER.decode(payload), NacosJwtPayload.class);\n159:         return nacosJwtPayload.getExp();\n160:     }\n161: \n162:     private NacosSignatureAlgorithm(String alg, String jcaName, String header) {\n163:         this.algorithm = alg;\n164:         this.jcaName = jcaName;\n165:         this.header = header;\n166:     }\n175: private Mac getMacInstance(Key key) {\n176:         try {\n177:             Mac instance = Mac.getInstance(jcaName);\n178:             instance.init(key);\n179:             return instance;\n180:         } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n181:             throw new IllegalArgumentException(\"Invalid key: \" + key);\n182:         }\n183:     }\n184: \n185:     public String getAlgorithm() {\n186:         return algorithm;\n187:     }\n188: \n189:     public String getJcaName() {\n190:         return jcaName;\n191:     }\n192: \n193:     public String getHeader() {\n194:         return header;\n195:     }\n196: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -175,5 +175,5 @@\n 175:     private Mac getMacInstance(Key key) {\n 176:         try {\n+177:             Mac instance = Mac.getInstance(jcaName);\n-177:             Mac instance = Mac.getInstance(algorithm);\n 178:             instance.init(key);\n 179:             return instance;\n```\n\nThese recent changes show the development progression\nThe new feature is 根据JWT token的结构，生成JWT token.\n\nAnd here is the code snippet you are asked to modify:\n```java\nString sign(NacosJwtPayload nacosJwtPayload, Key key)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "nacos_f00563108#25", "good_example_response": "```java\n    String sign(NacosJwtPayload nacosJwtPayload, Key key) {\n        String jwtWithoutSign = header + JWT_SEPERATOR + URL_BASE64_ENCODER.encodeToString(\n                nacosJwtPayload.toString().getBytes(StandardCharsets.UTF_8));\n        Mac macInstance = getMacInstance(key);\n        byte[] bytes = jwtWithoutSign.getBytes(StandardCharsets.US_ASCII);\n        String signature = URL_BASE64_ENCODER.encodeToString(macInstance.doFinal(bytes));\n        return jwtWithoutSign + JWT_SEPERATOR + signature;\n    }\n    ```", "reward_command": "cd /docker/JavaRunProject/nacos_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml -Dtest=com.alibaba.nacos.plugin.auth.impl.token.impl.JwtTokenManagerTest.java", "extra_content": {"query": "根据JWT token的结构，生成JWT token", "diff_path": "/docker/JavaRunProject/nacos_f00563108/diff/25.patch", "test_result": "fail", "file_path": "/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/jwt/NacosSignatureAlgorithm.java", "start_line": 209, "end_line": 217, "work_dir": "/docker/JavaRunProject/nacos_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ShardingContext {\n    public static void clean();\n    public static List<Handler> getHandlerList();\n    public static void addHandler(Handler handler);\n    public static Object getParams(String key);\n    public static void setParams(String key, Object value);\n}\n```\n\nThe context above is:\n```java\n  1: @Intercepts({\n  2:     @Signature(\n  3:             type = StatementHandler.class,\n  4:             method = \"prepare\",\n  5:             args = {Connection.class, Integer.class})\n  6: })\n  7: /**\n  8:  * 表分片处理拦截器\n  9:  *\n 10:  */\n 11: public class TableShardInterceptor implements Interceptor {\n 12:     private static final ReflectorFactory DEFAULT_REFLECTOR_FACTORY = new DefaultReflectorFactory();\n 35: @Override\n 36:     public Object plugin(final Object target) {\n 37:         if (target instanceof StatementHandler) {\n 38:             return Plugin.wrap(target, this);\n 39:         } else {\n 40:             return target;\n 41:         }\n 42:     }\n```\n\nThe context below is:\n```java\n 45:     public void setProperties(final Properties properties) {}\n 46: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -35,8 +35,0 @@\n+ 35: @Override\n+ 36:     public Object plugin(final Object target) {\n+ 37:         if (target instanceof StatementHandler) {\n+ 38:             return Plugin.wrap(target, this);\n+ 39:         } else {\n+ 40:             return target;\n+ 41:         }\n+ 42:     }\n```\n\nThese recent changes show the development progression\nThe new feature is 自定义一个mybatis的拦截器，拦截sql后增加自定义行为并执行.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic Object intercept(final Invocation invocation) throws Throwable\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#27", "good_example_response": "```java\n    public Object intercept(final Invocation invocation) throws Throwable {\n        List<Handler> handlerList = ShardingContext.getHandlerList();\n        if (handlerList == null) {\n            return invocation.proceed();\n        }\n\n        final StatementHandler statementHandler = (StatementHandler) invocation.getTarget();\n        final MetaObject metaObject =\n            MetaObject.forObject(\n                statementHandler,\n                SystemMetaObject.DEFAULT_OBJECT_FACTORY,\n                SystemMetaObject.DEFAULT_OBJECT_WRAPPER_FACTORY,\n                DEFAULT_REFLECTOR_FACTORY);\n        String SQL = (String) metaObject.getValue(\"delegate.boundSql.sql\");\n\n        for (Handler handler : handlerList) {\n            SQL = handler.replace(SQL);\n        }\n        metaObject.setValue(\"delegate.boundSql.sql\", SQL);\n\n        return invocation.proceed();\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.interceptor.TableShardInterceptorTest.java", "extra_content": {"query": "自定义一个mybatis的拦截器，拦截sql后增加自定义行为并执行", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/27.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/interceptor/TableShardInterceptor.java", "start_line": 34, "end_line": 56, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: @MappedJdbcTypes(JdbcType.LONGVARCHAR)\n  2: @MappedTypes(Cddl.class)\n  3: public class CddlTypeHandler extends JsonValueTypeHandler<Cddl> {\n  8: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change: None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 自定义mybatis json typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprotected Type type()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#31", "good_example_response": "```java\n    protected Type type() {\n        return (new TypeToken<Cddl>() {\n        }).getType();\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.CddlTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis json typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/31.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/CddlTypeHandler.java", "start_line": 25, "end_line": 28, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: public class ListElemtIsStringTypeHandler extends ListTypeHandler<List<String>> {\n  6: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n: None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 自定义mybatis List typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprotected Type type()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#32", "good_example_response": "```java\n    protected Type type() {\n        return (new TypeToken<List<String>>() {\n        }).getType();\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.ListElemtIsStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis List typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/32.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/ListElemtIsStringTypeHandler.java", "start_line": 18, "end_line": 21, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RiskComplianceManager {\n    public static final int SENSITIVE_WORD_MAX_LEN; /* 敏感词的数据库表内容字段最大长度 */\n    public static final String RESPONSE_PHASE; /* 表示是输出时被风控拦截的字符串 */\n    public static final String REQUEST_PHASE; /* 表示是输入时被风控拦截的字符串 */\n    public static final int TEXT_CHECK_TASK_UUID_LEN;\n    public int getRiskCheckWordLength(); /* 获取风控检查的敏感词长度 */\n    public boolean isSensitiveCheckPromptEnable(); /* 获取prompt攻击检测开关状态 */\n    public static String truncateRiskInfo(String riskInfo); /* 对记录入库的数据进行截断，避免字符串超过数据库字段risk_info长度限制 */\n    public MatchedResult riskTextAttackDetect(String userId, String taskId, String text, boolean isConfidential,\n        String traceId); /* 执行aics prompt注入攻击检查 */\n    public MatchedResult riskComplianceCheck(String userId, String taskId, String text, boolean isConfidential, String domainId); /* 风险控制检查方法实现 */\n    public boolean languageCheck(String taskId, String text, boolean isConfidential, String backendServiceName,\n        String traceId); /* 小语种检查 */\n}\n\npublic class EngineProperties {\n    public boolean isHcsSiteEnv(); /* 判断是否为hcs站点 */\n    public boolean isHcEnv(); /* 判断是否为hc站点 */\n}\n\npublic class SseServer {\n    public void closeWithError(String connectionId, Throwable throwable); /* 错误情况下关闭上游连接 */\n    public void close(String connectionId); /* 正常情况下关闭连接，主要是关闭到上游的连接 */\n    public void send(String connectionId, String content, String traceId); /* 向客户端发送消息, 这个方法用于向上游（插件、web端等)发送数据 */\n    public SseEmitter connect(String connectionId, String traceId); /* 客户端连接sse服务器, 这里是建立engine和插件的长连接 */\n    public static int getCurrentConcurrency(); /* 获取当前系统容量 */\n}\n```\n\nThe context above is:\n```java\n  1: @Async\n  2: @Service\n  3: public class AsyncService {\n  4:     private static final Logger LOGGER = Logger.getLogger(AsyncService.class);\n```\n\nThe context below is:\n```java\n  7:     private RiskComplianceManager riskComplianceManager;\n  8: \n  9:     @Resource\n 10:     private UserRiskManageService riskManageService;\n 11: \n 12:     @Resource\n 13:     private EngineProperties engineProperties;\n 14: \n 15:     @Resource\n 16:     private SseServer sseServer;\n 17: \n 18:     /**\n 19:      * 异步执行aics prompt注入攻击检查\n 20:      *\n 21:      * @param sessionId 会话id\n 22:      * @param checkData 检查内容\n 23:      * @param isConfidential 是否为敏感数据\n 24:      * @param userRiskRecord 访问记录对象\n 25:      * @param phase 执行检查的阶段\n 26:      */\n 27:     public void attackCheck(String sessionId, String checkData, boolean isConfidential, UserRiskRecord userRiskRecord,\n 28:         String phase) {\n 29:         // request阶段，判断是否为对话场景，不是对话场景无需执行检查\n 30:         if (StringUtils.equals(REQUEST_PHASE, phase) && !AgentType.ChatAgent.name()\n 31:             .equals(userRiskRecord.getAgentType())) {\n 32:             return;\n 33:         }\n 34:         String traceId = userRiskRecord.getTraceId();\n 35:         String userId = userRiskRecord.getUserId();\n 36: \n 37:         LOGGER.info(\"begin text attack detect, phase:{}, traceId:{}, sessionId:{}\", phase, traceId, sessionId);\n 38:         MatchedResult result = riskComplianceManager.riskTextAttackDetect(userId, sessionId, checkData, isConfidential,\n 39:             traceId);\n 40:         if (!result.isMatched()) {\n 41:             LOGGER.info(\"end text attack detect, phase:{}, traceId:{}, sessionId:{}\", phase, traceId, sessionId);\n 42:             return;\n 43:         }\n 44:         LOGGER.warn(\"text attack detect failed, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n 45:             userId, traceId);\n 46:         checkResultAndRecordAsync(result);\n 47:         interceptAttack(sessionId, phase, userRiskRecord);\n 48:     }\n 58: private void interceptAttack(String sessionId, String phase, UserRiskRecord userRiskRecord) {\n 59:         if (!engineProperties.isSensitiveCheckAicsInterceptEnable()) {\n 60:             LOGGER.info(\"aics intercept is not enable, skip forbidden user and close connection\");\n 61:             return;\n 62:         }\n 63:         riskManageService.autoForbiddenUserAsync(userRiskRecord);\n 64:         LOGGER.warn(\"start to close connection, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n 65:             userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n 66:         // 关闭上下游连接\n 67:         sseServer.closeWithError(sessionId, new NotSafePromptException(ErrorCode.NOT_SAFE_PROMPT_ERROR));\n 68:         LOGGER.warn(\"end to close connection, phase:{}, connectionId: {}, userId:{}, traceId:{}\", phase, sessionId,\n 69:             userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n 70:     }\n 71: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -43,6 +43,12 @@\n   43:         }\n   44:         LOGGER.warn(\"text attack detect failed, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n   45:             userId, traceId);\n+  46:         checkResultAndRecordAsync(result);\n-  46:         {\n-  47:             UserRiskRecord tmp = new UserRiskRecord();\n-  48:             tmp.setRiskInfo(result.getMatchWord());\n-  49:             tmp.setRiskType(result.getMatchType());\n-  50:             tmp.setRiskScore(result.getRiskScore());\n-  51:             riskManageService.addUserRiskRecord(tmp);\n-  52:         }\n   47:         interceptAttack(sessionId, phase, userRiskRecord);\n   48:     }\n```\n\nThese recent changes show the development progression\nThe new feature is 异步记录风控拦截记录.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprivate void checkResultAndRecordAsync(MatchedResult result)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "SnapEngineService_h00636345#28", "good_example_response": "```java\n    private void checkResultAndRecordAsync(MatchedResult result) {\n        CompletableFuture.completedFuture(result).thenAcceptAsync(matchedResult -> {\n            UserRiskRecord userRiskRecord = new UserRiskRecord();\n            userRiskRecord.setRiskInfo(result.getMatchWord());\n            userRiskRecord.setRiskType(result.getMatchType());\n            userRiskRecord.setRiskScore(result.getRiskScore());\n            riskManageService.addUserRiskRecord(userRiskRecord);\n        });\n    }\n```", "reward_command": "cd /docker/JavaRunProject/SnapEngineService_h00636345;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml -Dtest=com.huawei.codearts.engine.service.AsyncServiceTest#test_attackCheck_should_close_connection_when_risk_compliance_not_pass_and_intercept_unable", "extra_content": {"query": "异步记录风控拦截记录", "diff_path": "/docker/JavaRunProject/SnapEngineService_h00636345/diff/28.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codearts/engine/service/AsyncService.java", "start_line": 81, "end_line": 90, "work_dir": "/docker/JavaRunProject/SnapEngineService_h00636345/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class OperateAuditManager {\n    public Page<OperateRecord> findAll(Long resourceId, ResourceType resourceType, Integer pageNum, Integer pageSize) throws WrongParameterException;\n    public void save(List<OperateRecord> updateEvents);\n    public <T> List<OperateRecord> getOperateRecords(T oldVo, T newVo, String operator,\n                                                     ResourceType resourceType, Long objectId);\n}\n\npublic class VmPoolDaoV2 {\n    public List<VmPoolDO> findAllByPoolIds(List<Long> poolIds);\n    public Integer batchUpdatePoolInfo(List<Long> poolIds, String dcsName);\n    public Integer countVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                List<String> zone);\n    public List<VmPoolDO> findVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                      List<String> zone, Integer pageNum, Integer pageSize);\n    public int countByPoolId(Long poolId);\n    public List<VmPoolDO> getDistinctDcsNamesAndDatabases(Zone zone);\n    public int batchInsertPoolInfo(List<VmPoolDO> vmPoolList);\n}\n\npublic class PageUtil {\n    public static <T> Page<T> buildPage(Pageable pageable, long count, Supplier<List<T>> contentSupplier);\n    public static Pair<Integer, Integer> checkPage(Integer pageNum, Integer pageSize) throws WrongParameterException;\n}\n```\n\nThe context above is:\n```java\n  1: @Service\n  2: @RequiredArgsConstructor\n  3: public class AgentPoolServiceImpl implements AgentPoolService {\n```\n\nThe context below is:\n```java\n  6: \n  7:     private final VmPoolDao vmPoolDao;\n  8: \n  9:     private final VmPoolDaoV2 vmPoolDaoV2;\n 10: \n 11:     private final IDcsInfoDao dcsInfoDao;\n 12: \n 13:     private final OperateAuditManager operateAuditManager;\n 14: \n 15:     @Override\n 16:     @Transactional\n 17:     public VmPoolDO updatePoolInfo(VmPoolDO vmPoolDO) throws Exception {\n 18:         if (!checkVmPool(vmPoolDO)) {\n 19:             String message = String.format(Locale.ROOT, \"input body error, vmPoolDO = {}\", vmPoolDO);\n 20:             throw new WrongParameterException(message);\n 21:         }\n 22:         VmPoolDO oldVmPoolDO = getVmPoolDO(vmPoolDao.findOneByPoolId(vmPoolDO.getPoolId()).get());\n 23:         VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n 24:         LOGGER.info(\"updatePoolInfo: poolDO = {}\", poolDO);\n 25:         operateAuditManager.save(operateAuditManager.getOperateRecords(oldVmPoolDO, poolDO\n 26:                 , DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, poolDO.getPoolId()));\n 27:         return poolDO;\n 28:     }\n 29: \n 30:     @Override\n 31:     @Transactional\n 32:     public List<VmPoolDO> batchUpdatePoolInfo(Map<String, Object> params) throws WrongParameterException {\n 33:         List<Long> poolIds = getPoolIds(params);\n 34:         String dcsName = getDcsName(params);\n 35:         List<VmPoolDO> vmPoolDOS = vmPoolDaoV2.findAllByPoolIds(poolIds);\n 36:         if (CollectionUtil.isEmpty(vmPoolDOS)) {\n 37:             throw new WrongParameterException(\"DCS信息不存在!\");\n 38:         }\n 39:         Map<Zone, List<VmPoolDO>> zoneListMap = vmPoolDOS.stream()\n 40:                 .collect(Collectors.groupingBy(VmPoolDO::getZone));\n 41:         if (zoneListMap.size() > 1) {\n 42:             throw new WrongParameterException(\"暂不支持修改不同区域下的DCS!\");\n 43:         }\n 44:         Integer num = vmPoolDaoV2.batchUpdatePoolInfo(poolIds, dcsName);\n 45:         LOGGER.info(\"batchUpdatePoolInfo success! ,num = {}\", num);\n 46:         addOperationLog(dcsName, vmPoolDOS);\n 47:         return vmPoolDaoV2.findAllByPoolIds(poolIds);\n 48:     }\n 49: \n 50:     private void addOperationLog(String dcsName, List<VmPoolDO> vmPoolDOS) {\n 51:         vmPoolDOS.forEach(vmPoolDO -> {\n 52:             VmPoolDO vmPoolDONew = getVmPoolDO(vmPoolDO);\n 53:             vmPoolDONew.setDcsName(dcsName);\n 54:             List<OperateRecord> updateEvents = operateAuditManager.getOperateRecords(vmPoolDO, vmPoolDONew,\n 55:                     DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, vmPoolDO.getPoolId());\n 56:             operateAuditManager.save(updateEvents);\n 57:         });\n 58:     }\n 59: \n 60:     private static VmPoolDO getVmPoolDO(VmPoolDO vmPoolDO) {\n 61:         VmPoolDO vmPoolDONew = new VmPoolDO();\n 62:         vmPoolDONew.setId(vmPoolDO.getId());\n 63:         vmPoolDONew.setPoolId(vmPoolDO.getPoolId());\n 64:         vmPoolDONew.setName(vmPoolDO.getName());\n 65:         vmPoolDONew.setType(vmPoolDO.getType());\n 66:         vmPoolDONew.setZone(vmPoolDO.getZone());\n 67:         vmPoolDONew.setDatabase(vmPoolDO.getDatabase());\n 68:         vmPoolDONew.setDcsName(vmPoolDO.getDcsName());\n 69:         return vmPoolDONew;\n 70:     }\n 71: \n 72:     private static List<Long> getPoolIds(Map<String, Object> params) throws WrongParameterException {\n 73:         if (params.get(\"poolIds\") instanceof List && CollectionUtil.isNotEmpty((List<Long>) params.get(\"poolIds\"))) {\n 74:             return (List<Long>) params.get(\"poolIds\");\n 75:         }\n 76:         throw new WrongParameterException(\"请选择正确的DCS!\");\n 77:     }\n 78: \n 79:     private static String getDcsName(Map<String, Object> params) throws WrongParameterException {\n 80:         if (ObjectUtil.isNotEmpty(params.get(\"dcsName\"))) {\n 81:             return (String) params.get(\"dcsName\");\n 82:         }\n 83:         throw new WrongParameterException(\"请确认要修改的dcsName!\");\n 84:     }\n 85: \n 86:     private boolean checkVmPool(VmPoolDO vmPoolDO) {\n 87:         if (vmPoolDO.getPoolId() == null\n 88:                 || StringUtils.isEmpty(vmPoolDO.getName())\n 89:                 || StringUtils.isEmpty(vmPoolDO.getDcsName())\n 90:                 || StringUtils.isEmpty(vmPoolDO.getType())\n 91:                 || vmPoolDO.getZone() == null\n 92:                 || vmPoolDO.getDatabase() == null) {\n 93:             return false;\n 94:         }\n 95:         return true;\n 96:     }\n 97: \n 98:     @Override\n 99:     public Page<VmPoolDO> getAllPoolInfo(String poolNames, List<Long> poolIds, String dcsName, String type, String zone,\n100:                                          Integer pageNum, Integer pageSize) throws Exception {\n101:         pageNum = PageUtil.checkPage(pageNum, pageSize).getLeft();\n102:         pageSize = PageUtil.checkPage(pageNum, pageSize).getRight();\n103: \n104:         Pageable pageable = PageRequest.of(pageNum - 1, pageSize);\n105: \n106:         List<String> names = splitString(poolNames);\n107:         List<String> dcsNames = splitString(dcsName);\n108:         List<String> types = splitString(type);\n109:         List<String> zones = splitString(zone);\n110:         Integer count = vmPoolDaoV2.countVmPools(names, poolIds, dcsNames, types, zones);\n111:         return PageUtil.buildPage(pageable, count, () -> vmPoolDaoV2.findVmPools(names, poolIds, dcsNames, types, zones,\n112:                 (int) pageable.getOffset(), pageable.getPageSize()));\n113:     }\n114: \n115:     private static List<String> splitString(String str) {\n116:         if (StringUtils.isNotBlank(str)) {\n117:             return Arrays.stream(str.split(\",\")).collect(Collectors.toList());\n118:         }\n119:         return Collections.emptyList();\n120:     }\n121: \n122:     @Override\n123:     public VmPoolDO addPoolInfo(VmPoolDO vmPoolDO) throws Exception {\n124:         int count = vmPoolDaoV2.countByPoolId(vmPoolDO.getPoolId());\n125:         if (count > 0) {\n126:             throw new WrongParameterException(\"the pool_id must be unique ！\");\n127:         }\n128:         VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n129:         LOGGER.info(\"addPoolInfo: poolDO = {}\", poolDO);\n130:         return poolDO;\n131:     }\n132: \n133:     @Override\n134:     @Transactional\n135:     public void deletePoolInfo(Long poolId) {\n136:         try {\n137:             vmPoolDao.deleteByPoolId(poolId);\n138:             String message = String.format(\"delete pool success, poolId = %d\", poolId);\n139:             LOGGER.info(message);\n140:         } catch (Exception e) {\n141:             LOGGER.error(\"delete pool exception, e = \", e);\n142:         }\n143:     }\n176: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -24,0 +24,3 @@\n+ 24:         LOGGER.info(\"updatePoolInfo: poolDO = {}\", poolDO);\n+ 25:         operateAuditManager.save(operateAuditManager.getOperateRecords(oldVmPoolDO, poolDO\n+ 26:                 , DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, poolDO.getPoolId()));\n```\n\nThese recent changes show the development progression\nThe new feature is 根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "agentmanager_y00560175#38", "good_example_response": "```java\n    public List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException {\n        try {\n            List<VmPoolDO> namesAndDatabases = vmPoolDaoV2.getDistinctDcsNamesAndDatabases(Zone.fromValue(zone));\n            Map<String, List<Integer>> dcsMap =\n                    namesAndDatabases.stream()\n                            .collect(\n                                    Collectors.groupingBy(\n                                            VmPoolDO::getDcsName, // key extractor\n                                            Collectors.mapping(\n                                                    VmPoolDO::getDatabase, // value extractor\n                                                    Collectors.toList() // value collector\n                                            )));\n            List<DcsInfoDO> dcsInfoDOS = dcsInfoDao.findAllByZone(Zone.fromValue(zone));\n            List<PoolDcsInfo> poolDcsInfos = new ArrayList<>();\n            for (Map.Entry<String, List<Integer>> entry : dcsMap.entrySet()) {\n                String dcsName = entry.getKey();\n                Optional<DcsInfoDO> dcsOptional =\n                        dcsInfoDOS.stream().filter(dcsInfoDO -> dcsInfoDO.getName().equals(dcsName)).findFirst();\n                if (dcsOptional.isPresent()) {\n                    PoolDcsInfo poolDcsInfo = new PoolDcsInfo();\n                    poolDcsInfo.setDatabases(entry.getValue());\n                    poolDcsInfo.setDcsInfo(dcsOptional.get());\n                    poolDcsInfos.add(poolDcsInfo);\n                }\n            }\n            LOGGER.info(\"getPoolByZone: zone = {}, poolDcsInfos = {}\", zone, poolDcsInfos);\n            return poolDcsInfos;\n        } catch (Exception e) {\n            LOGGER.error(\"getPoolByZone exception, e = \", e);\n            throw new ServerException(e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.service.impl.AgentPoolServiceImplTest#test_getPoolByZone clean test", "extra_content": {"query": "根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/38.patch", "test_result": "fail", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/service/impl/AgentPoolServiceImpl.java", "start_line": 188, "end_line": 219, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class FunctionalDemo {\n  2:     private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n```\n\nThe context below is:\n```java\n  5: \n  6:     public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n  7:         map.put(\"AZ_FLAG\", \"AZ_CODE\");\n  8:         map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n  9:         map.put(\"REGION_FLAG\", \"REGION_CODE\");\n 10:     };\n 11: \n 26: public static List<User> checkUserPermission(List<User> users, String role) {\n 27:         BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n 28:             .contains(requiredRole);\n 29: \n 30:         List<User> allowed = new ArrayList<>();\n 31:         // 执行权限校验流程\n 32:         users.forEach(user -> {\n 33:             if (hasPermission.test(user, role)) {\n 34:                 allowed.add(user);\n 35:             }\n 36:         });\n 37: \n 38:         return allowed;\n 39:     }\n 40: public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n 41:         orders.forEach(order -> handler.accept(order.getCustomer(), order));\n 42:     }\n 43: \n 44:     /**\n 45:      * 按比例奖励客户积分\n 46:      *\n 47:      * @param ratio ratio\n 48:      * @return {@link UnaryOperator<Customer>}\n 49:      */\n 50:     public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n 51:         return customer -> {\n 52:             int currentPoints = customer.getPoints();\n 53:             int bonus = (int) (currentPoints * ratio);\n 54:             customer.addPoints(bonus);\n 55:             return customer;\n 56:         };\n 57:     }\n 58: \n 59:     /**\n 60:      * 合并订单\n 61:      *\n 62:      * @return {@link BinaryOperator<Order>}\n 63:      */\n 64:     public static BinaryOperator<Order> mergeOrderOperator() {\n 65:         return (order1, order2) -> {\n 66:             double totalAmount = order1.getAmount() + order2.getAmount();\n 67:             int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n 68:             if (order1.getOrderId().equals(order2.getOrderId())) {\n 69:                 return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n 70:             } else {\n 71:                 return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n 72:             }\n 73:         };\n 74:     }\n 75: \n 76:     /**\n 77:      * 计算总积分：用户当前积分 + 订单积分\n 78:      *\n 79:      * @return {@link BiFunction<Customer, Order, Integer>}\n 80:      */\n 81:     public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n 82:         return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n 83:     }\n 84: \n 85:     public static Predicate<User> createNonAdminValidator() {\n 86:         Predicate<User> isActive = User::isActive;\n 87:         Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n 88:         return isActive.and(isAdmin.negate());\n 89:     }\n 90: \n 91:     public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n 92:         return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n 93:             .equals(host2.getHostName());\n 94:     }\n 95: \n 96:     public static BinaryOperator<Customer> higherPointsOperator() {\n 97:         return (customer1, customer2) -> {\n 98:             if (customer1.getPoints() >= customer2.getPoints()) {\n 99:                 return customer1;\n100:             }\n101:             return customer2;\n102:         };\n103:     }\n104: \n105:     public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n106:         return (customer, products) -> {\n107:             double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n108:             return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n109:         };\n110:     }\n111: \n112:     public static Predicate<JSONObject> validPredicate(String key) {\n113:         return item -> ObjectUtils.isNotEmpty(item.get(key));\n114:     }\n115: \n116:     public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n117:         return item -> ObjectUtils.equals(item.get(key), another.get(key));\n118:     }\n119: \n120:     public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n121:         Map<String, String> map = new HashMap<>();\n122:         if (mapping != null) {\n123:             mapping.accept(map);\n124:         }\n125: \n126:         return item -> {\n127:             if (map.containsKey(item)) {\n128:                 item = map.get(item);\n129:             }\n130: \n131:             return item;\n132:         };\n133:     }\n134: \n135:     public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n136:         UnaryOperator<String> operator = mappingOperator(mapping);\n137:         if (StringUtils.isNotEmpty(vo.getAzCode())) {\n138:             params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n139:         } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n140:             params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n141:         } else {\n142:             params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n143:         }\n144:     }\n145: \n146:     public static BiFunction<Integer, Integer, Double> euclidean() {\n147:         return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n148:     }\n149: \n150:     public static BiFunction<Integer, Integer, Double> manhattan() {\n151:         return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n152:     }\n153: }\n154: \n155: class User {\n156:     private String username;\n157: \n158:     private List<String> roles;\n159: \n160:     private boolean active;\n161: \n162:     public User(String username, List<String> roles, boolean active) {\n163:         this.username = username;\n164:         this.roles = roles;\n165:         this.active = active;\n166:     }\n167: \n168:     public String getUsername() {\n169:         return username;\n170:     }\n171: \n172:     public List<String> getRoles() {\n173:         return roles;\n174:     }\n175: \n176:     public boolean isActive() {\n177:         return active;\n178:     }\n179: }\n180: \n181: class Customer {\n182:     private String id;\n183: \n184:     private int points;\n185: \n186:     public Customer(String id, int points) {\n187:         this.id = id;\n188:         this.points = points;\n189:     }\n190: \n191:     public String getId() {\n192:         return id;\n193:     }\n194: \n195:     public int getPoints() {\n196:         return points;\n197:     }\n198: \n199:     public void addPoints(int points) {\n200:         this.points += points;\n201:     }\n202: }\n203: \n204: class Order {\n205:     private Customer customer;\n206: \n207:     private String orderId;\n208: \n209:     private double amount;\n210: \n211:     private boolean isCompleted;\n212: \n213:     public Order(Customer customer, String orderId, double amount) {\n214:         this.customer = customer;\n215:         this.orderId = orderId;\n216:         this.amount = amount;\n217:         this.isCompleted = false;\n218:     }\n219: \n220:     public Customer getCustomer() {\n221:         return customer;\n222:     }\n223: \n224:     public String getOrderId() {\n225:         return orderId;\n226:     }\n227: \n228:     public double getAmount() {\n229:         return amount;\n230:     }\n231: \n232:     public boolean isCompleted() {\n233:         return isCompleted;\n234:     }\n235: \n236:     public void markCompleted() {\n237:         isCompleted = true;\n238:     }\n239: }\n240: \n241: class Product {\n242:     private String productId;\n243: \n244:     private int amount;\n245: \n246:     private double price;\n247: \n248:     public Product(String productId, int amount, double price) {\n249:         this.productId = productId;\n250:         this.amount = amount;\n251:         this.price = price;\n252:     }\n253: \n254:     public String getProductId() {\n255:         return productId;\n256:     }\n257: \n258:     public int getAmount() {\n259:         return amount;\n260:     }\n261: \n262:     public double getPrice() {\n263:         return price;\n264:     }\n265: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -2,0 +2,1 @@\n+   2:     private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n```\n\nThese recent changes show the development progression\nThe new feature is 实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "agentmanager_y00560175#43", "good_example_response": "```java\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#testBatchUpdateWithMultipleBatches clean test", "extra_content": {"query": "实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/43.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 35, "end_line": 49, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class FunctionalDemo {\n  2:     private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n```\n\nThe context below is:\n```java\n  5: \n  6:     public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n  7:         map.put(\"AZ_FLAG\", \"AZ_CODE\");\n  8:         map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n  9:         map.put(\"REGION_FLAG\", \"REGION_CODE\");\n 10:     };\n 11: \n 12:     public static List<User> checkUserPermission(List<User> users, String role) {\n 13:         BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n 14:             .contains(requiredRole);\n 15: \n 16:         List<User> allowed = new ArrayList<>();\n 17:         // 执行权限校验流程\n 18:         users.forEach(user -> {\n 19:             if (hasPermission.test(user, role)) {\n 20:                 allowed.add(user);\n 21:             }\n 22:         });\n 23: \n 24:         return allowed;\n 25:     }\n 26: \n 27:     public static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer) {\n 28:         int totalSize = list.size();\n 29:         LOGGER.info(\"start to handle list, total size: {}\", totalSize);\n 30:         // 计算需要分成多少批\n 31:         int batchCount = (totalSize + BATCH_SIZE - 1) / BATCH_SIZE;\n 32:         for (int i = 0; i < batchCount; i++) {\n 33:             int startIndex = i * BATCH_SIZE;\n 34:             int endIndex = Math.min((i + 1) * BATCH_SIZE, totalSize);\n 35:             List<E> batch = list.subList(startIndex, endIndex);\n 36:             // 处理batch\n 37:             consumer.accept(batch);\n 38:             LOGGER.debug(\"updated size: {}\", endIndex);\n 39:         }\n 40:         LOGGER.info(\"finish to handle list\");\n 41:     }\n 42: \n 43:     public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n 44:         orders.forEach(order -> handler.accept(order.getCustomer(), order));\n 45:     }\n 46: \n 47:     /**\n 48:      * 按比例奖励客户积分\n 49:      *\n 50:      * @param ratio ratio\n 51:      * @return {@link UnaryOperator<Customer>}\n 52:      */\n 53:     public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n 54:         return customer -> {\n 55:             int currentPoints = customer.getPoints();\n 56:             int bonus = (int) (currentPoints * ratio);\n 57:             customer.addPoints(bonus);\n 58:             return customer;\n 59:         };\n 60:     }\n 72: /**\n 73:      * 计算总积分：用户当前积分 + 订单积分\n 74:      *\n 75:      * @return {@link BiFunction<Customer, Order, Integer>}\n 76:      */\n 77:     public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n 78:         return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n 79:     }\n 80: \n 81:     public static Predicate<User> createNonAdminValidator() {\n 82:         Predicate<User> isActive = User::isActive;\n 83:         Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n 84:         return isActive.and(isAdmin.negate());\n 85:     }\n 86: \n 87:     public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n 88:         return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n 89:             .equals(host2.getHostName());\n 90:     }\n 91: \n 92:     public static BinaryOperator<Customer> higherPointsOperator() {\n 93:         return (customer1, customer2) -> {\n 94:             if (customer1.getPoints() >= customer2.getPoints()) {\n 95:                 return customer1;\n 96:             }\n 97:             return customer2;\n 98:         };\n 99:     }\n100: \n101:     public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n102:         return (customer, products) -> {\n103:             double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n104:             return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n105:         };\n106:     }\n107: \n108:     public static Predicate<JSONObject> validPredicate(String key) {\n109:         return item -> ObjectUtils.isNotEmpty(item.get(key));\n110:     }\n111: \n112:     public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n113:         return item -> ObjectUtils.equals(item.get(key), another.get(key));\n114:     }\n115: \n116:     public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n117:         Map<String, String> map = new HashMap<>();\n118:         if (mapping != null) {\n119:             mapping.accept(map);\n120:         }\n121: \n122:         return item -> {\n123:             if (map.containsKey(item)) {\n124:                 item = map.get(item);\n125:             }\n126: \n127:             return item;\n128:         };\n129:     }\n130: \n131:     public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n132:         UnaryOperator<String> operator = mappingOperator(mapping);\n133:         if (StringUtils.isNotEmpty(vo.getAzCode())) {\n134:             params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n135:         } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n136:             params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n137:         } else {\n138:             params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n139:         }\n140:     }\n141: \n142:     public static BiFunction<Integer, Integer, Double> euclidean() {\n143:         return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n144:     }\n145: \n146:     public static BiFunction<Integer, Integer, Double> manhattan() {\n147:         return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n148:     }\n149: }\n150: \n151: class User {\n152:     private String username;\n153: \n154:     private List<String> roles;\n155: \n156:     private boolean active;\n157: \n158:     public User(String username, List<String> roles, boolean active) {\n159:         this.username = username;\n160:         this.roles = roles;\n161:         this.active = active;\n162:     }\n163: \n164:     public String getUsername() {\n165:         return username;\n166:     }\n167: \n168:     public List<String> getRoles() {\n169:         return roles;\n170:     }\n171: \n172:     public boolean isActive() {\n173:         return active;\n174:     }\n175: }\n176: \n177: class Customer {\n178:     private String id;\n179: \n180:     private int points;\n181: \n182:     public Customer(String id, int points) {\n183:         this.id = id;\n184:         this.points = points;\n185:     }\n186: \n187:     public String getId() {\n188:         return id;\n189:     }\n190: \n191:     public int getPoints() {\n192:         return points;\n193:     }\n194: \n195:     public void addPoints(int points) {\n196:         this.points += points;\n197:     }\n198: }\n199: \n200: class Order {\n201:     private Customer customer;\n202: \n203:     private String orderId;\n204: \n205:     private double amount;\n206: \n207:     private boolean isCompleted;\n208: \n209:     public Order(Customer customer, String orderId, double amount) {\n210:         this.customer = customer;\n211:         this.orderId = orderId;\n212:         this.amount = amount;\n213:         this.isCompleted = false;\n214:     }\n215: \n216:     public Customer getCustomer() {\n217:         return customer;\n218:     }\n219: \n220:     public String getOrderId() {\n221:         return orderId;\n222:     }\n223: \n224:     public double getAmount() {\n225:         return amount;\n226:     }\n227: \n228:     public boolean isCompleted() {\n229:         return isCompleted;\n230:     }\n231: \n232:     public void markCompleted() {\n233:         isCompleted = true;\n234:     }\n235: }\n236: \n237: class Product {\n238:     private String productId;\n239: \n240:     private int amount;\n241: \n242:     private double price;\n243: \n244:     public Product(String productId, int amount, double price) {\n245:         this.productId = productId;\n246:         this.amount = amount;\n247:         this.price = price;\n248:     }\n249: \n250:     public String getProductId() {\n251:         return productId;\n252:     }\n253: \n254:     public int getAmount() {\n255:         return amount;\n256:     }\n257: \n258:     public double getPrice() {\n259:         return price;\n260:     }\n261: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -101,3 +101,5 @@\n-    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() { return (customer, products) -> new Order(customer, \"ORD0\", 0.0); }\n+    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n+        return (customer, products) -> {\n+            double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n+            return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n+        };\n+    }\n```\n\nThese recent changes show the development progression\nThe new feature is 返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 合并订单\npublic static BinaryOperator<Order> mergeOrderOperator()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "agentmanager_y00560175#46", "good_example_response": "```java\n    public static BinaryOperator<Order> mergeOrderOperator() {\n        return (order1, order2) -> {\n            double totalAmount = order1.getAmount() + order2.getAmount();\n            int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n            if (order1.getOrderId().equals(order2.getOrderId())) {\n                return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n            } else {\n                return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n            }\n        };\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#test_mergeOrderOperator clean test", "extra_content": {"query": "返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/46.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 90, "end_line": 101, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3:     private ClassLoaderUtils() {\n  4:     }\n```\n\nThe context below is:\n```java\n  7:     public static URL[] getURLs(ClassLoader classLoader) {\n  8:         if (classLoader instanceof URLClassLoader) {\n  9:             return ((URLClassLoader) classLoader).getURLs();\n 10:         }\n 11:         try {\n 12:             Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 13:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 14:                 ucpField.setAccessible(true);\n 15:                 return null;\n 16:             });\n 17:             Object ucp = ucpField.get(classLoader);\n 18:             Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 19:             AccessController.doPrivileged((PrivilegedAction) () -> {\n 20:                 pathField.setAccessible(true);\n 21:                 return null;\n 22:             });\n 23:             ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 24:             return path.toArray(new URL[0]);\n 25:         } catch (Exception e) {\n 26:             throw new DevsporeCicException(e);\n 27:         }\n 28:     }\n 29: \n 30:     public static void loadClassWithApplicationLoader(String className) {\n 31:         try {\n 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n 34: \n 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n 37:         } catch (ClassNotFoundException e) {\n 38:             log.error(\"load error: {}\", e.getMessage());\n 39:         }\n 40:     }\n 41: \n 42:     public static boolean isBootstrapClassLoader(String className) {\n 43:         try {\n 44:             Class<?> langClass = Class.forName(className);\n 45:             return langClass.getClassLoader() == null;\n 46:         } catch (ClassNotFoundException e) {\n 47:             log.error(\"load error: {}\", e.getMessage());\n 48:         }\n 49:         return false;\n 50:     }\n 51: \n 52:     public static URL[] getExtensionClassLoaderUrls() {\n 53:         ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n 54:         ClassLoader extensionClassLoader = systemClassLoader.getParent();\n 55: \n 56:         if (extensionClassLoader instanceof URLClassLoader) {\n 57:             URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n 58:             return urlClassLoader.getURLs();\n 59:         }\n 60:         return null;\n 61:     }\n 62: \n 63:     /**\n 64:      * 动态加载类并执行指定方法\n 65:      *\n 66:      * @param loader 类加载器\n 67:      * @param className 完整类名（如 \"com.example.Plugin\"）\n 68:      * @param methodName 方法名（如 \"run\"）\n 69:      * @param parameterTypes 方法参数类型数组（无参数传 null）\n 70:      * @param args 方法参数值数组（无参数传 null）\n 71:      * @return 方法执行结果（无返回值方法返回 null）\n 72:      * @throws Exception 封装所有可能的反射异常\n 73:      */\n 96: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 97:         Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 98: \n 99:         // 1. 加载目标类\n100:         Class<?> clazz = loader.loadClass(className);\n101: \n102:         // 2. 实例化对象（使用无参构造函数）\n103:         Constructor<?> constructor = clazz.getDeclaredConstructor();\n104:         constructor.setAccessible(true); // 允许调用私有构造方法\n105:         Object instance = constructor.newInstance();\n106: \n107:         // 3. 获取并执行方法\n108:         Method method = clazz.getMethod(methodName, parameterTypes);\n109: \n110:         // 判断是否为静态方法\n111:         if (Modifier.isStatic(method.getModifiers())) {\n112:             return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n113:         } else {\n114:             // 非静态方法\n115:             return returnType.cast(method.invoke(instance, args));\n116:         }\n117:     }\n118: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -30,10 +30,10 @@\n-    public static void loadClassWithApplicationLoader(String className) {}\n+    public static void loadClassWithApplicationLoader(String className) {\n+        try {\n+            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n+            log.info(\"Application ClassLoader: {}\", appClassLoader);\n+\n+            Class<?> loadedClass = appClassLoader.loadClass(className);\n+            log.info(\"Loaded Class: {}\", loadedClass.getName());\n+        } catch (ClassNotFoundException e) {\n+            log.error(\"load error: {}\", e.getMessage());\n+        }\n+    }\n```\n\nThese recent changes show the development progression\nThe new feature is 使用指定类加载器实现动态加载.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 重载方法：简化无参方法的调用\npublic static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#40", "good_example_response": "```java\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#loadAndInvoke clean test", "extra_content": {"query": "使用指定类加载器实现动态加载", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/40.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 97, "end_line": 118, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: public class UrlClassLoaderUtils {\n 15: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n###:None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 加载指定路径下的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 动态加载类并执行指定方法\npublic static Class<?> loadClassByPath(String[] paths, String className) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#48", "good_example_response": "```java\n    public static Class<?> loadClassByPath(String[] paths, String className) throws Exception {\n\n        // 1. 将路径转换为 URL 对象（适配不同操作系统）\n        URL[] urls = new URL[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            String normalizedPath = paths[i].replace(\"/\", File.separator);\n            urls[i] = new File(normalizedPath).toURI().toURL();\n        }\n        URLClassLoader loader = new URLClassLoader(urls);\n\n        // 2. 加载目标类\n        return loader.loadClass(className);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.UrlClassLoaderUtilsTest clean test", "extra_content": {"query": "加载指定路径下的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/48.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/UrlClassLoaderUtils.java", "start_line": 18, "end_line": 31, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class BaseDao<T> {\n```\n\nThe context below is:\n```java\n  4:      * 构建分页查询\n  5:      *\n  6:      * @param request 查询条件\n  7:      * @return IPage<T>\n  8:      */\n  9:     public IPage<T> buildIPage(QueryRequest request) {\n 10:         IPage<T> iPage = new Page<>();\n 11:         iPage.setCurrent(request.getPageIndex());\n 12:         iPage.setSize(request.getPageSize());\n 13:         return iPage;\n 14:     }\n 15: \n 16:     /**\n 17:      * 构建查询条件，包括条件查询和按字段排序。\n 18:      *\n 19:      * @param request   查询条件\n 20:      * @return QueryWrapper<T>\n 21:      */\n 22:     public QueryWrapper<T> buildQueryWrapper(QueryRequest request) {\n 23:         QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n 24:         buildCondition(request, queryWrapper);\n 25:         buildOrder(request, queryWrapper, null);\n 26:         return queryWrapper;\n 27:     }\n 34: /**\n 35:      * 构建查询条件\n 36:      * 因为in和notIn这两个条件特殊，在for循环外分别单独构建。对于同一列名，把所有的值放到一起。\n 37:      *\n 38:      * @param request      查询条件\n 39:      * @param queryWrapper 构建对象\n 40:      */\n 41:     public void buildCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n 42:         if (request.getSelectors() == null) {\n 43:             return;\n 44:         }\n 45:         buildInCondition(request, queryWrapper);\n 46:         buildNotInCondition(request, queryWrapper);\n 47:         for (QueryRequest.Selector selector : request.getSelectors()) {\n 48:             switch (selector.getFilterType()) {\n 49:                 case LIKE:\n 50:                     queryWrapper.like(selector.getColumnName(), selector.getFilterValue());\n 51:                     break;\n 52:                 case EQUAL:\n 53:                     queryWrapper.eq(selector.getColumnName(), selector.getFilterValue());\n 54:                     break;\n 55:                 case BIGGER:\n 56:                     queryWrapper.gt(selector.getColumnName(), selector.getFilterValue());\n 57:                     break;\n 58:                 case BIGGEREQUAL:\n 59:                     queryWrapper.ge(selector.getColumnName(), selector.getFilterValue());\n 60:                     break;\n 61:                 case LESS:\n 62:                     queryWrapper.lt(selector.getColumnName(), selector.getFilterValue());\n 63:                     break;\n 64:                 case LESSEQUAL:\n 65:                     queryWrapper.le(selector.getColumnName(), selector.getFilterValue());\n 66:                     break;\n 67:                 case ISNULL:\n 68:                     queryWrapper.isNull(selector.getColumnName());\n 69:                     break;\n 70:                 case ISNOTNULL:\n 71:                     queryWrapper.isNotNull(selector.getColumnName());\n 72:                     break;\n 73:                 default:\n 74:                     break;\n 75:             }\n 76:         }\n 77:     }\n 78: \n 79:     /**\n 80:      * 构建排序条件\n 81:      *\n 82:      * @param request      查询条件\n 83:      * @param queryWrapper 构建对象\n 84:      * @param uniqueKey    唯一主键（传入如果不为空，则自动添加一条根据默认主键升序方法）\n 85:      */\n 86:     public void buildOrder(QueryRequest request, QueryWrapper<T> queryWrapper, String uniqueKey) {\n 87:         if (request.getSortOrder() != null && request.getSortColumn() != null) {\n 88:             queryWrapper.orderBy(\n 89:                     true, SortOrderEnum.ASC.equals(request.getSortOrder()), request.getSortColumn());\n 90:         }\n 91: \n 92:         if (ObjectUtils.isNotEmpty(uniqueKey)) {\n 93:             queryWrapper.orderBy(true, true, uniqueKey);\n 94:         }\n 95:     }\n 96: \n 97:     private void buildInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n 98:         Map<String, List<QueryRequest.Selector>> inColumnMap =\n 99:                 getFilterColumnMap(request, FilterTypeEnum.IN);\n100:         inColumnMap.forEach(\n101:                 (columnName, fieldSelector) ->\n102:                         queryWrapper.in(\n103:                                 columnName,\n104:                                 fieldSelector.stream()\n105:                                         .map(QueryRequest.Selector::getFilterValue)\n106:                                         .collect(Collectors.toList())));\n107:     }\n108: \n109:     private void buildNotInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n110:         Map<String, List<QueryRequest.Selector>> notInColumnMap =\n111:                 getFilterColumnMap(request, FilterTypeEnum.NOTIN);\n112:         notInColumnMap.forEach(\n113:                 (columnName, fieldSelector) ->\n114:                         queryWrapper.notIn(\n115:                                 columnName,\n116:                                 fieldSelector.stream()\n117:                                         .map(QueryRequest.Selector::getFilterValue)\n118:                                         .collect(Collectors.toList())));\n119:     }\n120: \n121:     /**\n122:      * 根据列名称分组\n123:      *\n124:      * @param request    查询条件\n125:      * @param filterType 过滤类型\n126:      * @return key是列名，value是List<RequestFieldSelector>的map\n127:      */\n128:     private Map<String, List<QueryRequest.Selector>> getFilterColumnMap(\n129:             QueryRequest request, FilterTypeEnum filterType) {\n130:         return request.getSelectors().stream()\n131:                 .filter(selector -> filterType == selector.getFilterType())\n132:                 .collect(Collectors.groupingBy(QueryRequest.Selector::getColumnName));\n133:     }\n134: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -22,5 +22,5 @@\n     public QueryWrapper<T> buildQueryWrapper(QueryRequest request) {\n         QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n         buildCondition(request, queryWrapper);\n-        buildOrder(request, queryWrapper);\n+        buildOrder(request, queryWrapper, null);\n         return queryWrapper;\n     }\n```\n\nThese recent changes show the development progression\nThe new feature is 使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 构建查询条件，包括条件查询和按字段排序。\npublic QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "DubheProbeOrchestration_z00806805#41", "good_example_response": "```java\n    public QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey) {\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        buildCondition(request, queryWrapper);\n        buildOrder(request, queryWrapper, uniqueKey);\n        return queryWrapper;\n    }\n```", "reward_command": "cd /docker/JavaRunProject/DubheProbeOrchestration_z00806805; export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/cbu/dubheprobeorchestration/dao/BaseDaoTest.java", "extra_content": {"query": "使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/diff/41.patch", "test_result": "pass", "file_path": "/DubheProbeOrchestration/src/main/java/com/huawei/cbu/dubheprobeorchestration/dao/BaseDao.java", "start_line": 54, "end_line": 60, "work_dir": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ErrorMessage {\n    public void setSuggestion(String suggestion);\n    public String getSuggestion();\n    public void setExplain(String explain);\n    public String getExplain();\n    public void setErrorMessage(String errorMessage);\n    public String getErrorMessage();\n    public void setErrorCode(String errorCode);\n    public String getErrorCode();\n}\n```\n\nThe context above is:\n```java\n  1: public abstract class AbstractRemoteCallService {\n  2:     protected static final Logger LOG = LoggerFactory.getLogger(AbstractRemoteCallService.class);\n```\n\nThe context below is:\n```java\n  5:     private ServiceAvailableDetectConfig serviceAvailableDetectService;\n  6: \n  7:     private LubanRestTemplate lubanRestTemplate;\n  8: \n  9:     private String server;\n 10: \n 11:     private int connectTimeout = 5000;\n 12: \n 13:     private int readTimeout = 240000;\n 14: \n 15:     private int connectionRequestTimeout = 20000;\n 16: \n 17:     protected LubanRestTemplate getLubanRestTemplate() {\n 18:         if (lubanRestTemplate != null) {\n 19:             return lubanRestTemplate;\n 20:         }\n 21:         synchronized (this) {\n 22:             if (lubanRestTemplate != null) {\n 23:                 return lubanRestTemplate;\n 24:             }\n 25:             lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n 26:         }\n 27:         return lubanRestTemplate;\n 28:     }\n 29: \n 30:     protected String getServer() {\n 31:         return server;\n 32:     }\n 33: \n 34:     public void setServer(String server) {\n 35:         this.server = server;\n 36:     }\n 37: \n 38:     protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n 39: \n 40:         List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n 41: \n 42:         if (availableAddress.isEmpty()) {\n 43:             throw new ApiClientException(\"not available address:\");\n 44:         }\n 45:         RestTemplate templete = getLubanRestTemplate();\n 46:         HttpHeaders headers = new HttpHeaders();\n 47:         headers.setContentType(MediaType.APPLICATION_JSON);\n 48:         // 未来此处可以添加body体\n 49:         String requestBody = JSON.toJSONString(request);\n 50:         HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n 51: \n 52:         ResponseEntity<T> response = null;\n 53: \n 54:         // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n 55:         RestClientException ex = null;\n 56:         for (String str : availableAddress) {\n 57:             try {\n 58:                 String address = str + url;\n 59:                 response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n 60:                 break;\n 61:             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n 62:                 int status = logException.getRawStatusCode();\n 63:                 String body = logException.getResponseBodyAsString();\n 64:                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n 65:                 ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n 66:                 if (em == null) {\n 67:                     throw new ApiClientException(body, logException);\n 68:                 }\n 69:                 if (em.getErrorCode() == null) {\n 70:                     throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n 71:                 } else {\n 72:                     throw new ApiClientException(em);\n 73:                 }\n 74: \n 75:             } catch (RestClientException logException) { // 客户端的数据\n 76: \n 77:                 ex = logException;\n 78:                 continue;\n 79:             }\n 80:         }\n 81: \n 82:         if (response == null) {\n 83:             throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n 84:         }\n 85: \n 86:         return response.getBody();\n 87:     }\n 88: \n 89:     /**\n 90:      * 发送post请求，并且获取结果转换成对象 <br>\n 91:      *\n 92:      * @param url\n 93:      * @param request\n 94:      * @param responseType\n 95:      * @return\n 96:      * @author y00438022\n 97:      * @since 2019年6月28日\n 98:      */\n 99:     protected <T> T postForObject(String url, Object request, Class<T> responseType) {\n100: \n101:         List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n102: \n103:         if (availableAddress.isEmpty()) {\n104:             throw new ApiClientException(\"not available address:\");\n105:         }\n106:         RestTemplate templete = getLubanRestTemplate();\n107:         HttpHeaders headers = new HttpHeaders();\n108:         headers.setContentType(MediaType.APPLICATION_JSON);\n109:         // 未来此处可以添加body体\n110:         String requestBody = JSON.toJSONString(request);\n111:         HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n112:         ResponseEntity<String> response = null;\n113:         // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n114:         RestClientException ex = null;\n115:         for (String str : availableAddress) {\n116:             try {\n117:                 String address = str + url;\n118:                 response = templete.exchange(address, HttpMethod.POST, requestEntity, String.class);\n119:                 break;\n120:             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n121:                 int status = logException.getRawStatusCode();\n122:                 String body = logException.getResponseBodyAsString();\n123:                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n124:                 ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n125:                 if (em == null) {\n126:                     throw new ApiClientException(body, logException);\n127:                 }\n128:                 if (em.getErrorCode() == null) {\n129:                     throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n130:                 } else {\n131:                     throw new ApiClientException(em);\n132:                 }\n133: \n134:             } catch (RestClientException logException) { // 客户端的数据\n135: \n136:                 ex = logException;\n137:                 continue;\n138:             }\n139:         }\n140: \n141:         if (response == null) {\n142:             throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n143:         }\n144: \n145:         String result = response.getBody();\n146:         return JSON.parseObject(result, responseType);\n147: \n148:     }\n149: \n150:     /**\n151:      * 新的get方法\n152:      *\n153:      * @param url\n154:      * @param responseType\n155:      * @param <T>\n156:      * @return\n157:      * @author lwx521892\n158:      * @since 2019年12月19日\n159:      */\n205: protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n206:         List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n207:         if (availableAddress.isEmpty()) {\n208:             throw new ApiClientException(\"not available address:\");\n209:         }\n210:         RestTemplate templete = getLubanRestTemplate();\n211:         HttpHeaders headers = new HttpHeaders();\n212:         headers.setContentType(MediaType.APPLICATION_JSON);\n213:         // 未来此处可以添加body体\n214: \n215:         HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n216: \n217:         ResponseEntity<T> response = null;\n218: \n219:         // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n220:         RestClientException ex = null;\n221:         for (String str : availableAddress) {\n222:             try {\n223:                 String address = str + url;\n224:                 response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n225:                 break;\n226:             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n227:                 int status = logException.getRawStatusCode();\n228:                 String body = logException.getResponseBodyAsString();\n229:                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n230:                 ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n231:                 if (em == null) {\n232:                     throw new ApiClientException(body, logException);\n233:                 } else if (em.getErrorCode() == null) {\n234:                     throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n235:                 } else {\n236:                     throw new ApiClientException(em);\n237:                 }\n238:             } catch (RestClientException logException) { // 客户端的数据\n239:                 ex = logException;\n240:                 continue;\n241:             }\n242:         }\n243: \n244:         if (response == null) {\n245:             throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n246:         }\n247: \n248:         return response.getBody();\n249:     }\n250: public int getConnectTimeout() {\n251:         return connectTimeout;\n252:     }\n253: \n254:     public void setConnectTimeout(int connectTimeout) {\n255:         this.connectTimeout = connectTimeout;\n256:     }\n257: \n258:     public int getReadTimeout() {\n259:         return readTimeout;\n260:     }\n261: \n262:     public void setReadTimeout(int readTimeout) {\n263:         this.readTimeout = readTimeout;\n264:     }\n265: \n266:     public int getConnectionRequestTimeout() {\n267:         return connectionRequestTimeout;\n268:     }\n269: \n270:     public void setConnectionRequestTimeout(int connectionRequestTimeout) {\n271:         this.connectionRequestTimeout = connectionRequestTimeout;\n272:     }\n273: \n274: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -150,10 +150,10 @@\n-    /**\n-     * 发送Get请求，并且获取结果转换成对象 <br>\n-     *\n-     * @param url\n-     * @param responseType\n-     * @param <T>\n-     * @return\n-     */\n+    /**\n+     * 新的get方法\n+     *\n+     * @param url\n+     * @param responseType\n+     * @param <T>\n+     * @return\n+     * @author lwx521892\n+     * @since 2019年12月19日\n+     */\n```\n\nThese recent changes show the development progression\nThe new feature is 通过spring RestTemplate发送get请求.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送Get请求，并且获取结果转换成对象 <br>\nprotected <T> T getForObject(String url, Class<T> responseType)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "lubanjob_f00563108#61", "good_example_response": "```java\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/lubanjob_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.luban.cmdb.client.config.AbstractRemoteCallServiceTest.java#test_getForObject_should_return_not_null_when_condition", "extra_content": {"query": "通过spring RestTemplate发送get请求", "diff_path": "/docker/JavaRunProject/lubanjob_f00563108/diff/61.patch", "test_result": "pass", "file_path": "/common/cmdb-client/src/main/java/com/huawei/luban/cmdb/client/config/AbstractRemoteCallService.java", "start_line": 189, "end_line": 234, "work_dir": "/docker/JavaRunProject/lubanjob_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @MappedJdbcTypes(JdbcType.LONGVARCHAR)\n  3: @MappedTypes(Map.class)\n  4: public class MapObjectTypeHandler extends BaseTypeHandler<Map<String, Object>> {\n 13: @Override\n 14:     public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n 15:         return getMapByJson(rs.getString(columnName));\n 16:     }\n```\n\nThe context below is:\n```java\n 19:     public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n 20:         return getMapByJson(rs.getString(columnIndex));\n 21:     }\n 22: \n 23:     @Override\n 24:     public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n 25:         return getMapByJson(cs.getString(columnIndex));\n 26:     }\n 27: \n 28:     private Map<String, Object> getMapByJson(String json) {\n 29:         try {\n 30:             return StringUtils.isBlank(json)\n 31:                     ? new HashMap<>()\n 32:                     : JsonUtil.fromJson(json, (new TypeToken<Map<String, Object>>() {\n 33:                     }).getType());\n 34:         } catch (Exception e) {\n 35:             log.error(e.getMessage());\n 36:         }\n 37:         return null;\n 38:     }\n 39: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -13,13 +13,13 @@\n-    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n+    @Override\n+    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n         return getMapByJson(rs.getString(columnName));\n     }\n-\n-    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n+\n+    @Override\n+    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n         return getMapByJson(rs.getString(columnIndex));\n     }\n-\n-    public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n+\n+    @Override\n+    public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n         return getMapByJson(cs.getString(columnIndex));\n     }\n```\n\nThese recent changes show the development progression\nThe new feature is 自定义mybatis Map typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType) throws SQLException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#33", "good_example_response": "```java\n    public void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType)\n            throws SQLException {\n        if (parameter == null) {\n            ps.setNull(i, Types.LONGVARCHAR);\n            return;\n        }\n        ps.setString(i, JsonUtil.toJson(parameter));\n    }\n```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.MapStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis Map typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/33.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/MapObjectTypeHandler.java", "start_line": 36, "end_line": 44, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: @Slf4j\n  2: @Configuration\n  3: @MapperScan({\"com.huawei.devcloud.octopusscheduler.mapper\",\n  4:     \"com.huawei.devcloud.octopusscheduler.powerschedule.mappper\"})\n  5: public class DataSourceConfig {\n 20: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 初始化mybatis sql数据源.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#34", "good_example_response": "```java\n    public SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException {\n        log.info(\">>> Start init datasource\");\n\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n        sqlSessionFactoryBean.setDataSource(dataSource);\n        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);\n        sqlSessionFactoryBean.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        sqlSessionFactoryBean.setMapperLocations(\n            new PathMatchingResourcePatternResolver().getResources(\"classpath:**/mapper/*.xml\"));\n        sqlSessionFactoryBean.setPlugins(new TableShardInterceptor());\n\n        log.info(\"<<< End init datasource\");\n        return sqlSessionFactoryBean;\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.datasource.config.DataSourceConfigTest.java", "extra_content": {"query": "初始化mybatis sql数据源", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/34.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/datasource/config/DataSourceConfig.java", "start_line": 23, "end_line": 36, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class UniSystemRepository {\n    public List<UniSystem> listUniSystem(Integer offset, Integer limit); /* 分页查询目标系统列表 */\n    public int countUniSystem(); /* 查询目标系统数量 */\n    public List<UniSystem> listSystemByCodes(List<String> systemCodes); /* 根据目标系统编码列表查询目标系统列表 */\n    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode); /* 根据作业空间编码查询关联的目标系统列表 */\n    public PageInfo<UniSystem> pageByCriteria(UniSystemCriteria uniSystemCriteria, int pageNum, int pageSize,\n        Boolean isQueryTotal); /* GetUniSystems Method */\n    public UniSystem getById(Long uniSystemId); /* GetUniSystemById Method */\n    public int updateByIds(List<UniSystem> uniSystemList); /* UpdateUniSystemByIds Method */\n    public int deleteAllById(List<Long> uniSystemIds); /* DeleteUniSystemByIds Method */\n    public int deleteById(Long uniSystemId); /* DeleteUniSystemById Method */\n    public int batchSave(List<UniSystem> uniSystemList); /* AddUniSystems Method */\n    public int save(UniSystem uniSystem); /* AddUniSystem Method */\n}\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @Service\n  3: public class UniSystemService {\n  4:     @Autowired\n  5:     private UniSystemRepository uniSystemRepository;\n```\n\nThe context below is:\n```java\n  8:     private CloudDragonProjectService cloudDragonProjectService;\n  9: \n 10:     /**\n 11:      * 分页查询目标系统列表\n 12:      *\n 13:      * @param offset 偏移量\n 14:      * @param limit 分页大小\n 15:      * @return 目标系统列表\n 16:      */\n 23: \n 24:     /**\n 25:      * 根据作业空间编码查询关联的目标系统列表\n 26:      *\n 27:      * @param uniWorkspaceCode 作业空间编码\n 28:      * @return 目标系统列表\n 29:      */\n 30:     public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode) {\n 31:         return uniSystemRepository.listUniSystemByUniWorkspaceCode(uniWorkspaceCode);\n 32:     }\n 33: public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n 34:         int total = uniSystemRepository.countUniSystem();\n 35:         List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n 36:         List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n 37:         return new PageResponseV2<>(total, listResp);\n 38:     }\n 39: }\n```\n\n## Recent Changes Context\n\nHere are some recent changes made to related files that might provide helpful context:\n\n### Recent Change 1\n(Latest preparation work)\n```diff\n@@ -1,1 +1,1 @@\n-// TODO: add logger\n+@Slf4j\n```\n\nThese recent changes show the development progression\nThe new feature is 分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 根据云龙群组id查询对应作业空间关联的目标系统\npublic List<UniSystemResp> listUniSystemByGroupId(String groupId)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "projectTree_l00619365#56", "good_example_response": "```java\n    public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n        int total = uniSystemRepository.countUniSystem();\n        List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n        List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n        return new PageResponseV2<>(total, listResp);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true clean test -f service/pom.xml -Dtest=com.huawei.clouddragon.uniworkspace.service.UniSystemServiceTest", "extra_content": {"query": "分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换", "diff_path": "/docker/JavaRunProject/projectTree_l00619365/diff/56.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/clouddragon/uniworkspace/service/UniSystemService.java", "start_line": 46, "end_line": 52, "work_dir": "/docker/JavaRunProject/projectTree_l00619365/"}}
