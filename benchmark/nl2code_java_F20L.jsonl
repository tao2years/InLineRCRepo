{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@MappedJdbcTypes(JdbcType.LONGVARCHAR)\n@MappedTypes(Map.class)\npublic class MapObjectTypeHandler extends BaseTypeHandler<Map<String, Object>> {\n```\n\nThe context below is:\n```java\n\n    @Override\n    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n        return getMapByJson(rs.getString(columnName));\n    }\n\n    @Override\n    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n        return getMapByJson(rs.getString(columnIndex));\n    }\n\n    @Override\n    public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n        return getMapByJson(cs.getString(columnIndex));\n    }\n\n    private Map<String, Object> getMapByJson(String json) {\n        try {\n            return StringUtils.isBlank(json)\n                    ? new HashMap<>()\n                    : JsonUtil.fromJson(json, (new TypeToken<Map<String, Object>>() {\n                    }).getType());\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n        return null;\n    }\n}\n```\n\nThe new feature is 自定义mybatis Map typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType) throws SQLException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#33", "good_example_response": "```java\n    public void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType)\n            throws SQLException {\n        if (parameter == null) {\n            ps.setNull(i, Types.LONGVARCHAR);\n            return;\n        }\n        ps.setString(i, JsonUtil.toJson(parameter));\n    }\n```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.MapStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis Map typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/33.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/MapObjectTypeHandler.java", "start_line": 36, "end_line": 44, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@Configuration\n@MapperScan({\"com.huawei.devcloud.octopusscheduler.mapper\",\n    \"com.huawei.devcloud.octopusscheduler.powerschedule.mappper\"})\npublic class DataSourceConfig {\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 初始化mybatis sql数据源.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#34", "good_example_response": "```java\n    public SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException {\n        log.info(\">>> Start init datasource\");\n\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n        sqlSessionFactoryBean.setDataSource(dataSource);\n        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);\n        sqlSessionFactoryBean.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        sqlSessionFactoryBean.setMapperLocations(\n            new PathMatchingResourcePatternResolver().getResources(\"classpath:**/mapper/*.xml\"));\n        sqlSessionFactoryBean.setPlugins(new TableShardInterceptor());\n\n        log.info(\"<<< End init datasource\");\n        return sqlSessionFactoryBean;\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.datasource.config.DataSourceConfigTest.java", "extra_content": {"query": "初始化mybatis sql数据源", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/34.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/datasource/config/DataSourceConfig.java", "start_line": 23, "end_line": 36, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class OperateAuditManager {\n    public Page<OperateRecord> findAll(Long resourceId, ResourceType resourceType, Integer pageNum, Integer pageSize) throws WrongParameterException;\n    public void save(List<OperateRecord> updateEvents);\n    public <T> List<OperateRecord> getOperateRecords(T oldVo, T newVo, String operator,\n                                                     ResourceType resourceType, Long objectId);\n}\n\npublic class VmPoolDaoV2 {\n    public List<VmPoolDO> findAllByPoolIds(List<Long> poolIds);\n    public Integer batchUpdatePoolInfo(List<Long> poolIds, String dcsName);\n    public Integer countVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                List<String> zone);\n    public List<VmPoolDO> findVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                      List<String> zone, Integer pageNum, Integer pageSize);\n    public int countByPoolId(Long poolId);\n    public List<VmPoolDO> getDistinctDcsNamesAndDatabases(Zone zone);\n    public int batchInsertPoolInfo(List<VmPoolDO> vmPoolList);\n}\n\npublic class PageUtil {\n    public static <T> Page<T> buildPage(Pageable pageable, long count, Supplier<List<T>> contentSupplier);\n    public static Pair<Integer, Integer> checkPage(Integer pageNum, Integer pageSize) throws WrongParameterException;\n}\n```\n\nThe context above is:\n```java\n@Service\n@RequiredArgsConstructor\npublic class AgentPoolServiceImpl implements AgentPoolService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AgentPoolServiceImpl.class);\n\n    private final VmPoolDao vmPoolDao;\n\n    private final VmPoolDaoV2 vmPoolDaoV2;\n\n    private final IDcsInfoDao dcsInfoDao;\n\n    private final OperateAuditManager operateAuditManager;\n\n    @Override\n    @Transactional\n    public VmPoolDO updatePoolInfo(VmPoolDO vmPoolDO) throws Exception {\n        if (!checkVmPool(vmPoolDO)) {\n            String message = String.format(Locale.ROOT, \"input body error, vmPoolDO = {}\", vmPoolDO);\n            throw new WrongParameterException(message);\n        }\n        VmPoolDO oldVmPoolDO = getVmPoolDO(vmPoolDao.findOneByPoolId(vmPoolDO.getPoolId()).get());\n        VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n        LOGGER.info(\"updatePoolInfo: poolDO = {}\", poolDO);\n        operateAuditManager.save(operateAuditManager.getOperateRecords(oldVmPoolDO, poolDO\n                , DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, poolDO.getPoolId()));\n        return poolDO;\n    }\n\n    @Override\n    @Transactional\n    public List<VmPoolDO> batchUpdatePoolInfo(Map<String, Object> params) throws WrongParameterException {\n        List<Long> poolIds = getPoolIds(params);\n        String dcsName = getDcsName(params);\n        List<VmPoolDO> vmPoolDOS = vmPoolDaoV2.findAllByPoolIds(poolIds);\n        if (CollectionUtil.isEmpty(vmPoolDOS)) {\n            throw new WrongParameterException(\"DCS信息不存在!\");\n        }\n        Map<Zone, List<VmPoolDO>> zoneListMap = vmPoolDOS.stream()\n                .collect(Collectors.groupingBy(VmPoolDO::getZone));\n        if (zoneListMap.size() > 1) {\n            throw new WrongParameterException(\"暂不支持修改不同区域下的DCS!\");\n        }\n        Integer num = vmPoolDaoV2.batchUpdatePoolInfo(poolIds, dcsName);\n        LOGGER.info(\"batchUpdatePoolInfo success! ,num = {}\", num);\n        addOperationLog(dcsName, vmPoolDOS);\n        return vmPoolDaoV2.findAllByPoolIds(poolIds);\n    }\n\n    private void addOperationLog(String dcsName, List<VmPoolDO> vmPoolDOS) {\n        vmPoolDOS.forEach(vmPoolDO -> {\n            VmPoolDO vmPoolDONew = getVmPoolDO(vmPoolDO);\n            vmPoolDONew.setDcsName(dcsName);\n            List<OperateRecord> updateEvents = operateAuditManager.getOperateRecords(vmPoolDO, vmPoolDONew,\n                    DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, vmPoolDO.getPoolId());\n            operateAuditManager.save(updateEvents);\n        });\n    }\n\n    private static VmPoolDO getVmPoolDO(VmPoolDO vmPoolDO) {\n        VmPoolDO vmPoolDONew = new VmPoolDO();\n        vmPoolDONew.setId(vmPoolDO.getId());\n        vmPoolDONew.setPoolId(vmPoolDO.getPoolId());\n        vmPoolDONew.setName(vmPoolDO.getName());\n        vmPoolDONew.setType(vmPoolDO.getType());\n        vmPoolDONew.setZone(vmPoolDO.getZone());\n        vmPoolDONew.setDatabase(vmPoolDO.getDatabase());\n        vmPoolDONew.setDcsName(vmPoolDO.getDcsName());\n        return vmPoolDONew;\n    }\n\n    private static List<Long> getPoolIds(Map<String, Object> params) throws WrongParameterException {\n        if (params.get(\"poolIds\") instanceof List && CollectionUtil.isNotEmpty((List<Long>) params.get(\"poolIds\"))) {\n            return (List<Long>) params.get(\"poolIds\");\n        }\n        throw new WrongParameterException(\"请选择正确的DCS!\");\n    }\n\n    private static String getDcsName(Map<String, Object> params) throws WrongParameterException {\n        if (ObjectUtil.isNotEmpty(params.get(\"dcsName\"))) {\n            return (String) params.get(\"dcsName\");\n        }\n        throw new WrongParameterException(\"请确认要修改的dcsName!\");\n    }\n\n    private boolean checkVmPool(VmPoolDO vmPoolDO) {\n        if (vmPoolDO.getPoolId() == null\n                || StringUtils.isEmpty(vmPoolDO.getName())\n                || StringUtils.isEmpty(vmPoolDO.getDcsName())\n                || StringUtils.isEmpty(vmPoolDO.getType())\n                || vmPoolDO.getZone() == null\n                || vmPoolDO.getDatabase() == null) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public Page<VmPoolDO> getAllPoolInfo(String poolNames, List<Long> poolIds, String dcsName, String type, String zone,\n                                         Integer pageNum, Integer pageSize) throws Exception {\n        pageNum = PageUtil.checkPage(pageNum, pageSize).getLeft();\n        pageSize = PageUtil.checkPage(pageNum, pageSize).getRight();\n\n        Pageable pageable = PageRequest.of(pageNum - 1, pageSize);\n\n        List<String> names = splitString(poolNames);\n        List<String> dcsNames = splitString(dcsName);\n        List<String> types = splitString(type);\n        List<String> zones = splitString(zone);\n        Integer count = vmPoolDaoV2.countVmPools(names, poolIds, dcsNames, types, zones);\n        return PageUtil.buildPage(pageable, count, () -> vmPoolDaoV2.findVmPools(names, poolIds, dcsNames, types, zones,\n                (int) pageable.getOffset(), pageable.getPageSize()));\n    }\n\n    private static List<String> splitString(String str) {\n        if (StringUtils.isNotBlank(str)) {\n            return Arrays.stream(str.split(\",\")).collect(Collectors.toList());\n        }\n        return Collections.emptyList();\n    }\n\n    @Override\n    public VmPoolDO addPoolInfo(VmPoolDO vmPoolDO) throws Exception {\n        int count = vmPoolDaoV2.countByPoolId(vmPoolDO.getPoolId());\n        if (count > 0) {\n            throw new WrongParameterException(\"the pool_id must be unique ！\");\n        }\n        VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n        LOGGER.info(\"addPoolInfo: poolDO = {}\", poolDO);\n        return poolDO;\n    }\n\n    @Override\n    @Transactional\n    public void deletePoolInfo(Long poolId) {\n        try {\n            vmPoolDao.deleteByPoolId(poolId);\n            String message = String.format(\"delete pool success, poolId = %d\", poolId);\n            LOGGER.info(message);\n        } catch (Exception e) {\n            LOGGER.error(\"delete pool exception, e = \", e);\n        }\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "agentmanager_y00560175#38", "good_example_response": "```java\n    public List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException {\n        try {\n            List<VmPoolDO> namesAndDatabases = vmPoolDaoV2.getDistinctDcsNamesAndDatabases(Zone.fromValue(zone));\n            Map<String, List<Integer>> dcsMap =\n                    namesAndDatabases.stream()\n                            .collect(\n                                    Collectors.groupingBy(\n                                            VmPoolDO::getDcsName, // key extractor\n                                            Collectors.mapping(\n                                                    VmPoolDO::getDatabase, // value extractor\n                                                    Collectors.toList() // value collector\n                                            )));\n            List<DcsInfoDO> dcsInfoDOS = dcsInfoDao.findAllByZone(Zone.fromValue(zone));\n            List<PoolDcsInfo> poolDcsInfos = new ArrayList<>();\n            for (Map.Entry<String, List<Integer>> entry : dcsMap.entrySet()) {\n                String dcsName = entry.getKey();\n                Optional<DcsInfoDO> dcsOptional =\n                        dcsInfoDOS.stream().filter(dcsInfoDO -> dcsInfoDO.getName().equals(dcsName)).findFirst();\n                if (dcsOptional.isPresent()) {\n                    PoolDcsInfo poolDcsInfo = new PoolDcsInfo();\n                    poolDcsInfo.setDatabases(entry.getValue());\n                    poolDcsInfo.setDcsInfo(dcsOptional.get());\n                    poolDcsInfos.add(poolDcsInfo);\n                }\n            }\n            LOGGER.info(\"getPoolByZone: zone = {}, poolDcsInfos = {}\", zone, poolDcsInfos);\n            return poolDcsInfos;\n        } catch (Exception e) {\n            LOGGER.error(\"getPoolByZone exception, e = \", e);\n            throw new ServerException(e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.service.impl.AgentPoolServiceImplTest#test_getPoolByZone clean test", "extra_content": {"query": "根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/38.patch", "test_result": "fail", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/service/impl/AgentPoolServiceImpl.java", "start_line": 188, "end_line": 219, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class ClassLoaderUtils {\n    private ClassLoaderUtils() {\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    public static URL[] getURLs(ClassLoader classLoader) {\n        if (classLoader instanceof URLClassLoader) {\n            return ((URLClassLoader) classLoader).getURLs();\n        }\n        try {\n            Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                ucpField.setAccessible(true);\n                return null;\n            });\n            Object ucp = ucpField.get(classLoader);\n            Field pathField = ucp.getClass().getDeclaredField(\"path\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                pathField.setAccessible(true);\n                return null;\n            });\n            ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n            return path.toArray(new URL[0]);\n        } catch (Exception e) {\n            throw new DevsporeCicException(e);\n        }\n    }\n\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }\n\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }\n\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }\n\n    /**\n     * 动态加载类并执行指定方法\n     *\n     * @param loader 类加载器\n     * @param className 完整类名（如 \"com.example.Plugin\"）\n     * @param methodName 方法名（如 \"run\"）\n     * @param parameterTypes 方法参数类型数组（无参数传 null）\n     * @param args 方法参数值数组（无参数传 null）\n     * @return 方法执行结果（无返回值方法返回 null）\n     * @throws Exception 封装所有可能的反射异常\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 使用指定类加载器实现动态加载.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 重载方法：简化无参方法的调用\npublic static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#40", "good_example_response": "```java\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#loadAndInvoke clean test", "extra_content": {"query": "使用指定类加载器实现动态加载", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/40.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 97, "end_line": 118, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class BaseDao<T> {\n\n    /**\n     * 构建分页查询\n     *\n     * @param request 查询条件\n     * @return IPage<T>\n     */\n    public IPage<T> buildIPage(QueryRequest request) {\n        IPage<T> iPage = new Page<>();\n        iPage.setCurrent(request.getPageIndex());\n        iPage.setSize(request.getPageSize());\n        return iPage;\n    }\n\n    /**\n     * 构建查询条件，包括条件查询和按字段排序。\n     *\n     * @param request   查询条件\n     * @return QueryWrapper<T>\n     */\n    public QueryWrapper<T> buildQueryWrapper(QueryRequest request) {\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        buildCondition(request, queryWrapper);\n        buildOrder(request, queryWrapper, null);\n        return queryWrapper;\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 构建查询条件\n     * 因为in和notIn这两个条件特殊，在for循环外分别单独构建。对于同一列名，把所有的值放到一起。\n     *\n     * @param request      查询条件\n     * @param queryWrapper 构建对象\n     */\n    public void buildCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n        if (request.getSelectors() == null) {\n            return;\n        }\n        buildInCondition(request, queryWrapper);\n        buildNotInCondition(request, queryWrapper);\n        for (QueryRequest.Selector selector : request.getSelectors()) {\n            switch (selector.getFilterType()) {\n                case LIKE:\n                    queryWrapper.like(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case EQUAL:\n                    queryWrapper.eq(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case BIGGER:\n                    queryWrapper.gt(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case BIGGEREQUAL:\n                    queryWrapper.ge(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case LESS:\n                    queryWrapper.lt(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case LESSEQUAL:\n                    queryWrapper.le(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case ISNULL:\n                    queryWrapper.isNull(selector.getColumnName());\n                    break;\n                case ISNOTNULL:\n                    queryWrapper.isNotNull(selector.getColumnName());\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    /**\n     * 构建排序条件\n     *\n     * @param request      查询条件\n     * @param queryWrapper 构建对象\n     * @param uniqueKey    唯一主键（传入如果不为空，则自动添加一条根据默认主键升序方法）\n     */\n    public void buildOrder(QueryRequest request, QueryWrapper<T> queryWrapper, String uniqueKey) {\n        if (request.getSortOrder() != null && request.getSortColumn() != null) {\n            queryWrapper.orderBy(\n                    true, SortOrderEnum.ASC.equals(request.getSortOrder()), request.getSortColumn());\n        }\n\n        if (ObjectUtils.isNotEmpty(uniqueKey)) {\n            queryWrapper.orderBy(true, true, uniqueKey);\n        }\n    }\n\n    private void buildInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n        Map<String, List<QueryRequest.Selector>> inColumnMap =\n                getFilterColumnMap(request, FilterTypeEnum.IN);\n        inColumnMap.forEach(\n                (columnName, fieldSelector) ->\n                        queryWrapper.in(\n                                columnName,\n                                fieldSelector.stream()\n                                        .map(QueryRequest.Selector::getFilterValue)\n                                        .collect(Collectors.toList())));\n    }\n\n    private void buildNotInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n        Map<String, List<QueryRequest.Selector>> notInColumnMap =\n                getFilterColumnMap(request, FilterTypeEnum.NOTIN);\n        notInColumnMap.forEach(\n                (columnName, fieldSelector) ->\n                        queryWrapper.notIn(\n                                columnName,\n                                fieldSelector.stream()\n                                        .map(QueryRequest.Selector::getFilterValue)\n                                        .collect(Collectors.toList())));\n    }\n\n    /**\n     * 根据列名称分组\n     *\n     * @param request    查询条件\n     * @param filterType 过滤类型\n     * @return key是列名，value是List<RequestFieldSelector>的map\n     */\n    private Map<String, List<QueryRequest.Selector>> getFilterColumnMap(\n            QueryRequest request, FilterTypeEnum filterType) {\n        return request.getSelectors().stream()\n                .filter(selector -> filterType == selector.getFilterType())\n                .collect(Collectors.groupingBy(QueryRequest.Selector::getColumnName));\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 构建查询条件，包括条件查询和按字段排序。\npublic QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "DubheProbeOrchestration_z00806805#41", "good_example_response": "```java\n    public QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey) {\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        buildCondition(request, queryWrapper);\n        buildOrder(request, queryWrapper, uniqueKey);\n        return queryWrapper;\n    }\n```", "reward_command": "cd /docker/JavaRunProject/DubheProbeOrchestration_z00806805; export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/cbu/dubheprobeorchestration/dao/BaseDaoTest.java", "extra_content": {"query": "使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/diff/41.patch", "test_result": "pass", "file_path": "/DubheProbeOrchestration/src/main/java/com/huawei/cbu/dubheprobeorchestration/dao/BaseDao.java", "start_line": 54, "end_line": 60, "work_dir": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class FunctionalDemo {\n    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n\n    public static final int BATCH_SIZE = 1000;\n\n    public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n        map.put(\"AZ_FLAG\", \"AZ_CODE\");\n        map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n        map.put(\"REGION_FLAG\", \"REGION_CODE\");\n    };\n\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n```\n\nThe context below is:\n```java\n\n    public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n        orders.forEach(order -> handler.accept(order.getCustomer(), order));\n    }\n\n    /**\n     * 按比例奖励客户积分\n     *\n     * @param ratio ratio\n     * @return {@link UnaryOperator<Customer>}\n     */\n    public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n        return customer -> {\n            int currentPoints = customer.getPoints();\n            int bonus = (int) (currentPoints * ratio);\n            customer.addPoints(bonus);\n            return customer;\n        };\n    }\n\n    /**\n     * 合并订单\n     *\n     * @return {@link BinaryOperator<Order>}\n     */\n    public static BinaryOperator<Order> mergeOrderOperator() {\n        return (order1, order2) -> {\n            double totalAmount = order1.getAmount() + order2.getAmount();\n            int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n            if (order1.getOrderId().equals(order2.getOrderId())) {\n                return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n            } else {\n                return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n            }\n        };\n    }\n\n    /**\n     * 计算总积分：用户当前积分 + 订单积分\n     *\n     * @return {@link BiFunction<Customer, Order, Integer>}\n     */\n    public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n        return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n    }\n\n    public static Predicate<User> createNonAdminValidator() {\n        Predicate<User> isActive = User::isActive;\n        Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n        return isActive.and(isAdmin.negate());\n    }\n\n    public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n        return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n            .equals(host2.getHostName());\n    }\n\n    public static BinaryOperator<Customer> higherPointsOperator() {\n        return (customer1, customer2) -> {\n            if (customer1.getPoints() >= customer2.getPoints()) {\n                return customer1;\n            }\n            return customer2;\n        };\n    }\n\n    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n        return (customer, products) -> {\n            double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n            return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n        };\n    }\n\n    public static Predicate<JSONObject> validPredicate(String key) {\n        return item -> ObjectUtils.isNotEmpty(item.get(key));\n    }\n\n    public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n        return item -> ObjectUtils.equals(item.get(key), another.get(key));\n    }\n\n    public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n        Map<String, String> map = new HashMap<>();\n        if (mapping != null) {\n            mapping.accept(map);\n        }\n\n        return item -> {\n            if (map.containsKey(item)) {\n                item = map.get(item);\n            }\n\n            return item;\n        };\n    }\n\n    public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n        UnaryOperator<String> operator = mappingOperator(mapping);\n        if (StringUtils.isNotEmpty(vo.getAzCode())) {\n            params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n        } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n            params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n        } else {\n            params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n        }\n    }\n\n    public static BiFunction<Integer, Integer, Double> euclidean() {\n        return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    }\n\n    public static BiFunction<Integer, Integer, Double> manhattan() {\n        return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n    }\n}\n\nclass User {\n    private String username;\n\n    private List<String> roles;\n\n    private boolean active;\n\n    public User(String username, List<String> roles, boolean active) {\n        this.username = username;\n        this.roles = roles;\n        this.active = active;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public List<String> getRoles() {\n        return roles;\n    }\n\n    public boolean isActive() {\n        return active;\n    }\n}\n\nclass Customer {\n    private String id;\n\n    private int points;\n\n    public Customer(String id, int points) {\n        this.id = id;\n        this.points = points;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public int getPoints() {\n        return points;\n    }\n\n    public void addPoints(int points) {\n        this.points += points;\n    }\n}\n\nclass Order {\n    private Customer customer;\n\n    private String orderId;\n\n    private double amount;\n\n    private boolean isCompleted;\n\n    public Order(Customer customer, String orderId, double amount) {\n        this.customer = customer;\n        this.orderId = orderId;\n        this.amount = amount;\n        this.isCompleted = false;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public boolean isCompleted() {\n        return isCompleted;\n    }\n\n    public void markCompleted() {\n        isCompleted = true;\n    }\n}\n\nclass Product {\n    private String productId;\n\n    private int amount;\n\n    private double price;\n\n    public Product(String productId, int amount, double price) {\n        this.productId = productId;\n        this.amount = amount;\n        this.price = price;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n```\n\nThe new feature is 实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "agentmanager_y00560175#43", "good_example_response": "```java\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#testBatchUpdateWithMultipleBatches clean test", "extra_content": {"query": "实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/43.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 35, "end_line": 49, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class FunctionalDemo {\n    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n\n    public static final int BATCH_SIZE = 1000;\n\n    public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n        map.put(\"AZ_FLAG\", \"AZ_CODE\");\n        map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n        map.put(\"REGION_FLAG\", \"REGION_CODE\");\n    };\n\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n\n    public static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer) {\n        int totalSize = list.size();\n        LOGGER.info(\"start to handle list, total size: {}\", totalSize);\n        // 计算需要分成多少批\n        int batchCount = (totalSize + BATCH_SIZE - 1) / BATCH_SIZE;\n        for (int i = 0; i < batchCount; i++) {\n            int startIndex = i * BATCH_SIZE;\n            int endIndex = Math.min((i + 1) * BATCH_SIZE, totalSize);\n            List<E> batch = list.subList(startIndex, endIndex);\n            // 处理batch\n            consumer.accept(batch);\n            LOGGER.debug(\"updated size: {}\", endIndex);\n        }\n        LOGGER.info(\"finish to handle list\");\n    }\n\n    public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n        orders.forEach(order -> handler.accept(order.getCustomer(), order));\n    }\n\n    /**\n     * 按比例奖励客户积分\n     *\n     * @param ratio ratio\n     * @return {@link UnaryOperator<Customer>}\n     */\n    public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n        return customer -> {\n            int currentPoints = customer.getPoints();\n            int bonus = (int) (currentPoints * ratio);\n            customer.addPoints(bonus);\n            return customer;\n        };\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 计算总积分：用户当前积分 + 订单积分\n     *\n     * @return {@link BiFunction<Customer, Order, Integer>}\n     */\n    public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n        return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n    }\n\n    public static Predicate<User> createNonAdminValidator() {\n        Predicate<User> isActive = User::isActive;\n        Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n        return isActive.and(isAdmin.negate());\n    }\n\n    public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n        return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n            .equals(host2.getHostName());\n    }\n\n    public static BinaryOperator<Customer> higherPointsOperator() {\n        return (customer1, customer2) -> {\n            if (customer1.getPoints() >= customer2.getPoints()) {\n                return customer1;\n            }\n            return customer2;\n        };\n    }\n\n    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n        return (customer, products) -> {\n            double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n            return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n        };\n    }\n\n    public static Predicate<JSONObject> validPredicate(String key) {\n        return item -> ObjectUtils.isNotEmpty(item.get(key));\n    }\n\n    public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n        return item -> ObjectUtils.equals(item.get(key), another.get(key));\n    }\n\n    public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n        Map<String, String> map = new HashMap<>();\n        if (mapping != null) {\n            mapping.accept(map);\n        }\n\n        return item -> {\n            if (map.containsKey(item)) {\n                item = map.get(item);\n            }\n\n            return item;\n        };\n    }\n\n    public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n        UnaryOperator<String> operator = mappingOperator(mapping);\n        if (StringUtils.isNotEmpty(vo.getAzCode())) {\n            params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n        } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n            params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n        } else {\n            params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n        }\n    }\n\n    public static BiFunction<Integer, Integer, Double> euclidean() {\n        return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    }\n\n    public static BiFunction<Integer, Integer, Double> manhattan() {\n        return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n    }\n}\n\nclass User {\n    private String username;\n\n    private List<String> roles;\n\n    private boolean active;\n\n    public User(String username, List<String> roles, boolean active) {\n        this.username = username;\n        this.roles = roles;\n        this.active = active;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public List<String> getRoles() {\n        return roles;\n    }\n\n    public boolean isActive() {\n        return active;\n    }\n}\n\nclass Customer {\n    private String id;\n\n    private int points;\n\n    public Customer(String id, int points) {\n        this.id = id;\n        this.points = points;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public int getPoints() {\n        return points;\n    }\n\n    public void addPoints(int points) {\n        this.points += points;\n    }\n}\n\nclass Order {\n    private Customer customer;\n\n    private String orderId;\n\n    private double amount;\n\n    private boolean isCompleted;\n\n    public Order(Customer customer, String orderId, double amount) {\n        this.customer = customer;\n        this.orderId = orderId;\n        this.amount = amount;\n        this.isCompleted = false;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public boolean isCompleted() {\n        return isCompleted;\n    }\n\n    public void markCompleted() {\n        isCompleted = true;\n    }\n}\n\nclass Product {\n    private String productId;\n\n    private int amount;\n\n    private double price;\n\n    public Product(String productId, int amount, double price) {\n        this.productId = productId;\n        this.amount = amount;\n        this.price = price;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n```\n\nThe new feature is 返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 合并订单\npublic static BinaryOperator<Order> mergeOrderOperator()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "agentmanager_y00560175#46", "good_example_response": "```java\n    public static BinaryOperator<Order> mergeOrderOperator() {\n        return (order1, order2) -> {\n            double totalAmount = order1.getAmount() + order2.getAmount();\n            int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n            if (order1.getOrderId().equals(order2.getOrderId())) {\n                return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n            } else {\n                return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n            }\n        };\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#test_mergeOrderOperator clean test", "extra_content": {"query": "返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/46.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 90, "end_line": 101, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class UrlClassLoaderUtils {\n```\n\nThe context below is:\n```java\n\n}\n```\n\nThe new feature is 加载指定路径下的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 动态加载类并执行指定方法\npublic static Class<?> loadClassByPath(String[] paths, String className) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#48", "good_example_response": "```java\n    public static Class<?> loadClassByPath(String[] paths, String className) throws Exception {\n\n        // 1. 将路径转换为 URL 对象（适配不同操作系统）\n        URL[] urls = new URL[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            String normalizedPath = paths[i].replace(\"/\", File.separator);\n            urls[i] = new File(normalizedPath).toURI().toURL();\n        }\n        URLClassLoader loader = new URLClassLoader(urls);\n\n        // 2. 加载目标类\n        return loader.loadClass(className);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.UrlClassLoaderUtilsTest clean test", "extra_content": {"query": "加载指定路径下的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/48.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/UrlClassLoaderUtils.java", "start_line": 18, "end_line": 31, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class UniSystemRepository {\n    public List<UniSystem> listUniSystem(Integer offset, Integer limit); /* 分页查询目标系统列表 */\n    public int countUniSystem(); /* 查询目标系统数量 */\n    public List<UniSystem> listSystemByCodes(List<String> systemCodes); /* 根据目标系统编码列表查询目标系统列表 */\n    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode); /* 根据作业空间编码查询关联的目标系统列表 */\n    public PageInfo<UniSystem> pageByCriteria(UniSystemCriteria uniSystemCriteria, int pageNum, int pageSize,\n        Boolean isQueryTotal); /* GetUniSystems Method */\n    public UniSystem getById(Long uniSystemId); /* GetUniSystemById Method */\n    public int updateByIds(List<UniSystem> uniSystemList); /* UpdateUniSystemByIds Method */\n    public int deleteAllById(List<Long> uniSystemIds); /* DeleteUniSystemByIds Method */\n    public int deleteById(Long uniSystemId); /* DeleteUniSystemById Method */\n    public int batchSave(List<UniSystem> uniSystemList); /* AddUniSystems Method */\n    public int save(UniSystem uniSystem); /* AddUniSystem Method */\n}\n```\n\nThe context above is:\n```java\n@Slf4j\n@Service\npublic class UniSystemService {\n    @Autowired\n    private UniSystemRepository uniSystemRepository;\n\n    @Autowired\n    private CloudDragonProjectService cloudDragonProjectService;\n\n    /**\n     * 分页查询目标系统列表\n     *\n     * @param offset 偏移量\n     * @param limit 分页大小\n     * @return 目标系统列表\n     */\n    public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n        int total = uniSystemRepository.countUniSystem();\n        List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n        List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n        return new PageResponseV2<>(total, listResp);\n    }\n\n    /**\n     * 根据作业空间编码查询关联的目标系统列表\n     *\n     * @param uniWorkspaceCode 作业空间编码\n     * @return 目标系统列表\n     */\n    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode) {\n        return uniSystemRepository.listUniSystemByUniWorkspaceCode(uniWorkspaceCode);\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 根据云龙群组id查询对应作业空间关联的目标系统\npublic List<UniSystemResp> listUniSystemByGroupId(String groupId)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "projectTree_l00619365#56", "good_example_response": "```java\n    public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n        int total = uniSystemRepository.countUniSystem();\n        List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n        List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n        return new PageResponseV2<>(total, listResp);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true clean test -f service/pom.xml -Dtest=com.huawei.clouddragon.uniworkspace.service.UniSystemServiceTest", "extra_content": {"query": "分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换", "diff_path": "/docker/JavaRunProject/projectTree_l00619365/diff/56.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/clouddragon/uniworkspace/service/UniSystemService.java", "start_line": 46, "end_line": 52, "work_dir": "/docker/JavaRunProject/projectTree_l00619365/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ErrorMessage {\n    public void setSuggestion(String suggestion);\n    public String getSuggestion();\n    public void setExplain(String explain);\n    public String getExplain();\n    public void setErrorMessage(String errorMessage);\n    public String getErrorMessage();\n    public void setErrorCode(String errorCode);\n    public String getErrorCode();\n}\n```\n\nThe context above is:\n```java\npublic abstract class AbstractRemoteCallService {\n    protected static final Logger LOG = LoggerFactory.getLogger(AbstractRemoteCallService.class);\n\n    @Autowired\n    private ServiceAvailableDetectConfig serviceAvailableDetectService;\n\n    private LubanRestTemplate lubanRestTemplate;\n\n    private String server;\n\n    private int connectTimeout = 5000;\n\n    private int readTimeout = 240000;\n\n    private int connectionRequestTimeout = 20000;\n\n    protected LubanRestTemplate getLubanRestTemplate() {\n        if (lubanRestTemplate != null) {\n            return lubanRestTemplate;\n        }\n        synchronized (this) {\n            if (lubanRestTemplate != null) {\n                return lubanRestTemplate;\n            }\n            lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n        }\n        return lubanRestTemplate;\n    }\n\n    protected String getServer() {\n        return server;\n    }\n\n    public void setServer(String server) {\n        this.server = server;\n    }\n\n    protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n\n    /**\n     * 发送post请求，并且获取结果转换成对象 <br>\n     *\n     * @param url\n     * @param request\n     * @param responseType\n     * @return\n     * @author y00438022\n     * @since 2019年6月28日\n     */\n    protected <T> T postForObject(String url, Object request, Class<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n        ResponseEntity<String> response = null;\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, String.class);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        String result = response.getBody();\n        return JSON.parseObject(result, responseType);\n\n    }\n\n    /**\n     * 新的get方法\n     *\n     * @param url\n     * @param responseType\n     * @param <T>\n     * @return\n     * @author lwx521892\n     * @since 2019年12月19日\n     */\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```\n\nThe context below is:\n```java\n\n    public int getConnectTimeout() {\n        return connectTimeout;\n    }\n\n    public void setConnectTimeout(int connectTimeout) {\n        this.connectTimeout = connectTimeout;\n    }\n\n    public int getReadTimeout() {\n        return readTimeout;\n    }\n\n    public void setReadTimeout(int readTimeout) {\n        this.readTimeout = readTimeout;\n    }\n\n    public int getConnectionRequestTimeout() {\n        return connectionRequestTimeout;\n    }\n\n    public void setConnectionRequestTimeout(int connectionRequestTimeout) {\n        this.connectionRequestTimeout = connectionRequestTimeout;\n    }\n\n}\n```\n\nThe new feature is 通过spring RestTemplate发送get请求.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送Get请求，并且获取结果转换成对象 <br>\nprotected <T> T getForObject(String url, Class<T> responseType)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "lubanjob_f00563108#61", "good_example_response": "```java\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/lubanjob_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.luban.cmdb.client.config.AbstractRemoteCallServiceTest.java#test_getForObject_should_return_not_null_when_condition", "extra_content": {"query": "通过spring RestTemplate发送get请求", "diff_path": "/docker/JavaRunProject/lubanjob_f00563108/diff/61.patch", "test_result": "pass", "file_path": "/common/cmdb-client/src/main/java/com/huawei/luban/cmdb/client/config/AbstractRemoteCallService.java", "start_line": 189, "end_line": 234, "work_dir": "/docker/JavaRunProject/lubanjob_f00563108/"}}