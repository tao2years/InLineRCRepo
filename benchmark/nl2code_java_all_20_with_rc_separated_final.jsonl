{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @ConditionalOnProperty(prefix = \"apitest.dynamicglobalvariable\", name = \"storage\", havingValue = \"redis\")\n  2: @Service\n  3: public class RedisDynamicGlobalVariableService implements DynamicGlobalVariableService {\n```\n\nThe context below is:\n```java\n  5: @Value(\"${envcommunication.amountLimitPerTask:100}\")\n  6: private int amountLimitPerTask;\n  7: @Autowired\n  8: private RedisTemplate<String, String> redisTemplate;\n  9: private String keyPrefix = \"APITestExecuteDaemonService::dynamic-global-variable::\";\n 10: @Override\n 11: public void put(String taskId, String key, String value) {\n 12: BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n 13: if (boundHashOperations.get(key) == null && boundHashOperations.size() >= amountLimitPerTask) {\n 14: throwLimitExceedException(amountLimitPerTask);\n 15: }\n 16: boundHashOperations.put(key, value);\n 17: boundHashOperations.expire(Duration.ofSeconds(ttlSeconds));\n 18: }\n 19: @Override\n 20: public long remove(String taskId, String key) {\n 21: Long ret = redisTemplate.boundHashOps(prefix(taskId)).delete(key);\n 22: if (ret == null) {\n 23: return 0;\n 24: }\n 25: return ret;\n 26: }\n 27: @Override\n 28: public void removeAll(String taskId) {\n 29: redisTemplate.delete(prefix(taskId));\n 30: }\n 31: @Override\n 32: public Map<String, String> listAll(String taskId) {\n 33: Map<String, String> valMap = new HashMap<>();\n 34: // 分页获取所有动态变量, 当数据量较大时, 按照20对K-V为一组分批次获取\n 35: try (Cursor<Map.Entry<Object, Object>> cursor = redisTemplate.opsForHash()\n 36: .scan(prefix(taskId), ScanOptions.scanOptions().count(20).build())) {\n 37: while (cursor.hasNext()) {\n 38: addToValMap(valMap, cursor.next());\n 39: }\n 40: return valMap;\n 41: }\n 42: }\n 43: /**\n 44: * 添加元素至Map\n 45: */\n 46: public void addToValMap(Map<String, String> valMap, Map.Entry<Object, Object> entry) {\n 47: String key = entry.getKey() == null ? \"\" : entry.getKey().toString();\n 48: String value = entry.getValue() == null ? \"\" : entry.getValue().toString();\n 49: valMap.put(key, value);\n 50: }\n 51: private String prefix(String taskId) {\n 52: return keyPrefix + taskId;\n 53: }\n 54: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -13,1 +13,0 @@\n+ 13:     private String keyPrefix = \"APITestExecuteDaemonService::dynamic-global-variable::\";\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -19,8 +19,4 @@\n   19:     public void put(String taskId, String key, String value) {\n+ 20:         BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n+ 21:         if (boundHashOperations.get(key) == null && boundHashOperations.size() >= amountLimitPerTask) {\n+ 22:             throwLimitExceedException(amountLimitPerTask);\n+ 23:         }\n+ 24:         boundHashOperations.put(key, value);\n+ 25:         boundHashOperations.expire(Duration.ofSeconds(ttlSeconds));\n- 20:         redisTemplate.opsForHash().put(prefix(taskId), key, value);\n- 21:         // TODO: consider TTL; will migrate to bound ops later\n   26:     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -19,8 +19,5 @@\n   19:     public void put(String taskId, String key, String value) {\n   20:         BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n+ 21:         if (boundHashOperations.get(key) == null && boundHashOperations.size() >= amountLimitPerTask) {\n+ 22:             throwLimitExceedException(amountLimitPerTask);\n+ 23:         }\n- 21:         // TODO: add per-task limit check in a follow-up change\n   24:         boundHashOperations.put(key, value);\n   25:         boundHashOperations.expire(Duration.ofSeconds(ttlSeconds));\n   26:     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 使用RedisTemplate实现taskid前缀的hash查询.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic String get(String taskId, String key)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "APITestDesign-l00617778#10", "good_example_response": "```java\n    public String get(String taskId, String key) {\n        BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n        return boundHashOperations.get(key);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6   &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloudtest/apitest/executedaemonservice/webcommon/dynamicglobalvariable/controller/DynamicGlobalVariableControllerTest.java#testGetKeyNotExist -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "使用RedisTemplate实现taskid前缀的hash查询", "diff_path": "/docker/JavaRunProject/APITestDesign-l00617778/diff/10.patch", "test_result": "pass", "file_path": "/dynamic-global-variable/src/main/java/com/huawei/cloudtest/apitest/executedaemonservice/webcommon/dynamicglobalvariable/service/RedisDynamicGlobalVariableService.java", "start_line": 39, "end_line": 43, "work_dir": "/docker/JavaRunProject/APITestDesign-l00617778/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3: private ClassLoaderUtils() {\n  4: }\n```\n\nThe context below is:\n```java\n  6: public static URL[] getURLs(ClassLoader classLoader) {\n  7: if (classLoader instanceof URLClassLoader) {\n  8: return ((URLClassLoader) classLoader).getURLs();\n  9: }\n 10: try {\n 11: Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 12: AccessController.doPrivileged((PrivilegedAction) () -> {\n 13: ucpField.setAccessible(true);\n 14: return null;\n 15: });\n 16: Object ucp = ucpField.get(classLoader);\n 17: Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 18: AccessController.doPrivileged((PrivilegedAction) () -> {\n 19: pathField.setAccessible(true);\n 20: return null;\n 21: });\n 22: ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 23: return path.toArray(new URL[0]);\n 24: } catch (Exception e) {\n 25: throw new DevsporeCicException(e);\n 26: }\n 27: }\n 28: public static void loadClassWithApplicationLoader(String className) {\n 29: try {\n 30: ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n 31: log.info(\"Application ClassLoader: {}\", appClassLoader);\n 32: Class<?> loadedClass = appClassLoader.loadClass(className);\n 33: log.info(\"Loaded Class: {}\", loadedClass.getName());\n 34: } catch (ClassNotFoundException e) {\n 35: log.error(\"load error: {}\", e.getMessage());\n 36: }\n 37: }\n 38: public static URL[] getExtensionClassLoaderUrls() {\n 39: ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n 40: ClassLoader extensionClassLoader = systemClassLoader.getParent();\n 41: if (extensionClassLoader instanceof URLClassLoader) {\n 42: URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n 43: return urlClassLoader.getURLs();\n 44: }\n 45: return null;\n 46: }\n 47: /**\n 48: * 动态加载类并执行指定方法\n 49: *\n 50: * @param loader 类加载器\n 51: * @param className 完整类名（如 \"com.example.Plugin\"）\n 52: * @param methodName 方法名（如 \"run\"）\n 53: * @param parameterTypes 方法参数类型数组（无参数传 null）\n 54: * @param args 方法参数值数组（无参数传 null）\n 55: * @return 方法执行结果（无返回值方法返回 null）\n 56: * @throws Exception 封装所有可能的反射异常\n 57: */\n 58: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 59: Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 60: // 1. 加载目标类\n 61: Class<?> clazz = loader.loadClass(className);\n 62: // 2. 实例化对象（使用无参构造函数）\n 63: Constructor<?> constructor = clazz.getDeclaredConstructor();\n 64: constructor.setAccessible(true); // 允许调用私有构造方法\n 65: Object instance = constructor.newInstance();\n 66: // 3. 获取并执行方法\n 67: Method method = clazz.getMethod(methodName, parameterTypes);\n 68: // 判断是否为静态方法\n 69: if (Modifier.isStatic(method.getModifiers())) {\n 70: return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 71: } else {\n 72: // 非静态方法\n 73: return returnType.cast(method.invoke(instance, args));\n 74: }\n 75: }\n 76: /**\n 77: * 重载方法：简化无参方法的调用\n 78: */\n 79: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n 80: throws Exception {\n 81: Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n 82: return returnType.cast(result);\n 83: }\n 84: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -1,1 +1,0 @@\n+  1: @Slf4j\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -50,10 +50,0 @@\n+ 50:     public static URL[] getExtensionClassLoaderUrls() {\n+ 51:         ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n+ 52:         ClassLoader extensionClassLoader = systemClassLoader.getParent();\n+ 53: \n+ 54:         if (extensionClassLoader instanceof URLClassLoader) {\n+ 55:             URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n+ 56:             return urlClassLoader.getURLs();\n+ 57:         }\n+ 58:         return null;\n+ 59:     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -30,11 +30,0 @@\n+ 30:     public static void loadClassWithApplicationLoader(String className) {\n+ 31:         try {\n+ 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n+ 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n+ 34: \n+ 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n+ 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n+ 37:         } catch (ClassNotFoundException e) {\n+ 38:             log.error(\"load error: {}\", e.getMessage());\n+ 39:         }\n+ 40:     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 判断给定类是否为Bootstrap ClassLoader.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static boolean isBootstrapClassLoader(String className)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#21", "good_example_response": "```java\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testIsBootstrapClassLoader clean test", "extra_content": {"query": "判断给定类是否为Bootstrap ClassLoader", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/21.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 65, "end_line": 73, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3: private ClassLoaderUtils() {\n  4: }\n```\n\nThe context below is:\n```java\n  6: public static URL[] getURLs(ClassLoader classLoader) {\n  7: if (classLoader instanceof URLClassLoader) {\n  8: return ((URLClassLoader) classLoader).getURLs();\n  9: }\n 10: try {\n 11: Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 12: AccessController.doPrivileged((PrivilegedAction) () -> {\n 13: ucpField.setAccessible(true);\n 14: return null;\n 15: });\n 16: Object ucp = ucpField.get(classLoader);\n 17: Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 18: AccessController.doPrivileged((PrivilegedAction) () -> {\n 19: pathField.setAccessible(true);\n 20: return null;\n 21: });\n 22: ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 23: return path.toArray(new URL[0]);\n 24: } catch (Exception e) {\n 25: throw new DevsporeCicException(e);\n 26: }\n 27: }\n 28: public static void loadClassWithApplicationLoader(String className) {\n 29: try {\n 30: ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n 31: log.info(\"Application ClassLoader: {}\", appClassLoader);\n 32: Class<?> loadedClass = appClassLoader.loadClass(className);\n 33: log.info(\"Loaded Class: {}\", loadedClass.getName());\n 34: } catch (ClassNotFoundException e) {\n 35: log.error(\"load error: {}\", e.getMessage());\n 36: }\n 37: }\n 38: public static boolean isBootstrapClassLoader(String className) {\n 39: try {\n 40: Class<?> langClass = Class.forName(className);\n 41: return langClass.getClassLoader() == null;\n 42: } catch (ClassNotFoundException e) {\n 43: log.error(\"load error: {}\", e.getMessage());\n 44: }\n 45: return false;\n 46: }\n 47: /**\n 48: * 动态加载类并执行指定方法\n 49: *\n 50: * @param loader 类加载器\n 51: * @param className 完整类名（如 \"com.example.Plugin\"）\n 52: * @param methodName 方法名（如 \"run\"）\n 53: * @param parameterTypes 方法参数类型数组（无参数传 null）\n 54: * @param args 方法参数值数组（无参数传 null）\n 55: * @return 方法执行结果（无返回值方法返回 null）\n 56: * @throws Exception 封装所有可能的反射异常\n 57: */\n 58: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 59: Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 60: // 1. 加载目标类\n 61: Class<?> clazz = loader.loadClass(className);\n 62: // 2. 实例化对象（使用无参构造函数）\n 63: Constructor<?> constructor = clazz.getDeclaredConstructor();\n 64: constructor.setAccessible(true); // 允许调用私有构造方法\n 65: Object instance = constructor.newInstance();\n 66: // 3. 获取并执行方法\n 67: Method method = clazz.getMethod(methodName, parameterTypes);\n 68: // 判断是否为静态方法\n 69: if (Modifier.isStatic(method.getModifiers())) {\n 70: return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 71: } else {\n 72: // 非静态方法\n 73: return returnType.cast(method.invoke(instance, args));\n 74: }\n 75: }\n 76: /**\n 77: * 重载方法：简化无参方法的调用\n 78: */\n 79: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n 80: throws Exception {\n 81: Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n 82: return returnType.cast(result);\n 83: }\n 84: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -1,1 +1,0 @@\n+  1: @Slf4j\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -6,23 +6,0 @@\n+  6:     @SuppressWarnings({\"unchecked\"})\n+  7:     public static URL[] getURLs(ClassLoader classLoader) {\n+  8:         if (classLoader instanceof URLClassLoader) {\n+  9:             return ((URLClassLoader) classLoader).getURLs();\n+ 10:         }\n+ 11:         try {\n+ 12:             Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n+ 13:             AccessController.doPrivileged((PrivilegedAction) () -> {\n+ 14:                 ucpField.setAccessible(true);\n+ 15:                 return null;\n+ 16:             });\n+ 17:             Object ucp = ucpField.get(classLoader);\n+ 18:             Field pathField = ucp.getClass().getDeclaredField(\"path\");\n+ 19:             AccessController.doPrivileged((PrivilegedAction) () -> {\n+ 20:                 pathField.setAccessible(true);\n+ 21:                 return null;\n+ 22:             });\n+ 23:             ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n+ 24:             return path.toArray(new URL[0]);\n+ 25:         } catch (Exception e) {\n+ 26:             throw new DevsporeCicException(e);\n+ 27:         }\n+ 28:     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -30,11 +30,0 @@\n+ 30:     public static void loadClassWithApplicationLoader(String className) {\n+ 31:         try {\n+ 32:             ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n+ 33:             log.info(\"Application ClassLoader: {}\", appClassLoader);\n+ 34: \n+ 35:             Class<?> loadedClass = appClassLoader.loadClass(className);\n+ 36:             log.info(\"Loaded Class: {}\", loadedClass.getName());\n+ 37:         } catch (ClassNotFoundException e) {\n+ 38:             log.error(\"load error: {}\", e.getMessage());\n+ 39:         }\n+ 40:     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 获取Extension ClassLoader加载路径.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static URL[] getExtensionClassLoaderUrls()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#22", "good_example_response": "```java\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testGetExtensionClassLoaderUrls clean test", "extra_content": {"query": "获取Extension ClassLoader加载路径", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/22.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 75, "end_line": 84, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3: private ClassLoaderUtils() {\n  4: }\n```\n\nThe context below is:\n```java\n  6: public static URL[] getURLs(ClassLoader classLoader) {\n  7: if (classLoader instanceof URLClassLoader) {\n  8: return ((URLClassLoader) classLoader).getURLs();\n  9: }\n 10: try {\n 11: Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 12: AccessController.doPrivileged((PrivilegedAction) () -> {\n 13: ucpField.setAccessible(true);\n 14: return null;\n 15: });\n 16: Object ucp = ucpField.get(classLoader);\n 17: Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 18: AccessController.doPrivileged((PrivilegedAction) () -> {\n 19: pathField.setAccessible(true);\n 20: return null;\n 21: });\n 22: ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 23: return path.toArray(new URL[0]);\n 24: } catch (Exception e) {\n 25: throw new DevsporeCicException(e);\n 26: }\n 27: }\n 28: public static boolean isBootstrapClassLoader(String className) {\n 29: try {\n 30: Class<?> langClass = Class.forName(className);\n 31: return langClass.getClassLoader() == null;\n 32: } catch (ClassNotFoundException e) {\n 33: log.error(\"load error: {}\", e.getMessage());\n 34: }\n 35: return false;\n 36: }\n 37: public static URL[] getExtensionClassLoaderUrls() {\n 38: ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n 39: ClassLoader extensionClassLoader = systemClassLoader.getParent();\n 40: if (extensionClassLoader instanceof URLClassLoader) {\n 41: URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n 42: return urlClassLoader.getURLs();\n 43: }\n 44: return null;\n 45: }\n 46: /**\n 47: * 动态加载类并执行指定方法\n 48: *\n 49: * @param loader 类加载器\n 50: * @param className 完整类名（如 \"com.example.Plugin\"）\n 51: * @param methodName 方法名（如 \"run\"）\n 52: * @param parameterTypes 方法参数类型数组（无参数传 null）\n 53: * @param args 方法参数值数组（无参数传 null）\n 54: * @return 方法执行结果（无返回值方法返回 null）\n 55: * @throws Exception 封装所有可能的反射异常\n 56: */\n 57: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 58: Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 59: // 1. 加载目标类\n 60: Class<?> clazz = loader.loadClass(className);\n 61: // 2. 实例化对象（使用无参构造函数）\n 62: Constructor<?> constructor = clazz.getDeclaredConstructor();\n 63: constructor.setAccessible(true); // 允许调用私有构造方法\n 64: Object instance = constructor.newInstance();\n 65: // 3. 获取并执行方法\n 66: Method method = clazz.getMethod(methodName, parameterTypes);\n 67: // 判断是否为静态方法\n 68: if (Modifier.isStatic(method.getModifiers())) {\n 69: return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 70: } else {\n 71: // 非静态方法\n 72: return returnType.cast(method.invoke(instance, args));\n 73: }\n 74: }\n 75: /**\n 76: * 重载方法：简化无参方法的调用\n 77: */\n 78: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n 79: throws Exception {\n 80: Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n 81: return returnType.cast(result);\n 82: }\n 83: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -40,9 +40,0 @@\n+ 40: public static boolean isBootstrapClassLoader(String className) {\n+ 41:         try {\n+ 42:             Class<?> langClass = Class.forName(className);\n+ 43:             return langClass.getClassLoader() == null;\n+ 44:         } catch (ClassNotFoundException e) {\n+ 45:             log.error(\"load error: {}\", e.getMessage());\n+ 46:         }\n+ 47:         return false;\n+ 48:     }\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -50,10 +50,0 @@\n+ 50:     public static URL[] getExtensionClassLoaderUrls() {\n+ 51:         ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n+ 52:         ClassLoader extensionClassLoader = systemClassLoader.getParent();\n+ 53: \n+ 54:         if (extensionClassLoader instanceof URLClassLoader) {\n+ 55:             URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n+ 56:             return urlClassLoader.getURLs();\n+ 57:         }\n+ 58:         return null;\n+ 59:     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -1,1 +1,0 @@\n+  1: @Slf4j\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 使用系统的Application ClassLoader来加载一个指定的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static void loadClassWithApplicationLoader(String className)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#4", "good_example_response": "```java\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testLoadClassWithApplicationLoader clean test", "extra_content": {"query": "使用系统的Application ClassLoader来加载一个指定的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/4.patch", "test_result": "fail", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 53, "end_line": 63, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RedisRecoveryTimer {\n    public static void markRedisRecovery(); /* 提供外部使用接口，标记redis已恢复，监控组件尝试重启工厂以达到恢复连接的效果 */\n    public static void addInstance(WrappedRedisConnectionFactory factory, RedisMessageListenerContainer container); /* 添加待监控的连接工厂和redis消息监听容器,将其维护到监控集合 */\n}\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class RedisConnectFactoryBuilder {\n  3: /**\n  4: * redis模式——standalone\n  5: */\n  6: public static final String REDIS_MODE_STANDALONE = \"standalone\";\n```\n\nThe context below is:\n```java\n  8: * redis模式——cluster\n  9: */\n 10: public static final String REDIS_MODE_CLUSTER = \"cluster\";\n 11: /**\n 12: * redis模式——sentinel\n 13: */\n 14: public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n 15: /**\n 16: * redis客户端类型——jedis\n 17: */\n 18: public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n 19: /**\n 20: * redis客户端类型——lettuce\n 21: */\n 22: public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n 23: private RedisConnectFactoryBuilder() {\n 24: }\n 25: /**\n 26: * 根据config构建响应的redis连接工厂\n 27: *\n 28: * @param redisConfig redis配置项\n 29: * @return redis连接工厂\n 30: */\n 31: private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n 32: JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n 33: .connectTimeout(redisConfig.getConnectTimeout())\n 34: .readTimeout(redisConfig.getReadTimeout())\n 35: .usePooling()\n 36: .poolConfig(redisConfig.getPool())\n 37: .build();\n 38: switch (redisConfig.getRedisMode()) {\n 39: case REDIS_MODE_STANDALONE -> {\n 40: RedisStandaloneConfiguration standaloneConfiguration =\n 41: createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n 42: return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n 43: }\n 44: case REDIS_MODE_CLUSTER -> {\n 45: RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n 46: return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n 47: }\n 48: case REDIS_MODE_SENTINEL -> {\n 49: RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n 50: return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n 51: }\n 52: default ->\n 53: throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n 54: }\n 55: }\n 56: public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n 57: return switch (redisConfig.getClientType()) {\n 58: case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n 59: case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n 60: default ->\n 61: throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n 62: };\n 63: }\n 64: private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n 65: String host) {\n 66: RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n 67: configuration.setPassword(redisConfig.getPassword());\n 68: String[] items = host.trim().split(\":\");\n 69: configuration.setHostName(items[0].trim());\n 70: configuration.setPort(Integer.parseInt(items[1].trim()));\n 71: configuration.setDatabase(redisConfig.getDatabase());\n 72: return configuration;\n 73: }\n 74: private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n 75: RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n 76: List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n 77: String[] items = host.split(\":\");\n 78: return new RedisNode(items[0], Integer.parseInt(items[1]));\n 79: }).collect(Collectors.toList());\n 80: configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n 81: configuration.setClusterNodes(redisNodes);\n 82: configuration.setPassword(redisConfig.getPassword());\n 83: return configuration;\n 84: }\n 85: private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n 86: Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n 87: RedisSentinelConfiguration configuration =\n 88: new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n 89: configuration.setPassword(redisConfig.getPassword());\n 90: return configuration;\n 91: }\n 92: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -11,1 +11,0 @@\n+ 11:     public static final String REDIS_MODE_CLUSTER = \"cluster\";\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -16,1 +16,0 @@\n+ 16:     public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -63,4 +63,0 @@\n+ 63:             case REDIS_MODE_SENTINEL -> {\n+ 64:                 RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n+ 65:                 return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n+ 66:             }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprivate static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "DevUC-common_x00636091#6", "good_example_response": "```java\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn clean test -pl jin-cache", "extra_content": {"query": "根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory", "diff_path": "/docker/JavaRunProject/DevUC-common_x00636091/diff/6.patch", "test_result": "pass", "file_path": "/jin-cache/src/main/java/com/huawei/coral/cache/redis/connection/RedisConnectFactoryBuilder.java", "start_line": 75, "end_line": 82, "work_dir": "/docker/JavaRunProject/DevUC-common_x00636091/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class StringUtils {\n    public static final String LF;\n    public static final String EMPTY;\n    public static final String COMMA;\n    public static final String DOT;\n    public static String capitalize(String str); /* Capitalize a {@code String}, changing the first letter to upper case as per {@link Character#toUpperCase(char)}. No other letters are changed. */\n    public static String getFilename(String path); /* Extract the filename from the given Java resource path, e.g. {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}. */\n    public static String applyRelativePath(String path, String relativePath); /* Apply the given relative path to the given Java resource path, assuming standard Java folder separation (i.e. \"/\" separators). */\n    public static String replace(String inString, String oldPattern, String newPattern); /* Replace all occurrences of a substring within a string with another string. */\n    public static String deleteAny(String inString, String charsToDelete); /* Delete any character in a given {@code String}. */\n    public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete); /* Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. delimiter characters) delete all new lines and line feeds in a {@code String} */\n    public static String[] delimitedListToStringArray(String str, String delimiter); /* Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. delimiter characters) */\n    public static boolean hasLength(String str); /* Check that the given {@code String} is neither {@code null} nor of length 0. <p>Note: this method returns {@code true} for a {@code String} that purely consists of whitespace. */\n    public static String collectionToDelimitedString(Collection<?> coll, String delim, String prefix, String suffix); /* Convert a {@link Collection} to a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations. */\n    public static String collectionToDelimitedString(Collection<?> coll, String delim); /* Convert a {@code Collection} into a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations. */\n    public static String cleanPath(String path); /* Normalize the path by suppressing sequences like \"path/..\" and inner simple dots. <p>The result is convenient for path comparison. For other uses, notice that Windows separators (\"\\\") are replaced by simple slashes. <p><strong>NOTE</strong> that {@code cleanPath} should not be depended upon in a security context. Other mechanisms should be used to prevent path-traversal issues. */\n    public static boolean hasText(String str); /* Check whether the given {@code String} contains actual <em>text</em>. <p>More specifically, this method returns {@code true} if the {@code String} is not {@code null}, its length is greater than 0, and it contains at least one non-whitespace character. contain whitespace only */\n    public static String[] toStringArray(Collection<String> collection); /* Copy the given {@link Collection} into a {@code String} array. <p>The {@code Collection} must contain {@code String} elements only. */\n    public static String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens,\n            boolean ignoreEmptyTokens); /* Tokenize the given {@code String} into a {@code String} array via a {@link StringTokenizer}. <p>The given {@code delimiters} string can consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; individually considered as a delimiter) trimming; StringTokenizer will not consider subsequent delimiters as token in the first place). */\n    public static boolean equalsIgnoreCase(String str1, String str2); /* <p>Compares two CharSequences, returning {@code true} if they represent equal sequences of characters, ignoring case.</p> */\n    public static String deleteWhitespace(String str); /* <p>Deletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.</p> */\n    public static boolean startsWithIgnoreCase(final CharSequence str, final CharSequence prefix); /* <p>Case insensitive check if a CharSequence starts with a specified prefix.</p> <p>{@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The comparison is case insensitive.</p> */\n    public static boolean startsWith(final CharSequence str, final CharSequence prefix); /* <p>Check if a CharSequence starts with a specified prefix.</p> <p>{@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The comparison is case sensitive.</p> */\n    public static boolean isAnyBlank(final CharSequence... css); /* <p>Checks if any one of the CharSequences are blank (\"\") or null and not whitespace only..</p> */\n    public static boolean isNoneBlank(final CharSequence... css); /* <p>Checks if none of the CharSequences are blank (\"\") or null and whitespace only..</p> */\n    public static boolean contains(final CharSequence str, final CharSequence searchStr); /* Checks if CharSequence contains a search CharSequence. */\n    public static boolean containsIgnoreCase(final CharSequence str, final CharSequence searchStr); /* Checks if CharSequence contains a search CharSequence irrespective of case, handling {@code null}. Case-insensitivity is defined as by {@link String#equalsIgnoreCase(String)}. <p>A {@code null} CharSequence will return {@code false}.</p> null} string input */\n    public static String escapeJavaScript(String str);\n    public static String join(Collection collection, String separator); /* <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> */\n    public static String substringBetween(String str, String open, String close); /* Substring between two index. */\n    public static String trim(final String str); /* <p>Removes control characters (char &lt;= 32) from both ends of this String, handling {@code null} by returning {@code null}.</p> */\n    public static boolean equals(String str1, String str2); /* <p>Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.</p> */\n    public static String defaultIfEmpty(String str, String defaultStr); /* <p>Returns either the passed in CharSequence, or if the CharSequence is empty or {@code null}, the value of {@code defaultStr}.</p> */\n    public static boolean isEmpty(String str); /* <p>Checks if a str is empty (\"\") or null.</p> */\n    public static boolean isNotEmpty(String str); /* <p>Checks if a str is not empty (\"\") or not null.</p> */\n    public static boolean isNotBlank(String str); /* <p>Checks if a string is not empty (\"\"), not null and not whitespace only.</p> */\n    public static boolean isBlank(final CharSequence cs); /* <p>Checks if a string is  empty (\"\"), null and  whitespace only.</p> */\n    public static String newStringForUtf8(byte[] bytes); /* <p>Create a string with encoding format as utf8.</p> */\n}\n\npublic class NacosUser {\n    public void setGlobalAdmin(boolean globalAdmin);\n    public boolean isGlobalAdmin();\n    public void setToken(String token);\n    public String getToken();\n}\n\npublic final class JacksonUtils {\n    public static JavaType constructJavaType(Type type); /* construct java type -> Jackson Java Type. */\n    public static JsonNode transferToJsonNode(Object obj); /* Parse object to Jackson {@link JsonNode}. */\n    public static ArrayNode createEmptyArrayNode(); /* Create a new empty Jackson {@link ArrayNode}. */\n    public static ObjectNode createEmptyJsonNode(); /* Create a new empty Jackson {@link ObjectNode}. */\n    public static void registerSubtype(Class<?> clz, String type); /* Register sub type for child class. */\n    public static JsonNode toObj(String json); /* Json string deserialize to Jackson {@link JsonNode}. */\n    public static <T> T toObj(InputStream inputStream, Type type); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, TypeReference<T> typeReference); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, Type type); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, Class<T> cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, TypeReference<T> typeReference); /* Json string deserialize to Object. */\n    public static <T> T toObj(InputStream inputStream, Class<T> cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, Type cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, Class<T> cls); /* Json string deserialize to Object. */\n    public static byte[] toJsonBytes(Object obj); /* Object to json string byte array. */\n    public static String toJson(Object obj); /* Object to json string. */\n}\n```\n\nThe context above is:\n```java\n  1: public final class NacosSignatureAlgorithm {\n```\n\nThe context below is:\n```java\n  3: private static final int HEADER_POSITION = 0;\n  4: private static final int PAYLOAD_POSITION = 1;\n  5: private static final int SIGNATURE_POSITION = 2;\n  6: private static final int JWT_PARTS = 3;\n  7: private static final String HS256_JWT_HEADER = \"eyJhbGciOiJIUzI1NiJ9\";\n  8: private static final String HS384_JWT_HEADER = \"eyJhbGciOiJIUzM4NCJ9\";\n  9: private static final String HS512_JWT_HEADER_OLD = \"eyJhbGciOiJIUzUxMiJ9\";\n 10: private static final String HS512_JWT_HEADER = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9\";\n 11: private static final Base64.Encoder URL_BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n 12: private static final Base64.Decoder URL_BASE64_DECODER = Base64.getUrlDecoder();\n 13: private static final Map<String, NacosSignatureAlgorithm> MAP = new HashMap<>(4);\n 14: public static final NacosSignatureAlgorithm HS256 = new NacosSignatureAlgorithm(\"HS256\", \"HmacSHA256\",\n 15: HS256_JWT_HEADER);\n 16: public static final NacosSignatureAlgorithm HS384 = new NacosSignatureAlgorithm(\"HS384\", \"HmacSHA384\",\n 17: HS384_JWT_HEADER);\n 18: public static final NacosSignatureAlgorithm HS512 = new NacosSignatureAlgorithm(\"HS512\", \"HmacSHA512\",\n 19: HS512_JWT_HEADER);\n 20: public static final NacosSignatureAlgorithm HS512_OLD = new NacosSignatureAlgorithm(\"HS512\", \"HmacSHA512\",\n 21: HS512_JWT_HEADER_OLD);\n 22: private final String algorithm;\n 23: private final String jcaName;\n 24: private final String header;\n 25: static {\n 26: MAP.put(HS256_JWT_HEADER, HS256);\n 27: MAP.put(HS384_JWT_HEADER, HS384);\n 28: MAP.put(HS512_JWT_HEADER, HS512);\n 29: MAP.put(HS512_JWT_HEADER_OLD, HS512_OLD);\n 30: }\n 31: /**\n 32: * verify jwt.\n 33: *\n 34: * @param jwt complete jwt string\n 35: * @param key for signature\n 36: * @return object for payload\n 37: * @throws AccessException access exception\n 38: */\n 39: public static NacosUser verify(String jwt, Key key) throws AccessException {\n 40: if (StringUtils.isBlank(jwt)) {\n 41: throw new AccessException(\"user not found!\");\n 42: }\n 43: String[] split = jwt.split(\"\\\\.\");\n 44: if (split.length != JWT_PARTS) {\n 45: throw new AccessException(\"token invalid!\");\n 46: }\n 47: String header = split[HEADER_POSITION];\n 48: String payload = split[PAYLOAD_POSITION];\n 49: String signature = split[SIGNATURE_POSITION];\n 50: NacosSignatureAlgorithm signatureAlgorithm = MAP.get(header);\n 51: if (signatureAlgorithm == null) {\n 52: throw new AccessException(\"unsupported signature algorithm\");\n 53: }\n 54: NacosUser user = signatureAlgorithm.verify(header, payload, signature, key);\n 55: // add by cse, validate user info\n 56: if (user.getUserName().equals(\"cse\") && AuthConstants.GLOBAL_ADMIN_ROLE.equals(user.getAuth())) {\n 57: user.setGlobalAdmin(true);\n 58: }\n 59: user.setToken(jwt);\n 60: return user;\n 61: }\n 62: /**\n 63: * verify jwt.\n 64: *\n 65: * @param header    header of jwt\n 66: * @param payload   payload of jwt\n 67: * @param signature signature of jwt\n 68: * @param key       for signature\n 69: * @return object for payload\n 70: * @throws AccessException access exception\n 71: */\n 72: public NacosUser verify(String header, String payload, String signature, Key key) throws AccessException {\n 73: Mac macInstance = getMacInstance(key);\n 74: byte[] bytes = macInstance.doFinal((header + JWT_SEPERATOR + payload).getBytes(StandardCharsets.US_ASCII));\n 75: if (!URL_BASE64_ENCODER.encodeToString(bytes).equals(signature)) {\n 76: throw new AccessException(\"Invalid signature\");\n 77: }\n 78: NacosJwtPayload nacosJwtPayload = JacksonUtils.toObj(URL_BASE64_DECODER.decode(payload), NacosJwtPayload.class);\n 79: if (nacosJwtPayload.getExp() >= TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis())) {\n 80: // add by cse, valid token info\n 81: NacosUser nacosUser = new NacosUser();\n 82: nacosUser.setAuth(nacosJwtPayload.getAuth());\n 83: nacosUser.setPerm(nacosJwtPayload.getPerm());\n 84: nacosUser.setUserName(nacosJwtPayload.getSub());\n 85: return nacosUser;\n 86: }\n 87: throw new AccessException(\"token expired!\");\n 88: }\n 89: /**\n 90: * get jwt expire time in seconds.\n 91: *\n 92: * @param jwt complete jwt string\n 93: * @param key for signature\n 94: * @return expire time in seconds\n 95: * @throws AccessException access exception\n 96: */\n 97: public static long getExpiredTimeInSeconds(String jwt, Key key) throws AccessException {\n 98: if (StringUtils.isBlank(jwt)) {\n 99: throw new AccessException(\"user not found!\");\n100: }\n101: String[] split = jwt.split(\"\\\\.\");\n102: if (split.length != JWT_PARTS) {\n103: throw new AccessException(\"token invalid!\");\n104: }\n105: String header = split[HEADER_POSITION];\n106: String payload = split[PAYLOAD_POSITION];\n107: String signature = split[SIGNATURE_POSITION];\n108: NacosSignatureAlgorithm signatureAlgorithm = MAP.get(header);\n109: if (signatureAlgorithm == null) {\n110: throw new AccessException(\"unsupported signature algorithm\");\n111: }\n112: return signatureAlgorithm.getExpireTimeInSeconds(header, payload, signature, key);\n113: }\n114: /**\n115: * get jwt expire time in seconds.\n116: *\n117: * @param header    header of jwt\n118: * @param payload   payload of jwt\n119: * @param signature signature of jwt\n120: * @param key       for signature\n121: * @return expire time in seconds\n122: * @throws AccessException access exception\n123: */\n124: public long getExpireTimeInSeconds(String header, String payload, String signature, Key key)\n125: throws AccessException {\n126: Mac macInstance = getMacInstance(key);\n127: byte[] bytes = macInstance.doFinal((header + JWT_SEPERATOR + payload).getBytes(StandardCharsets.US_ASCII));\n128: if (!URL_BASE64_ENCODER.encodeToString(bytes).equals(signature)) {\n129: throw new AccessException(\"Invalid signature\");\n130: }\n131: NacosJwtPayload nacosJwtPayload = JacksonUtils.toObj(URL_BASE64_DECODER.decode(payload), NacosJwtPayload.class);\n132: return nacosJwtPayload.getExp();\n133: }\n134: private NacosSignatureAlgorithm(String alg, String jcaName, String header) {\n135: this.algorithm = alg;\n136: this.jcaName = jcaName;\n137: this.header = header;\n138: }\n139: private Mac getMacInstance(Key key) {\n140: try {\n141: Mac instance = Mac.getInstance(jcaName);\n142: instance.init(key);\n143: return instance;\n144: } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n145: throw new IllegalArgumentException(\"Invalid key: \" + key);\n146: }\n147: }\n148: public String getAlgorithm() {\n149: return algorithm;\n150: }\n151: public String getJcaName() {\n152: return jcaName;\n153: }\n154: public String getHeader() {\n155: return header;\n156: }\n157: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -19,1 +19,0 @@\n+ 19:     private static final String HS512_JWT_HEADER = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9\";\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -21,1 +21,1 @@\n+ 21:     private static final Base64.Encoder URL_BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n- 21:     private static final Base64.Encoder URL_BASE64_ENCODER = Base64.getUrlEncoder();\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -175,5 +175,5 @@\n 175:     private Mac getMacInstance(Key key) {\n 176:         try {\n+177:             Mac instance = Mac.getInstance(jcaName);\n-177:             Mac instance = Mac.getInstance(algorithm);\n 178:             instance.init(key);\n 179:             return instance;\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 根据JWT token的结构，生成JWT token.\n\nAnd here is the code snippet you are asked to modify:\n```java\nString sign(NacosJwtPayload nacosJwtPayload, Key key)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "nacos_f00563108#25", "good_example_response": "```java\n    String sign(NacosJwtPayload nacosJwtPayload, Key key) {\n        String jwtWithoutSign = header + JWT_SEPERATOR + URL_BASE64_ENCODER.encodeToString(\n                nacosJwtPayload.toString().getBytes(StandardCharsets.UTF_8));\n        Mac macInstance = getMacInstance(key);\n        byte[] bytes = jwtWithoutSign.getBytes(StandardCharsets.US_ASCII);\n        String signature = URL_BASE64_ENCODER.encodeToString(macInstance.doFinal(bytes));\n        return jwtWithoutSign + JWT_SEPERATOR + signature;\n    }\n    ```", "reward_command": "cd /docker/JavaRunProject/nacos_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml -Dtest=com.alibaba.nacos.plugin.auth.impl.token.impl.JwtTokenManagerTest.java", "extra_content": {"query": "根据JWT token的结构，生成JWT token", "diff_path": "/docker/JavaRunProject/nacos_f00563108/diff/25.patch", "test_result": "fail", "file_path": "/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/jwt/NacosSignatureAlgorithm.java", "start_line": 209, "end_line": 217, "work_dir": "/docker/JavaRunProject/nacos_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ShardingContext {\n    public static void clean();\n    public static List<Handler> getHandlerList();\n    public static void addHandler(Handler handler);\n    public static Object getParams(String key);\n    public static void setParams(String key, Object value);\n}\n```\n\nThe context above is:\n```java\n  1: @Intercepts({\n  2: @Signature(\n  3: type = StatementHandler.class,\n  4: method = \"prepare\",\n  5: args = {Connection.class, Integer.class})\n  6: })\n  7: /**\n  8: * 表分片处理拦截器\n  9: *\n 10: */\n 11: public class TableShardInterceptor implements Interceptor {\n 12: private static final ReflectorFactory DEFAULT_REFLECTOR_FACTORY = new DefaultReflectorFactory();\n 13: @Override\n 14: public Object plugin(final Object target) {\n 15: if (target instanceof StatementHandler) {\n 16: return Plugin.wrap(target, this);\n 17: } else {\n 18: return target;\n 19: }\n 20: }\n```\n\nThe context below is:\n```java\n 22: public void setProperties(final Properties properties) {}\n 23: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -1,6 +1,0 @@\n+  1: @Intercepts({\n+  2:     @Signature(\n+  3:             type = StatementHandler.class,\n+  4:             method = \"prepare\",\n+  5:             args = {Connection.class, Integer.class})\n+  6: })\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -12,1 +12,0 @@\n+ 12:     private static final ReflectorFactory DEFAULT_REFLECTOR_FACTORY = new DefaultReflectorFactory();\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -35,8 +35,0 @@\n+ 35: @Override\n+ 36:     public Object plugin(final Object target) {\n+ 37:         if (target instanceof StatementHandler) {\n+ 38:             return Plugin.wrap(target, this);\n+ 39:         } else {\n+ 40:             return target;\n+ 41:         }\n+ 42:     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 自定义一个mybatis的拦截器，拦截sql后增加自定义行为并执行.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic Object intercept(final Invocation invocation) throws Throwable\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#27", "good_example_response": "```java\n    public Object intercept(final Invocation invocation) throws Throwable {\n        List<Handler> handlerList = ShardingContext.getHandlerList();\n        if (handlerList == null) {\n            return invocation.proceed();\n        }\n\n        final StatementHandler statementHandler = (StatementHandler) invocation.getTarget();\n        final MetaObject metaObject =\n            MetaObject.forObject(\n                statementHandler,\n                SystemMetaObject.DEFAULT_OBJECT_FACTORY,\n                SystemMetaObject.DEFAULT_OBJECT_WRAPPER_FACTORY,\n                DEFAULT_REFLECTOR_FACTORY);\n        String SQL = (String) metaObject.getValue(\"delegate.boundSql.sql\");\n\n        for (Handler handler : handlerList) {\n            SQL = handler.replace(SQL);\n        }\n        metaObject.setValue(\"delegate.boundSql.sql\", SQL);\n\n        return invocation.proceed();\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.interceptor.TableShardInterceptorTest.java", "extra_content": {"query": "自定义一个mybatis的拦截器，拦截sql后增加自定义行为并执行", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/27.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/interceptor/TableShardInterceptor.java", "start_line": 34, "end_line": 56, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: @MappedJdbcTypes(JdbcType.LONGVARCHAR)\n  2: @MappedTypes(Cddl.class)\n  3: public class CddlTypeHandler extends JsonValueTypeHandler<Cddl> {\n  8: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change: None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 自定义mybatis json typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprotected Type type()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#31", "good_example_response": "```java\n    protected Type type() {\n        return (new TypeToken<Cddl>() {\n        }).getType();\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.CddlTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis json typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/31.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/CddlTypeHandler.java", "start_line": 25, "end_line": 28, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: public class ListElemtIsStringTypeHandler extends ListTypeHandler<List<String>> {\n  6: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n: None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 自定义mybatis List typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprotected Type type()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#32", "good_example_response": "```java\n    protected Type type() {\n        return (new TypeToken<List<String>>() {\n        }).getType();\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.ListElemtIsStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis List typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/32.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/ListElemtIsStringTypeHandler.java", "start_line": 18, "end_line": 21, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RiskComplianceManager {\n    public static final int SENSITIVE_WORD_MAX_LEN; /* 敏感词的数据库表内容字段最大长度 */\n    public static final String RESPONSE_PHASE; /* 表示是输出时被风控拦截的字符串 */\n    public static final String REQUEST_PHASE; /* 表示是输入时被风控拦截的字符串 */\n    public static final int TEXT_CHECK_TASK_UUID_LEN;\n    public int getRiskCheckWordLength(); /* 获取风控检查的敏感词长度 */\n    public boolean isSensitiveCheckPromptEnable(); /* 获取prompt攻击检测开关状态 */\n    public static String truncateRiskInfo(String riskInfo); /* 对记录入库的数据进行截断，避免字符串超过数据库字段risk_info长度限制 */\n    public MatchedResult riskTextAttackDetect(String userId, String taskId, String text, boolean isConfidential,\n        String traceId); /* 执行aics prompt注入攻击检查 */\n    public MatchedResult riskComplianceCheck(String userId, String taskId, String text, boolean isConfidential, String domainId); /* 风险控制检查方法实现 */\n    public boolean languageCheck(String taskId, String text, boolean isConfidential, String backendServiceName,\n        String traceId); /* 小语种检查 */\n}\n\npublic class EngineProperties {\n    public boolean isHcsSiteEnv(); /* 判断是否为hcs站点 */\n    public boolean isHcEnv(); /* 判断是否为hc站点 */\n}\n\npublic class SseServer {\n    public void closeWithError(String connectionId, Throwable throwable); /* 错误情况下关闭上游连接 */\n    public void close(String connectionId); /* 正常情况下关闭连接，主要是关闭到上游的连接 */\n    public void send(String connectionId, String content, String traceId); /* 向客户端发送消息, 这个方法用于向上游（插件、web端等)发送数据 */\n    public SseEmitter connect(String connectionId, String traceId); /* 客户端连接sse服务器, 这里是建立engine和插件的长连接 */\n    public static int getCurrentConcurrency(); /* 获取当前系统容量 */\n}\n```\n\nThe context above is:\n```java\n  1: @Async\n  2: @Service\n  3: public class AsyncService {\n  4: private static final Logger LOGGER = Logger.getLogger(AsyncService.class);\n```\n\nThe context below is:\n```java\n  6: private RiskComplianceManager riskComplianceManager;\n  7: @Resource\n  8: private UserRiskManageService riskManageService;\n  9: @Resource\n 10: private EngineProperties engineProperties;\n 11: @Resource\n 12: private SseServer sseServer;\n 13: /**\n 14: * 异步执行aics prompt注入攻击检查\n 15: *\n 16: * @param sessionId 会话id\n 17: * @param checkData 检查内容\n 18: * @param isConfidential 是否为敏感数据\n 19: * @param userRiskRecord 访问记录对象\n 20: * @param phase 执行检查的阶段\n 21: */\n 22: public void attackCheck(String sessionId, String checkData, boolean isConfidential, UserRiskRecord userRiskRecord,\n 23: String phase) {\n 24: // request阶段，判断是否为对话场景，不是对话场景无需执行检查\n 25: if (StringUtils.equals(REQUEST_PHASE, phase) && !AgentType.ChatAgent.name()\n 26: .equals(userRiskRecord.getAgentType())) {\n 27: return;\n 28: }\n 29: String traceId = userRiskRecord.getTraceId();\n 30: String userId = userRiskRecord.getUserId();\n 31: LOGGER.info(\"begin text attack detect, phase:{}, traceId:{}, sessionId:{}\", phase, traceId, sessionId);\n 32: MatchedResult result = riskComplianceManager.riskTextAttackDetect(userId, sessionId, checkData, isConfidential,\n 33: traceId);\n 34: if (!result.isMatched()) {\n 35: LOGGER.info(\"end text attack detect, phase:{}, traceId:{}, sessionId:{}\", phase, traceId, sessionId);\n 36: return;\n 37: }\n 38: LOGGER.warn(\"text attack detect failed, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n 39: userId, traceId);\n 40: checkResultAndRecordAsync(result);\n 41: interceptAttack(sessionId, phase, userRiskRecord);\n 42: }\n 43: private void interceptAttack(String sessionId, String phase, UserRiskRecord userRiskRecord) {\n 44: if (!engineProperties.isSensitiveCheckAicsInterceptEnable()) {\n 45: LOGGER.info(\"aics intercept is not enable, skip forbidden user and close connection\");\n 46: return;\n 47: }\n 48: riskManageService.autoForbiddenUserAsync(userRiskRecord);\n 49: LOGGER.warn(\"start to close connection, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n 50: userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n 51: // 关闭上下游连接\n 52: sseServer.closeWithError(sessionId, new NotSafePromptException(ErrorCode.NOT_SAFE_PROMPT_ERROR));\n 53: LOGGER.warn(\"end to close connection, phase:{}, connectionId: {}, userId:{}, traceId:{}\", phase, sessionId,\n 54: userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n 55: }\n 56: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -1,1 +1,0 @@\n+  1: @Async\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -44,4 +44,11 @@\n   44:         LOGGER.warn(\"text attack detect failed, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n   45:             userId, traceId);\n+  47:         interceptAttack(sessionId, phase, userRiskRecord);\n-  47:         if (!engineProperties.isSensitiveCheckAicsInterceptEnable()) {\n-  48:             LOGGER.info(\"aics intercept is not enable, skip forbidden user and close connection\");\n-  49:             return;\n-  50:         }\n-  51:         riskManageService.autoForbiddenUserAsync(userRiskRecord);\n-  52:         LOGGER.warn(\"start to close connection, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n-  53:             userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n-  54:         sseServer.closeWithError(sessionId, new NotSafePromptException(ErrorCode.NOT_SAFE_PROMPT_ERROR));\n-  55:         LOGGER.warn(\"end to close connection, phase:{}, connectionId: {}, userId:{}, traceId:{}\", phase, sessionId,\n-  56:             userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n   48:     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -43,6 +43,12 @@\n   43:         }\n   44:         LOGGER.warn(\"text attack detect failed, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n   45:             userId, traceId);\n+  46:         checkResultAndRecordAsync(result);\n-  46:         {\n-  47:             UserRiskRecord tmp = new UserRiskRecord();\n-  48:             tmp.setRiskInfo(result.getMatchWord());\n-  49:             tmp.setRiskType(result.getMatchType());\n-  50:             tmp.setRiskScore(result.getRiskScore());\n-  51:             riskManageService.addUserRiskRecord(tmp);\n-  52:         }\n   47:         interceptAttack(sessionId, phase, userRiskRecord);\n   48:     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 异步记录风控拦截记录.\n\nAnd here is the code snippet you are asked to modify:\n```java\nprivate void checkResultAndRecordAsync(MatchedResult result)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "SnapEngineService_h00636345#28", "good_example_response": "```java\n    private void checkResultAndRecordAsync(MatchedResult result) {\n        CompletableFuture.completedFuture(result).thenAcceptAsync(matchedResult -> {\n            UserRiskRecord userRiskRecord = new UserRiskRecord();\n            userRiskRecord.setRiskInfo(result.getMatchWord());\n            userRiskRecord.setRiskType(result.getMatchType());\n            userRiskRecord.setRiskScore(result.getRiskScore());\n            riskManageService.addUserRiskRecord(userRiskRecord);\n        });\n    }\n```", "reward_command": "cd /docker/JavaRunProject/SnapEngineService_h00636345;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml -Dtest=com.huawei.codearts.engine.service.AsyncServiceTest#test_attackCheck_should_close_connection_when_risk_compliance_not_pass_and_intercept_unable", "extra_content": {"query": "异步记录风控拦截记录", "diff_path": "/docker/JavaRunProject/SnapEngineService_h00636345/diff/28.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codearts/engine/service/AsyncService.java", "start_line": 81, "end_line": 90, "work_dir": "/docker/JavaRunProject/SnapEngineService_h00636345/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class OperateAuditManager {\n    public Page<OperateRecord> findAll(Long resourceId, ResourceType resourceType, Integer pageNum, Integer pageSize) throws WrongParameterException;\n    public void save(List<OperateRecord> updateEvents);\n    public <T> List<OperateRecord> getOperateRecords(T oldVo, T newVo, String operator,\n                                                     ResourceType resourceType, Long objectId);\n}\n\npublic class VmPoolDaoV2 {\n    public List<VmPoolDO> findAllByPoolIds(List<Long> poolIds);\n    public Integer batchUpdatePoolInfo(List<Long> poolIds, String dcsName);\n    public Integer countVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                List<String> zone);\n    public List<VmPoolDO> findVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                      List<String> zone, Integer pageNum, Integer pageSize);\n    public int countByPoolId(Long poolId);\n    public List<VmPoolDO> getDistinctDcsNamesAndDatabases(Zone zone);\n    public int batchInsertPoolInfo(List<VmPoolDO> vmPoolList);\n}\n\npublic class PageUtil {\n    public static <T> Page<T> buildPage(Pageable pageable, long count, Supplier<List<T>> contentSupplier);\n    public static Pair<Integer, Integer> checkPage(Integer pageNum, Integer pageSize) throws WrongParameterException;\n}\n```\n\nThe context above is:\n```java\n  1: @Service\n  2: @RequiredArgsConstructor\n  3: public class AgentPoolServiceImpl implements AgentPoolService {\n```\n\nThe context below is:\n```java\n  5: private final VmPoolDao vmPoolDao;\n  6: private final VmPoolDaoV2 vmPoolDaoV2;\n  7: private final IDcsInfoDao dcsInfoDao;\n  8: private final OperateAuditManager operateAuditManager;\n  9: @Override\n 10: @Transactional\n 11: public VmPoolDO updatePoolInfo(VmPoolDO vmPoolDO) throws Exception {\n 12: if (!checkVmPool(vmPoolDO)) {\n 13: String message = String.format(Locale.ROOT, \"input body error, vmPoolDO = {}\", vmPoolDO);\n 14: throw new WrongParameterException(message);\n 15: }\n 16: VmPoolDO oldVmPoolDO = getVmPoolDO(vmPoolDao.findOneByPoolId(vmPoolDO.getPoolId()).get());\n 17: VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n 18: LOGGER.info(\"updatePoolInfo: poolDO = {}\", poolDO);\n 19: operateAuditManager.save(operateAuditManager.getOperateRecords(oldVmPoolDO, poolDO\n 20: , DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, poolDO.getPoolId()));\n 21: return poolDO;\n 22: }\n 23: @Override\n 24: @Transactional\n 25: public List<VmPoolDO> batchUpdatePoolInfo(Map<String, Object> params) throws WrongParameterException {\n 26: List<Long> poolIds = getPoolIds(params);\n 27: String dcsName = getDcsName(params);\n 28: List<VmPoolDO> vmPoolDOS = vmPoolDaoV2.findAllByPoolIds(poolIds);\n 29: if (CollectionUtil.isEmpty(vmPoolDOS)) {\n 30: throw new WrongParameterException(\"DCS信息不存在!\");\n 31: }\n 32: Map<Zone, List<VmPoolDO>> zoneListMap = vmPoolDOS.stream()\n 33: .collect(Collectors.groupingBy(VmPoolDO::getZone));\n 34: if (zoneListMap.size() > 1) {\n 35: throw new WrongParameterException(\"暂不支持修改不同区域下的DCS!\");\n 36: }\n 37: Integer num = vmPoolDaoV2.batchUpdatePoolInfo(poolIds, dcsName);\n 38: LOGGER.info(\"batchUpdatePoolInfo success! ,num = {}\", num);\n 39: addOperationLog(dcsName, vmPoolDOS);\n 40: return vmPoolDaoV2.findAllByPoolIds(poolIds);\n 41: }\n 42: private void addOperationLog(String dcsName, List<VmPoolDO> vmPoolDOS) {\n 43: vmPoolDOS.forEach(vmPoolDO -> {\n 44: VmPoolDO vmPoolDONew = getVmPoolDO(vmPoolDO);\n 45: vmPoolDONew.setDcsName(dcsName);\n 46: List<OperateRecord> updateEvents = operateAuditManager.getOperateRecords(vmPoolDO, vmPoolDONew,\n 47: DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, vmPoolDO.getPoolId());\n 48: operateAuditManager.save(updateEvents);\n 49: });\n 50: }\n 51: private static VmPoolDO getVmPoolDO(VmPoolDO vmPoolDO) {\n 52: VmPoolDO vmPoolDONew = new VmPoolDO();\n 53: vmPoolDONew.setId(vmPoolDO.getId());\n 54: vmPoolDONew.setPoolId(vmPoolDO.getPoolId());\n 55: vmPoolDONew.setName(vmPoolDO.getName());\n 56: vmPoolDONew.setType(vmPoolDO.getType());\n 57: vmPoolDONew.setZone(vmPoolDO.getZone());\n 58: vmPoolDONew.setDatabase(vmPoolDO.getDatabase());\n 59: vmPoolDONew.setDcsName(vmPoolDO.getDcsName());\n 60: return vmPoolDONew;\n 61: }\n 62: private static List<Long> getPoolIds(Map<String, Object> params) throws WrongParameterException {\n 63: if (params.get(\"poolIds\") instanceof List && CollectionUtil.isNotEmpty((List<Long>) params.get(\"poolIds\"))) {\n 64: return (List<Long>) params.get(\"poolIds\");\n 65: }\n 66: throw new WrongParameterException(\"请选择正确的DCS!\");\n 67: }\n 68: private static String getDcsName(Map<String, Object> params) throws WrongParameterException {\n 69: if (ObjectUtil.isNotEmpty(params.get(\"dcsName\"))) {\n 70: return (String) params.get(\"dcsName\");\n 71: }\n 72: throw new WrongParameterException(\"请确认要修改的dcsName!\");\n 73: }\n 74: private boolean checkVmPool(VmPoolDO vmPoolDO) {\n 75: if (vmPoolDO.getPoolId() == null\n 76: || StringUtils.isEmpty(vmPoolDO.getName())\n 77: || StringUtils.isEmpty(vmPoolDO.getDcsName())\n 78: || StringUtils.isEmpty(vmPoolDO.getType())\n 79: || vmPoolDO.getZone() == null\n 80: || vmPoolDO.getDatabase() == null) {\n 81: return false;\n 82: }\n 83: return true;\n 84: }\n 85: @Override\n 86: public Page<VmPoolDO> getAllPoolInfo(String poolNames, List<Long> poolIds, String dcsName, String type, String zone,\n 87: Integer pageNum, Integer pageSize) throws Exception {\n 88: pageNum = PageUtil.checkPage(pageNum, pageSize).getLeft();\n 89: pageSize = PageUtil.checkPage(pageNum, pageSize).getRight();\n 90: Pageable pageable = PageRequest.of(pageNum - 1, pageSize);\n 91: List<String> names = splitString(poolNames);\n 92: List<String> dcsNames = splitString(dcsName);\n 93: List<String> types = splitString(type);\n 94: List<String> zones = splitString(zone);\n 95: Integer count = vmPoolDaoV2.countVmPools(names, poolIds, dcsNames, types, zones);\n 96: return PageUtil.buildPage(pageable, count, () -> vmPoolDaoV2.findVmPools(names, poolIds, dcsNames, types, zones,\n 97: (int) pageable.getOffset(), pageable.getPageSize()));\n 98: }\n 99: private static List<String> splitString(String str) {\n100: if (StringUtils.isNotBlank(str)) {\n101: return Arrays.stream(str.split(\",\")).collect(Collectors.toList());\n102: }\n103: return Collections.emptyList();\n104: }\n105: @Override\n106: public VmPoolDO addPoolInfo(VmPoolDO vmPoolDO) throws Exception {\n107: int count = vmPoolDaoV2.countByPoolId(vmPoolDO.getPoolId());\n108: if (count > 0) {\n109: throw new WrongParameterException(\"the pool_id must be unique ！\");\n110: }\n111: VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n112: LOGGER.info(\"addPoolInfo: poolDO = {}\", poolDO);\n113: return poolDO;\n114: }\n115: @Override\n116: @Transactional\n117: public void deletePoolInfo(Long poolId) {\n118: try {\n119: vmPoolDao.deleteByPoolId(poolId);\n120: String message = String.format(\"delete pool success, poolId = %d\", poolId);\n121: LOGGER.info(message);\n122: } catch (Exception e) {\n123: LOGGER.error(\"delete pool exception, e = \", e);\n124: }\n125: }\n126: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -5,0 +5,1 @@\n+  5:     private static final Logger LOGGER = LoggerFactory.getLogger(AgentPoolServiceImpl.class);\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -2,0 +2,1 @@\n+  2: @RequiredArgsConstructor\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -24,0 +24,3 @@\n+ 24:         LOGGER.info(\"updatePoolInfo: poolDO = {}\", poolDO);\n+ 25:         operateAuditManager.save(operateAuditManager.getOperateRecords(oldVmPoolDO, poolDO\n+ 26:                 , DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, poolDO.getPoolId()));\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "agentmanager_y00560175#38", "good_example_response": "```java\n    public List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException {\n        try {\n            List<VmPoolDO> namesAndDatabases = vmPoolDaoV2.getDistinctDcsNamesAndDatabases(Zone.fromValue(zone));\n            Map<String, List<Integer>> dcsMap =\n                    namesAndDatabases.stream()\n                            .collect(\n                                    Collectors.groupingBy(\n                                            VmPoolDO::getDcsName, // key extractor\n                                            Collectors.mapping(\n                                                    VmPoolDO::getDatabase, // value extractor\n                                                    Collectors.toList() // value collector\n                                            )));\n            List<DcsInfoDO> dcsInfoDOS = dcsInfoDao.findAllByZone(Zone.fromValue(zone));\n            List<PoolDcsInfo> poolDcsInfos = new ArrayList<>();\n            for (Map.Entry<String, List<Integer>> entry : dcsMap.entrySet()) {\n                String dcsName = entry.getKey();\n                Optional<DcsInfoDO> dcsOptional =\n                        dcsInfoDOS.stream().filter(dcsInfoDO -> dcsInfoDO.getName().equals(dcsName)).findFirst();\n                if (dcsOptional.isPresent()) {\n                    PoolDcsInfo poolDcsInfo = new PoolDcsInfo();\n                    poolDcsInfo.setDatabases(entry.getValue());\n                    poolDcsInfo.setDcsInfo(dcsOptional.get());\n                    poolDcsInfos.add(poolDcsInfo);\n                }\n            }\n            LOGGER.info(\"getPoolByZone: zone = {}, poolDcsInfos = {}\", zone, poolDcsInfos);\n            return poolDcsInfos;\n        } catch (Exception e) {\n            LOGGER.error(\"getPoolByZone exception, e = \", e);\n            throw new ServerException(e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.service.impl.AgentPoolServiceImplTest#test_getPoolByZone clean test", "extra_content": {"query": "根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/38.patch", "test_result": "fail", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/service/impl/AgentPoolServiceImpl.java", "start_line": 188, "end_line": 219, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class FunctionalDemo {\n  2: private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n```\n\nThe context below is:\n```java\n  4: public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n  5: map.put(\"AZ_FLAG\", \"AZ_CODE\");\n  6: map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n  7: map.put(\"REGION_FLAG\", \"REGION_CODE\");\n  8: };\n  9: public static List<User> checkUserPermission(List<User> users, String role) {\n 10: BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n 11: .contains(requiredRole);\n 12: List<User> allowed = new ArrayList<>();\n 13: // 执行权限校验流程\n 14: users.forEach(user -> {\n 15: if (hasPermission.test(user, role)) {\n 16: allowed.add(user);\n 17: }\n 18: });\n 19: return allowed;\n 20: }\n 21: public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n 22: orders.forEach(order -> handler.accept(order.getCustomer(), order));\n 23: }\n 24: /**\n 25: * 按比例奖励客户积分\n 26: *\n 27: * @param ratio ratio\n 28: * @return {@link UnaryOperator<Customer>}\n 29: */\n 30: public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n 31: return customer -> {\n 32: int currentPoints = customer.getPoints();\n 33: int bonus = (int) (currentPoints * ratio);\n 34: customer.addPoints(bonus);\n 35: return customer;\n 36: };\n 37: }\n 38: /**\n 39: * 合并订单\n 40: *\n 41: * @return {@link BinaryOperator<Order>}\n 42: */\n 43: public static BinaryOperator<Order> mergeOrderOperator() {\n 44: return (order1, order2) -> {\n 45: double totalAmount = order1.getAmount() + order2.getAmount();\n 46: int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n 47: if (order1.getOrderId().equals(order2.getOrderId())) {\n 48: return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n 49: } else {\n 50: return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n 51: }\n 52: };\n 53: }\n 54: /**\n 55: * 计算总积分：用户当前积分 + 订单积分\n 56: *\n 57: * @return {@link BiFunction<Customer, Order, Integer>}\n 58: */\n 59: public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n 60: return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n 61: }\n 62: public static Predicate<User> createNonAdminValidator() {\n 63: Predicate<User> isActive = User::isActive;\n 64: Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n 65: return isActive.and(isAdmin.negate());\n 66: }\n 67: public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n 68: return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n 69: .equals(host2.getHostName());\n 70: }\n 71: public static BinaryOperator<Customer> higherPointsOperator() {\n 72: return (customer1, customer2) -> {\n 73: if (customer1.getPoints() >= customer2.getPoints()) {\n 74: return customer1;\n 75: }\n 76: return customer2;\n 77: };\n 78: }\n 79: public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n 80: return (customer, products) -> {\n 81: double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n 82: return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n 83: };\n 84: }\n 85: public static Predicate<JSONObject> validPredicate(String key) {\n 86: return item -> ObjectUtils.isNotEmpty(item.get(key));\n 87: }\n 88: public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n 89: return item -> ObjectUtils.equals(item.get(key), another.get(key));\n 90: }\n 91: public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n 92: Map<String, String> map = new HashMap<>();\n 93: if (mapping != null) {\n 94: mapping.accept(map);\n 95: }\n 96: return item -> {\n 97: if (map.containsKey(item)) {\n 98: item = map.get(item);\n 99: }\n100: return item;\n101: };\n102: }\n103: public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n104: UnaryOperator<String> operator = mappingOperator(mapping);\n105: if (StringUtils.isNotEmpty(vo.getAzCode())) {\n106: params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n107: } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n108: params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n109: } else {\n110: params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n111: }\n112: }\n113: public static BiFunction<Integer, Integer, Double> euclidean() {\n114: return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n115: }\n116: public static BiFunction<Integer, Integer, Double> manhattan() {\n117: return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n118: }\n119: }\n120: class User {\n121: private String username;\n122: private List<String> roles;\n123: private boolean active;\n124: public User(String username, List<String> roles, boolean active) {\n125: this.username = username;\n126: this.roles = roles;\n127: this.active = active;\n128: }\n129: public String getUsername() {\n130: return username;\n131: }\n132: public List<String> getRoles() {\n133: return roles;\n134: }\n135: public boolean isActive() {\n136: return active;\n137: }\n138: }\n139: class Customer {\n140: private String id;\n141: private int points;\n142: public Customer(String id, int points) {\n143: this.id = id;\n144: this.points = points;\n145: }\n146: public String getId() {\n147: return id;\n148: }\n149: public int getPoints() {\n150: return points;\n151: }\n152: public void addPoints(int points) {\n153: this.points += points;\n154: }\n155: }\n156: class Order {\n157: private Customer customer;\n158: private String orderId;\n159: private double amount;\n160: private boolean isCompleted;\n161: public Order(Customer customer, String orderId, double amount) {\n162: this.customer = customer;\n163: this.orderId = orderId;\n164: this.amount = amount;\n165: this.isCompleted = false;\n166: }\n167: public Customer getCustomer() {\n168: return customer;\n169: }\n170: public String getOrderId() {\n171: return orderId;\n172: }\n173: public double getAmount() {\n174: return amount;\n175: }\n176: public boolean isCompleted() {\n177: return isCompleted;\n178: }\n179: public void markCompleted() {\n180: isCompleted = true;\n181: }\n182: }\n183: class Product {\n184: private String productId;\n185: private int amount;\n186: private double price;\n187: public Product(String productId, int amount, double price) {\n188: this.productId = productId;\n189: this.amount = amount;\n190: this.price = price;\n191: }\n192: public String getProductId() {\n193: return productId;\n194: }\n195: public int getAmount() {\n196: return amount;\n197: }\n198: public double getPrice() {\n199: return price;\n200: }\n201: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -155,0 +155,25 @@\n+ 155: class User {\n+ 156:     private String username;\n+ 157: \n+ 158:     private List<String> roles;\n+ 159: \n+ 160:     private boolean active;\n+ 161: \n+ 162:     public User(String username, List<String> roles, boolean active) {\n+ 163:         this.username = username;\n+ 164:         this.roles = roles;\n+ 165:         this.active = true;\n+ 166:     }\n+ 167: \n+ 168:     public String getUsername() {\n+ 169:         return username;\n+ 170:     }\n+ 171: \n+ 172:     public List<String> getRoles() {\n+ 173:         return roles;\n+ 174:     }\n+ 175: \n+ 176:     public boolean isActive() {\n+ 177:         return active;\n+ 178:     }\n+ 179: }\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -85,0 +85,10 @@\n+  85:     public static Predicate<User> createNonAdminValidator() {\n+  86:         Predicate<User> isActive = User::isActive;\n+  87:         Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n+  88:         return isActive.and(isAdmin.negate());\n+  89:     }\n+  90: \n+  91:     public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n+  92:         return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n+  93:             .equals(host2.getHostName());\n+  94:     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -2,0 +2,1 @@\n+   2:     private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "agentmanager_y00560175#43", "good_example_response": "```java\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#testBatchUpdateWithMultipleBatches clean test", "extra_content": {"query": "实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/43.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 35, "end_line": 49, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class FunctionalDemo {\n  2: private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n```\n\nThe context below is:\n```java\n  4: public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n  5: map.put(\"AZ_FLAG\", \"AZ_CODE\");\n  6: map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n  7: map.put(\"REGION_FLAG\", \"REGION_CODE\");\n  8: };\n  9: public static List<User> checkUserPermission(List<User> users, String role) {\n 10: BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n 11: .contains(requiredRole);\n 12: List<User> allowed = new ArrayList<>();\n 13: // 执行权限校验流程\n 14: users.forEach(user -> {\n 15: if (hasPermission.test(user, role)) {\n 16: allowed.add(user);\n 17: }\n 18: });\n 19: return allowed;\n 20: }\n 21: public static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer) {\n 22: int totalSize = list.size();\n 23: LOGGER.info(\"start to handle list, total size: {}\", totalSize);\n 24: // 计算需要分成多少批\n 25: int batchCount = (totalSize + BATCH_SIZE - 1) / BATCH_SIZE;\n 26: for (int i = 0; i < batchCount; i++) {\n 27: int startIndex = i * BATCH_SIZE;\n 28: int endIndex = Math.min((i + 1) * BATCH_SIZE, totalSize);\n 29: List<E> batch = list.subList(startIndex, endIndex);\n 30: // 处理batch\n 31: consumer.accept(batch);\n 32: LOGGER.debug(\"updated size: {}\", endIndex);\n 33: }\n 34: LOGGER.info(\"finish to handle list\");\n 35: }\n 36: public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n 37: orders.forEach(order -> handler.accept(order.getCustomer(), order));\n 38: }\n 39: /**\n 40: * 按比例奖励客户积分\n 41: *\n 42: * @param ratio ratio\n 43: * @return {@link UnaryOperator<Customer>}\n 44: */\n 45: public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n 46: return customer -> {\n 47: int currentPoints = customer.getPoints();\n 48: int bonus = (int) (currentPoints * ratio);\n 49: customer.addPoints(bonus);\n 50: return customer;\n 51: };\n 52: }\n 53: /**\n 54: * 计算总积分：用户当前积分 + 订单积分\n 55: *\n 56: * @return {@link BiFunction<Customer, Order, Integer>}\n 57: */\n 58: public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n 59: return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n 60: }\n 61: public static Predicate<User> createNonAdminValidator() {\n 62: Predicate<User> isActive = User::isActive;\n 63: Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n 64: return isActive.and(isAdmin.negate());\n 65: }\n 66: public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n 67: return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n 68: .equals(host2.getHostName());\n 69: }\n 70: public static BinaryOperator<Customer> higherPointsOperator() {\n 71: return (customer1, customer2) -> {\n 72: if (customer1.getPoints() >= customer2.getPoints()) {\n 73: return customer1;\n 74: }\n 75: return customer2;\n 76: };\n 77: }\n 78: public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n 79: return (customer, products) -> {\n 80: double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n 81: return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n 82: };\n 83: }\n 84: public static Predicate<JSONObject> validPredicate(String key) {\n 85: return item -> ObjectUtils.isNotEmpty(item.get(key));\n 86: }\n 87: public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n 88: return item -> ObjectUtils.equals(item.get(key), another.get(key));\n 89: }\n 90: public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n 91: Map<String, String> map = new HashMap<>();\n 92: if (mapping != null) {\n 93: mapping.accept(map);\n 94: }\n 95: return item -> {\n 96: if (map.containsKey(item)) {\n 97: item = map.get(item);\n 98: }\n 99: return item;\n100: };\n101: }\n102: public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n103: UnaryOperator<String> operator = mappingOperator(mapping);\n104: if (StringUtils.isNotEmpty(vo.getAzCode())) {\n105: params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n106: } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n107: params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n108: } else {\n109: params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n110: }\n111: }\n112: public static BiFunction<Integer, Integer, Double> euclidean() {\n113: return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n114: }\n115: public static BiFunction<Integer, Integer, Double> manhattan() {\n116: return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n117: }\n118: }\n119: class User {\n120: private String username;\n121: private List<String> roles;\n122: private boolean active;\n123: public User(String username, List<String> roles, boolean active) {\n124: this.username = username;\n125: this.roles = roles;\n126: this.active = active;\n127: }\n128: public String getUsername() {\n129: return username;\n130: }\n131: public List<String> getRoles() {\n132: return roles;\n133: }\n134: public boolean isActive() {\n135: return active;\n136: }\n137: }\n138: class Customer {\n139: private String id;\n140: private int points;\n141: public Customer(String id, int points) {\n142: this.id = id;\n143: this.points = points;\n144: }\n145: public String getId() {\n146: return id;\n147: }\n148: public int getPoints() {\n149: return points;\n150: }\n151: public void addPoints(int points) {\n152: this.points += points;\n153: }\n154: }\n155: class Order {\n156: private Customer customer;\n157: private String orderId;\n158: private double amount;\n159: private boolean isCompleted;\n160: public Order(Customer customer, String orderId, double amount) {\n161: this.customer = customer;\n162: this.orderId = orderId;\n163: this.amount = amount;\n164: this.isCompleted = false;\n165: }\n166: public Customer getCustomer() {\n167: return customer;\n168: }\n169: public String getOrderId() {\n170: return orderId;\n171: }\n172: public double getAmount() {\n173: return amount;\n174: }\n175: public boolean isCompleted() {\n176: return isCompleted;\n177: }\n178: public void markCompleted() {\n179: isCompleted = true;\n180: }\n181: }\n182: class Product {\n183: private String productId;\n184: private int amount;\n185: private double price;\n186: public Product(String productId, int amount, double price) {\n187: this.productId = productId;\n188: this.amount = amount;\n189: this.price = price;\n190: }\n191: public String getProductId() {\n192: return productId;\n193: }\n194: public int getAmount() {\n195: return amount;\n196: }\n197: public double getPrice() {\n198: return price;\n199: }\n200: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -77,3 +77,3 @@\n     public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n-        return (customer, order) -> 0;\n+        return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n     }\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -53,1 +53,7 @@\n-    public static UnaryOperator<Customer> addBonusOperator(double ratio) { return customer -> customer; }\n+    public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n+        return customer -> {\n+            int currentPoints = customer.getPoints();\n+            int bonus = (int) (currentPoints * ratio);\n+            customer.addPoints(bonus);\n+            return customer;\n+        };\n+    }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -101,3 +101,5 @@\n-    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() { return (customer, products) -> new Order(customer, \"ORD0\", 0.0); }\n+    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n+        return (customer, products) -> {\n+            double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n+            return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n+        };\n+    }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 合并订单\npublic static BinaryOperator<Order> mergeOrderOperator()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "agentmanager_y00560175#46", "good_example_response": "```java\n    public static BinaryOperator<Order> mergeOrderOperator() {\n        return (order1, order2) -> {\n            double totalAmount = order1.getAmount() + order2.getAmount();\n            int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n            if (order1.getOrderId().equals(order2.getOrderId())) {\n                return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n            } else {\n                return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n            }\n        };\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#test_mergeOrderOperator clean test", "extra_content": {"query": "返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/46.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 90, "end_line": 101, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: public class ClassLoaderUtils {\n  3: private ClassLoaderUtils() {\n  4: }\n```\n\nThe context below is:\n```java\n  6: public static URL[] getURLs(ClassLoader classLoader) {\n  7: if (classLoader instanceof URLClassLoader) {\n  8: return ((URLClassLoader) classLoader).getURLs();\n  9: }\n 10: try {\n 11: Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n 12: AccessController.doPrivileged((PrivilegedAction) () -> {\n 13: ucpField.setAccessible(true);\n 14: return null;\n 15: });\n 16: Object ucp = ucpField.get(classLoader);\n 17: Field pathField = ucp.getClass().getDeclaredField(\"path\");\n 18: AccessController.doPrivileged((PrivilegedAction) () -> {\n 19: pathField.setAccessible(true);\n 20: return null;\n 21: });\n 22: ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n 23: return path.toArray(new URL[0]);\n 24: } catch (Exception e) {\n 25: throw new DevsporeCicException(e);\n 26: }\n 27: }\n 28: public static void loadClassWithApplicationLoader(String className) {\n 29: try {\n 30: ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n 31: log.info(\"Application ClassLoader: {}\", appClassLoader);\n 32: Class<?> loadedClass = appClassLoader.loadClass(className);\n 33: log.info(\"Loaded Class: {}\", loadedClass.getName());\n 34: } catch (ClassNotFoundException e) {\n 35: log.error(\"load error: {}\", e.getMessage());\n 36: }\n 37: }\n 38: public static boolean isBootstrapClassLoader(String className) {\n 39: try {\n 40: Class<?> langClass = Class.forName(className);\n 41: return langClass.getClassLoader() == null;\n 42: } catch (ClassNotFoundException e) {\n 43: log.error(\"load error: {}\", e.getMessage());\n 44: }\n 45: return false;\n 46: }\n 47: public static URL[] getExtensionClassLoaderUrls() {\n 48: ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n 49: ClassLoader extensionClassLoader = systemClassLoader.getParent();\n 50: if (extensionClassLoader instanceof URLClassLoader) {\n 51: URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n 52: return urlClassLoader.getURLs();\n 53: }\n 54: return null;\n 55: }\n 56: /**\n 57: * 动态加载类并执行指定方法\n 58: *\n 59: * @param loader 类加载器\n 60: * @param className 完整类名（如 \"com.example.Plugin\"）\n 61: * @param methodName 方法名（如 \"run\"）\n 62: * @param parameterTypes 方法参数类型数组（无参数传 null）\n 63: * @param args 方法参数值数组（无参数传 null）\n 64: * @return 方法执行结果（无返回值方法返回 null）\n 65: * @throws Exception 封装所有可能的反射异常\n 66: */\n 67: public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n 68: Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n 69: // 1. 加载目标类\n 70: Class<?> clazz = loader.loadClass(className);\n 71: // 2. 实例化对象（使用无参构造函数）\n 72: Constructor<?> constructor = clazz.getDeclaredConstructor();\n 73: constructor.setAccessible(true); // 允许调用私有构造方法\n 74: Object instance = constructor.newInstance();\n 75: // 3. 获取并执行方法\n 76: Method method = clazz.getMethod(methodName, parameterTypes);\n 77: // 判断是否为静态方法\n 78: if (Modifier.isStatic(method.getModifiers())) {\n 79: return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n 80: } else {\n 81: // 非静态方法\n 82: return returnType.cast(method.invoke(instance, args));\n 83: }\n 84: }\n 85: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -52,10 +52,10 @@\n-    public static URL[] getExtensionClassLoaderUrls() { return null; }\n+    public static URL[] getExtensionClassLoaderUrls() {\n+        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n+        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n+\n+        if (extensionClassLoader instanceof URLClassLoader) {\n+            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n+            return urlClassLoader.getURLs();\n+        }\n+        return null;\n+    }\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -42,8 +42,8 @@\n-    public static boolean isBootstrapClassLoader(String className) { return false; }\n+    public static boolean isBootstrapClassLoader(String className) {\n+        try {\n+            Class<?> langClass = Class.forName(className);\n+            return langClass.getClassLoader() == null;\n+        } catch (ClassNotFoundException e) {\n+            log.error(\"load error: {}\", e.getMessage());\n+        }\n+        return false;\n+    }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -30,10 +30,10 @@\n-    public static void loadClassWithApplicationLoader(String className) {}\n+    public static void loadClassWithApplicationLoader(String className) {\n+        try {\n+            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n+            log.info(\"Application ClassLoader: {}\", appClassLoader);\n+\n+            Class<?> loadedClass = appClassLoader.loadClass(className);\n+            log.info(\"Loaded Class: {}\", loadedClass.getName());\n+        } catch (ClassNotFoundException e) {\n+            log.error(\"load error: {}\", e.getMessage());\n+        }\n+    }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 使用指定类加载器实现动态加载.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 重载方法：简化无参方法的调用\npublic static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#40", "good_example_response": "```java\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#loadAndInvoke clean test", "extra_content": {"query": "使用指定类加载器实现动态加载", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/40.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 97, "end_line": 118, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: public class UrlClassLoaderUtils {\n 15: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n###:None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 加载指定路径下的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 动态加载类并执行指定方法\npublic static Class<?> loadClassByPath(String[] paths, String className) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "devspore-cic_30036124#48", "good_example_response": "```java\n    public static Class<?> loadClassByPath(String[] paths, String className) throws Exception {\n\n        // 1. 将路径转换为 URL 对象（适配不同操作系统）\n        URL[] urls = new URL[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            String normalizedPath = paths[i].replace(\"/\", File.separator);\n            urls[i] = new File(normalizedPath).toURI().toURL();\n        }\n        URLClassLoader loader = new URLClassLoader(urls);\n\n        // 2. 加载目标类\n        return loader.loadClass(className);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.UrlClassLoaderUtilsTest clean test", "extra_content": {"query": "加载指定路径下的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/48.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/UrlClassLoaderUtils.java", "start_line": 18, "end_line": 31, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: public class BaseDao<T> {\n```\n\nThe context below is:\n```java\n  3: * 构建分页查询\n  4: *\n  5: * @param request 查询条件\n  6: * @return IPage<T>\n  7: */\n  8: public IPage<T> buildIPage(QueryRequest request) {\n  9: IPage<T> iPage = new Page<>();\n 10: iPage.setCurrent(request.getPageIndex());\n 11: iPage.setSize(request.getPageSize());\n 12: return iPage;\n 13: }\n 14: /**\n 15: * 构建查询条件，包括条件查询和按字段排序。\n 16: *\n 17: * @param request   查询条件\n 18: * @return QueryWrapper<T>\n 19: */\n 20: public QueryWrapper<T> buildQueryWrapper(QueryRequest request) {\n 21: QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n 22: buildCondition(request, queryWrapper);\n 23: buildOrder(request, queryWrapper, null);\n 24: return queryWrapper;\n 25: }\n 26: /**\n 27: * 构建查询条件\n 28: * 因为in和notIn这两个条件特殊，在for循环外分别单独构建。对于同一列名，把所有的值放到一起。\n 29: *\n 30: * @param request      查询条件\n 31: * @param queryWrapper 构建对象\n 32: */\n 33: public void buildCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n 34: if (request.getSelectors() == null) {\n 35: return;\n 36: }\n 37: buildInCondition(request, queryWrapper);\n 38: buildNotInCondition(request, queryWrapper);\n 39: for (QueryRequest.Selector selector : request.getSelectors()) {\n 40: switch (selector.getFilterType()) {\n 41: case LIKE:\n 42: queryWrapper.like(selector.getColumnName(), selector.getFilterValue());\n 43: break;\n 44: case EQUAL:\n 45: queryWrapper.eq(selector.getColumnName(), selector.getFilterValue());\n 46: break;\n 47: case BIGGER:\n 48: queryWrapper.gt(selector.getColumnName(), selector.getFilterValue());\n 49: break;\n 50: case BIGGEREQUAL:\n 51: queryWrapper.ge(selector.getColumnName(), selector.getFilterValue());\n 52: break;\n 53: case LESS:\n 54: queryWrapper.lt(selector.getColumnName(), selector.getFilterValue());\n 55: break;\n 56: case LESSEQUAL:\n 57: queryWrapper.le(selector.getColumnName(), selector.getFilterValue());\n 58: break;\n 59: case ISNULL:\n 60: queryWrapper.isNull(selector.getColumnName());\n 61: break;\n 62: case ISNOTNULL:\n 63: queryWrapper.isNotNull(selector.getColumnName());\n 64: break;\n 65: default:\n 66: break;\n 67: }\n 68: }\n 69: }\n 70: /**\n 71: * 构建排序条件\n 72: *\n 73: * @param request      查询条件\n 74: * @param queryWrapper 构建对象\n 75: * @param uniqueKey    唯一主键（传入如果不为空，则自动添加一条根据默认主键升序方法）\n 76: */\n 77: public void buildOrder(QueryRequest request, QueryWrapper<T> queryWrapper, String uniqueKey) {\n 78: if (request.getSortOrder() != null && request.getSortColumn() != null) {\n 79: queryWrapper.orderBy(\n 80: true, SortOrderEnum.ASC.equals(request.getSortOrder()), request.getSortColumn());\n 81: }\n 82: if (ObjectUtils.isNotEmpty(uniqueKey)) {\n 83: queryWrapper.orderBy(true, true, uniqueKey);\n 84: }\n 85: }\n 86: private void buildInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n 87: Map<String, List<QueryRequest.Selector>> inColumnMap =\n 88: getFilterColumnMap(request, FilterTypeEnum.IN);\n 89: inColumnMap.forEach(\n 90: (columnName, fieldSelector) ->\n 91: queryWrapper.in(\n 92: columnName,\n 93: fieldSelector.stream()\n 94: .map(QueryRequest.Selector::getFilterValue)\n 95: .collect(Collectors.toList())));\n 96: }\n 97: private void buildNotInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n 98: Map<String, List<QueryRequest.Selector>> notInColumnMap =\n 99: getFilterColumnMap(request, FilterTypeEnum.NOTIN);\n100: notInColumnMap.forEach(\n101: (columnName, fieldSelector) ->\n102: queryWrapper.notIn(\n103: columnName,\n104: fieldSelector.stream()\n105: .map(QueryRequest.Selector::getFilterValue)\n106: .collect(Collectors.toList())));\n107: }\n108: /**\n109: * 根据列名称分组\n110: *\n111: * @param request    查询条件\n112: * @param filterType 过滤类型\n113: * @return key是列名，value是List<RequestFieldSelector>的map\n114: */\n115: private Map<String, List<QueryRequest.Selector>> getFilterColumnMap(\n116: QueryRequest request, FilterTypeEnum filterType) {\n117: return request.getSelectors().stream()\n118: .filter(selector -> filterType == selector.getFilterType())\n119: .collect(Collectors.groupingBy(QueryRequest.Selector::getColumnName));\n120: }\n121: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -82,4 +82,4 @@\n-     * @param request      查询条件\n-     * @param queryWrapper 构建对象\n-     *\n-     */\n+     * @param request      查询条件\n+     * @param queryWrapper 构建对象\n+     * @param uniqueKey    唯一主键（传入如果不为空，则自动添加一条根据默认主键升序方法）\n+     */\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -86,10 +86,10 @@\n-    public void buildOrder(QueryRequest request, QueryWrapper<T> queryWrapper) {\n+    public void buildOrder(QueryRequest request, QueryWrapper<T> queryWrapper, String uniqueKey) {\n         if (request.getSortOrder() != null && request.getSortColumn() != null) {\n             queryWrapper.orderBy(\n                     true, SortOrderEnum.ASC.equals(request.getSortOrder()), request.getSortColumn());\n         }\n-\n+        \n+        if (ObjectUtils.isNotEmpty(uniqueKey)) {\n+            queryWrapper.orderBy(true, true, uniqueKey);\n+        }\n     }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -22,5 +22,5 @@\n     public QueryWrapper<T> buildQueryWrapper(QueryRequest request) {\n         QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n         buildCondition(request, queryWrapper);\n-        buildOrder(request, queryWrapper);\n+        buildOrder(request, queryWrapper, null);\n         return queryWrapper;\n     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 构建查询条件，包括条件查询和按字段排序。\npublic QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "DubheProbeOrchestration_z00806805#41", "good_example_response": "```java\n    public QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey) {\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        buildCondition(request, queryWrapper);\n        buildOrder(request, queryWrapper, uniqueKey);\n        return queryWrapper;\n    }\n```", "reward_command": "cd /docker/JavaRunProject/DubheProbeOrchestration_z00806805; export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/cbu/dubheprobeorchestration/dao/BaseDaoTest.java", "extra_content": {"query": "使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/diff/41.patch", "test_result": "pass", "file_path": "/DubheProbeOrchestration/src/main/java/com/huawei/cbu/dubheprobeorchestration/dao/BaseDao.java", "start_line": 54, "end_line": 60, "work_dir": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ErrorMessage {\n    public void setSuggestion(String suggestion);\n    public String getSuggestion();\n    public void setExplain(String explain);\n    public String getExplain();\n    public void setErrorMessage(String errorMessage);\n    public String getErrorMessage();\n    public void setErrorCode(String errorCode);\n    public String getErrorCode();\n}\n```\n\nThe context above is:\n```java\n  1: public abstract class AbstractRemoteCallService {\n  2: protected static final Logger LOG = LoggerFactory.getLogger(AbstractRemoteCallService.class);\n```\n\nThe context below is:\n```java\n  4: private ServiceAvailableDetectConfig serviceAvailableDetectService;\n  5: private LubanRestTemplate lubanRestTemplate;\n  6: private String server;\n  7: private int connectTimeout = 5000;\n  8: private int readTimeout = 240000;\n  9: private int connectionRequestTimeout = 20000;\n 10: protected LubanRestTemplate getLubanRestTemplate() {\n 11: if (lubanRestTemplate != null) {\n 12: return lubanRestTemplate;\n 13: }\n 14: synchronized (this) {\n 15: if (lubanRestTemplate != null) {\n 16: return lubanRestTemplate;\n 17: }\n 18: lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n 19: }\n 20: return lubanRestTemplate;\n 21: }\n 22: protected String getServer() {\n 23: return server;\n 24: }\n 25: public void setServer(String server) {\n 26: this.server = server;\n 27: }\n 28: protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n 29: List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n 30: if (availableAddress.isEmpty()) {\n 31: throw new ApiClientException(\"not available address:\");\n 32: }\n 33: RestTemplate templete = getLubanRestTemplate();\n 34: HttpHeaders headers = new HttpHeaders();\n 35: headers.setContentType(MediaType.APPLICATION_JSON);\n 36: // 未来此处可以添加body体\n 37: String requestBody = JSON.toJSONString(request);\n 38: HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n 39: ResponseEntity<T> response = null;\n 40: // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n 41: RestClientException ex = null;\n 42: for (String str : availableAddress) {\n 43: try {\n 44: String address = str + url;\n 45: response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n 46: break;\n 47: } catch (RestClientResponseException logException) { // 服务器端返回错误了\n 48: int status = logException.getRawStatusCode();\n 49: String body = logException.getResponseBodyAsString();\n 50: LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n 51: ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n 52: if (em == null) {\n 53: throw new ApiClientException(body, logException);\n 54: }\n 55: if (em.getErrorCode() == null) {\n 56: throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n 57: } else {\n 58: throw new ApiClientException(em);\n 59: }\n 60: } catch (RestClientException logException) { // 客户端的数据\n 61: ex = logException;\n 62: continue;\n 63: }\n 64: }\n 65: if (response == null) {\n 66: throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n 67: }\n 68: return response.getBody();\n 69: }\n 70: /**\n 71: * 发送post请求，并且获取结果转换成对象 <br>\n 72: *\n 73: * @param url\n 74: * @param request\n 75: * @param responseType\n 76: * @return\n 77: * @author y00438022\n 78: * @since 2019年6月28日\n 79: */\n 80: protected <T> T postForObject(String url, Object request, Class<T> responseType) {\n 81: List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n 82: if (availableAddress.isEmpty()) {\n 83: throw new ApiClientException(\"not available address:\");\n 84: }\n 85: RestTemplate templete = getLubanRestTemplate();\n 86: HttpHeaders headers = new HttpHeaders();\n 87: headers.setContentType(MediaType.APPLICATION_JSON);\n 88: // 未来此处可以添加body体\n 89: String requestBody = JSON.toJSONString(request);\n 90: HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n 91: ResponseEntity<String> response = null;\n 92: // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n 93: RestClientException ex = null;\n 94: for (String str : availableAddress) {\n 95: try {\n 96: String address = str + url;\n 97: response = templete.exchange(address, HttpMethod.POST, requestEntity, String.class);\n 98: break;\n 99: } catch (RestClientResponseException logException) { // 服务器端返回错误了\n100: int status = logException.getRawStatusCode();\n101: String body = logException.getResponseBodyAsString();\n102: LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n103: ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n104: if (em == null) {\n105: throw new ApiClientException(body, logException);\n106: }\n107: if (em.getErrorCode() == null) {\n108: throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n109: } else {\n110: throw new ApiClientException(em);\n111: }\n112: } catch (RestClientException logException) { // 客户端的数据\n113: ex = logException;\n114: continue;\n115: }\n116: }\n117: if (response == null) {\n118: throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n119: }\n120: String result = response.getBody();\n121: return JSON.parseObject(result, responseType);\n122: }\n123: /**\n124: * 新的get方法\n125: *\n126: * @param url\n127: * @param responseType\n128: * @param <T>\n129: * @return\n130: * @author lwx521892\n131: * @since 2019年12月19日\n132: */\n133: protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n134: List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n135: if (availableAddress.isEmpty()) {\n136: throw new ApiClientException(\"not available address:\");\n137: }\n138: RestTemplate templete = getLubanRestTemplate();\n139: HttpHeaders headers = new HttpHeaders();\n140: headers.setContentType(MediaType.APPLICATION_JSON);\n141: // 未来此处可以添加body体\n142: HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n143: ResponseEntity<T> response = null;\n144: // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n145: RestClientException ex = null;\n146: for (String str : availableAddress) {\n147: try {\n148: String address = str + url;\n149: response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n150: break;\n151: } catch (RestClientResponseException logException) { // 服务器端返回错误了\n152: int status = logException.getRawStatusCode();\n153: String body = logException.getResponseBodyAsString();\n154: LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n155: ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n156: if (em == null) {\n157: throw new ApiClientException(body, logException);\n158: } else if (em.getErrorCode() == null) {\n159: throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n160: } else {\n161: throw new ApiClientException(em);\n162: }\n163: } catch (RestClientException logException) { // 客户端的数据\n164: ex = logException;\n165: continue;\n166: }\n167: }\n168: if (response == null) {\n169: throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n170: }\n171: return response.getBody();\n172: }\n173: public int getConnectTimeout() {\n174: return connectTimeout;\n175: }\n176: public void setConnectTimeout(int connectTimeout) {\n177: this.connectTimeout = connectTimeout;\n178: }\n179: public int getReadTimeout() {\n180: return readTimeout;\n181: }\n182: public void setReadTimeout(int readTimeout) {\n183: this.readTimeout = readTimeout;\n184: }\n185: public int getConnectionRequestTimeout() {\n186: return connectionRequestTimeout;\n187: }\n188: public void setConnectionRequestTimeout(int connectionRequestTimeout) {\n189: this.connectionRequestTimeout = connectionRequestTimeout;\n190: }\n191: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -38,50 +38,50 @@\n-protected <T> T postForObject(String url, Object request, Class<T> responseType) {\n-\n-        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n-\n-        if (availableAddress.isEmpty()) {\n-            throw new ApiClientException(\"not available address:\");\n-        }\n-        RestTemplate templete = getLubanRestTemplate();\n-        HttpHeaders headers = new HttpHeaders();\n-        headers.setContentType(MediaType.APPLICATION_JSON);\n-        // 未来此处可以添加body体\n-        String requestBody = JSON.toJSONString(request);\n-        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n-\n-        ResponseEntity<String> response = null;\n-\n-        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n-        RestClientException ex = null;\n-        for (String str : availableAddress) {\n-            try {\n-                String address = str + url;\n-                response = templete.exchange(address, HttpMethod.POST, requestEntity, String.class);\n-                break;\n-            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n-                int status = logException.getRawStatusCode();\n-                String body = logException.getResponseBodyAsString();\n-                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n-                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n-                if (em == null) {\n-                    throw new ApiClientException(body, logException);\n-                }\n-                if (em.getErrorCode() == null) {\n-                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n-                } else {\n-                    throw new ApiClientException(em);\n-                }\n-\n-            } catch (RestClientException logException) { // 客户端的数据\n-\n-                ex = logException;\n-                continue;\n-            }\n-        }\n-\n-        if (response == null) {\n-            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n-        }\n-\n-        String result = response.getBody();\n-        return JSON.parseObject(result, responseType);\n-    }\n+protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n+\n+        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n+\n+        if (availableAddress.isEmpty()) {\n+            throw new ApiClientException(\"not available address:\");\n+        }\n+        RestTemplate templete = getLubanRestTemplate();\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(MediaType.APPLICATION_JSON);\n+        // 未来此处可以添加body体\n+        String requestBody = JSON.toJSONString(request);\n+        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n+\n+        ResponseEntity<T> response = null;\n+\n+        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n+        RestClientException ex = null;\n+        for (String str : availableAddress) {\n+            try {\n+                String address = str + url;\n+                response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n+                break;\n+            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n+                int status = logException.getRawStatusCode();\n+                String body = logException.getResponseBodyAsString();\n+                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n+                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n+                if (em == null) {\n+                    throw new ApiClientException(body, logException);\n+                }\n+                if (em.getErrorCode() == null) {\n+                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n+                } else {\n+                    throw new ApiClientException(em);\n+                }\n+\n+            } catch (RestClientException logException) { // 客户端的数据\n+\n+                ex = logException;\n+                continue;\n+            }\n+        }\n+\n+        if (response == null) {\n+            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n+        }\n+\n+        return response.getBody();\n+    }\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -205,45 +205,45 @@\n-protected <T> T getForObject(String url, Class<T> responseType) {\n-        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n-        if (availableAddress.isEmpty()) {\n-            throw new ApiClientException(\"not available address:\");\n-        }\n-        RestTemplate templete = getLubanRestTemplate();\n-        ResponseEntity<T> response = null;\n-        RestClientException ex = null;\n-        for (String str : availableAddress) {\n-            try {\n-                String address = str + url;\n-                response = templete.getForEntity(address, responseType);\n-                break;\n-            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n-                int status = logException.getRawStatusCode();\n-                String body = logException.getResponseBodyAsString();\n-                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n-                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n-                if (em == null) {\n-                    throw new ApiClientException(body, logException);\n-                } else if (em.getErrorCode() == null) {\n-                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n-                } else {\n-                    throw new ApiClientException(em);\n-                }\n-            } catch (RestClientException logException) { // 客户端的数据\n-                ex = logException;\n-                continue;\n-            }\n-        }\n-\n-        if (response == null) {\n-            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n-        }\n-\n-        return response.getBody();\n-    }\n+protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n+        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n+        if (availableAddress.isEmpty()) {\n+            throw new ApiClientException(\"not available address:\");\n+        }\n+        RestTemplate templete = getLubanRestTemplate();\n+        HttpHeaders headers = new HttpHeaders();\n+        headers.setContentType(MediaType.APPLICATION_JSON);\n+        // 未来此处可以添加body体\n+\n+        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n+\n+        ResponseEntity<T> response = null;\n+\n+        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n+        RestClientException ex = null;\n+        for (String str : availableAddress) {\n+            try {\n+                String address = str + url;\n+                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n+                break;\n+            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n+                int status = logException.getRawStatusCode();\n+                String body = logException.getResponseBodyAsString();\n+                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n+                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n+                if (em == null) {\n+                    throw new ApiClientException(body, logException);\n+                } else if (em.getErrorCode() == null) {\n+                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n+                } else {\n+                    throw new ApiClientException(em);\n+                }\n+            } catch (RestClientException logException) { // 客户端的数据\n+                ex = logException;\n+                continue;\n+            }\n+        }\n+\n+        if (response == null) {\n+            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n+        }\n+\n+        return response.getBody();\n+    }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -150,10 +150,10 @@\n-    /**\n-     * 发送Get请求，并且获取结果转换成对象 <br>\n-     *\n-     * @param url\n-     * @param responseType\n-     * @param <T>\n-     * @return\n-     */\n+    /**\n+     * 新的get方法\n+     *\n+     * @param url\n+     * @param responseType\n+     * @param <T>\n+     * @return\n+     * @author lwx521892\n+     * @since 2019年12月19日\n+     */\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 通过spring RestTemplate发送get请求.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送Get请求，并且获取结果转换成对象 <br>\nprotected <T> T getForObject(String url, Class<T> responseType)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "lubanjob_f00563108#61", "good_example_response": "```java\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/lubanjob_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.luban.cmdb.client.config.AbstractRemoteCallServiceTest.java#test_getForObject_should_return_not_null_when_condition", "extra_content": {"query": "通过spring RestTemplate发送get请求", "diff_path": "/docker/JavaRunProject/lubanjob_f00563108/diff/61.patch", "test_result": "pass", "file_path": "/common/cmdb-client/src/main/java/com/huawei/luban/cmdb/client/config/AbstractRemoteCallService.java", "start_line": 189, "end_line": 234, "work_dir": "/docker/JavaRunProject/lubanjob_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @MappedJdbcTypes(JdbcType.LONGVARCHAR)\n  3: @MappedTypes(Map.class)\n  4: public class MapObjectTypeHandler extends BaseTypeHandler<Map<String, Object>> {\n  5: @Override\n  6: public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n  7: return getMapByJson(rs.getString(columnName));\n  8: }\n```\n\nThe context below is:\n```java\n 10: public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n 11: return getMapByJson(rs.getString(columnIndex));\n 12: }\n 13: @Override\n 14: public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n 15: return getMapByJson(cs.getString(columnIndex));\n 16: }\n 17: private Map<String, Object> getMapByJson(String json) {\n 18: try {\n 19: return StringUtils.isBlank(json)\n 20: ? new HashMap<>()\n 21: : JsonUtil.fromJson(json, (new TypeToken<Map<String, Object>>() {\n 22: }).getType());\n 23: } catch (Exception e) {\n 24: log.error(e.getMessage());\n 25: }\n 26: return null;\n 27: }\n 28: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -1,4 +1,4 @@\n-@Slf4j\n-@MappedJdbcTypes(JdbcType.VARCHAR)\n-@MappedTypes(Object.class)\n-public class MapObjectTypeHandler extends BaseTypeHandler<Map> {\n+@Slf4j\n+@MappedJdbcTypes(JdbcType.LONGVARCHAR)\n+@MappedTypes(Map.class)\n+public class MapObjectTypeHandler extends BaseTypeHandler<Map<String, Object>> {\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -28,10 +28,10 @@\n-    private Map<String, Object> getMapByJson(String json) {\n-        if (StringUtils.isBlank(json)) {\n-            return new HashMap<>();\n-        }\n-        return JsonUtil.fromJson(json, Map.class);\n-    }\n+    private Map<String, Object> getMapByJson(String json) {\n+        try {\n+            return StringUtils.isBlank(json)\n+                    ? new HashMap<>()\n+                    : JsonUtil.fromJson(json, (new TypeToken<Map<String, Object>>() {\n+                    }).getType());\n+        } catch (Exception e) {\n+            log.error(e.getMessage());\n+        }\n+        return null;\n+    }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -13,13 +13,13 @@\n-    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n+    @Override\n+    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n         return getMapByJson(rs.getString(columnName));\n     }\n-\n-    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n+\n+    @Override\n+    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n         return getMapByJson(rs.getString(columnIndex));\n     }\n-\n-    public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n+\n+    @Override\n+    public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n         return getMapByJson(cs.getString(columnIndex));\n     }\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 自定义mybatis Map typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType) throws SQLException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#33", "good_example_response": "```java\n    public void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType)\n            throws SQLException {\n        if (parameter == null) {\n            ps.setNull(i, Types.LONGVARCHAR);\n            return;\n        }\n        ps.setString(i, JsonUtil.toJson(parameter));\n    }\n```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.MapStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis Map typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/33.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/MapObjectTypeHandler.java", "start_line": 36, "end_line": 44, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\n## Current File Content\n```java\n  1: @Slf4j\n  2: @Configuration\n  3: @MapperScan({\"com.huawei.devcloud.octopusscheduler.mapper\",\n  4:     \"com.huawei.devcloud.octopusscheduler.powerschedule.mappper\"})\n  5: public class DataSourceConfig {\n 20: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### None. These recent changes show the development progression leading up to the current task.\n\nThe new feature is 初始化mybatis sql数据源.\n\nAnd here is the code snippet you are asked to modify:\n```java\npublic SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#34", "good_example_response": "```java\n    public SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException {\n        log.info(\">>> Start init datasource\");\n\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n        sqlSessionFactoryBean.setDataSource(dataSource);\n        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);\n        sqlSessionFactoryBean.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        sqlSessionFactoryBean.setMapperLocations(\n            new PathMatchingResourcePatternResolver().getResources(\"classpath:**/mapper/*.xml\"));\n        sqlSessionFactoryBean.setPlugins(new TableShardInterceptor());\n\n        log.info(\"<<< End init datasource\");\n        return sqlSessionFactoryBean;\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.datasource.config.DataSourceConfigTest.java", "extra_content": {"query": "初始化mybatis sql数据源", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/34.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/datasource/config/DataSourceConfig.java", "start_line": 23, "end_line": 36, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class UniSystemRepository {\n    public List<UniSystem> listUniSystem(Integer offset, Integer limit); /* 分页查询目标系统列表 */\n    public int countUniSystem(); /* 查询目标系统数量 */\n    public List<UniSystem> listSystemByCodes(List<String> systemCodes); /* 根据目标系统编码列表查询目标系统列表 */\n    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode); /* 根据作业空间编码查询关联的目标系统列表 */\n    public PageInfo<UniSystem> pageByCriteria(UniSystemCriteria uniSystemCriteria, int pageNum, int pageSize,\n        Boolean isQueryTotal); /* GetUniSystems Method */\n    public UniSystem getById(Long uniSystemId); /* GetUniSystemById Method */\n    public int updateByIds(List<UniSystem> uniSystemList); /* UpdateUniSystemByIds Method */\n    public int deleteAllById(List<Long> uniSystemIds); /* DeleteUniSystemByIds Method */\n    public int deleteById(Long uniSystemId); /* DeleteUniSystemById Method */\n    public int batchSave(List<UniSystem> uniSystemList); /* AddUniSystems Method */\n    public int save(UniSystem uniSystem); /* AddUniSystem Method */\n}\n```\n\nThe context above is:\n```java\n  1: @Slf4j\n  2: @Service\n  3: public class UniSystemService {\n  4: @Autowired\n  5: private UniSystemRepository uniSystemRepository;\n```\n\nThe context below is:\n```java\n  7: private CloudDragonProjectService cloudDragonProjectService;\n  8: /**\n  9: * 分页查询目标系统列表\n 10: *\n 11: * @param offset 偏移量\n 12: * @param limit 分页大小\n 13: * @return 目标系统列表\n 14: */\n 15: /**\n 16: * 根据作业空间编码查询关联的目标系统列表\n 17: *\n 18: * @param uniWorkspaceCode 作业空间编码\n 19: * @return 目标系统列表\n 20: */\n 21: public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode) {\n 22: return uniSystemRepository.listUniSystemByUniWorkspaceCode(uniWorkspaceCode);\n 23: }\n 24: public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n 25: int total = uniSystemRepository.countUniSystem();\n 26: List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n 27: List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n 28: return new PageResponseV2<>(total, listResp);\n 29: }\n 30: }\n```\n\n## Recent Changes Context\nHere are some recent changes that were made to this file to help you understand the development context:\n\n### Recent Change 3 (Earliest preparation work)\n```diff\n@@ -4,2 +4,2 @@\n-// TODO: wire UniSystemRepository\n-// private UniSystemRepository uniSystemRepository;\n+@Autowired\n+private UniSystemRepository uniSystemRepository;\n```\n\n### Recent Change 2 (Intermediate preparation)\n```diff\n@@ -24,2 +24,9 @@\n-// TODO: add query by workspace code\n-// public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode){ return Collections.emptyList(); }\n+    /**\n+     * 根据作业空间编码查询关联的目标系统列表\n+     *\n+     * @param uniWorkspaceCode 作业空间编码\n+     * @return 目标系统列表\n+     */\n+    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode) {\n+        return uniSystemRepository.listUniSystemByUniWorkspaceCode(uniWorkspaceCode);\n+    }\n```\n\n### Recent Change 1 (Latest preparation work)\n```diff\n@@ -1,1 +1,1 @@\n-// TODO: add logger\n+@Slf4j\n```\n\nThese recent changes show the development progression leading up to the current task.\n\nThe new feature is 分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 根据云龙群组id查询对应作业空间关联的目标系统\npublic List<UniSystemResp> listUniSystemByGroupId(String groupId)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.\n", "domain": "nl2code_java", "id": "projectTree_l00619365#56", "good_example_response": "```java\n    public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n        int total = uniSystemRepository.countUniSystem();\n        List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n        List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n        return new PageResponseV2<>(total, listResp);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true clean test -f service/pom.xml -Dtest=com.huawei.clouddragon.uniworkspace.service.UniSystemServiceTest", "extra_content": {"query": "分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换", "diff_path": "/docker/JavaRunProject/projectTree_l00619365/diff/56.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/clouddragon/uniworkspace/service/UniSystemService.java", "start_line": 46, "end_line": 52, "work_dir": "/docker/JavaRunProject/projectTree_l00619365/"}}

