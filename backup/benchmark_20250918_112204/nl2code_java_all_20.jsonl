{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class ClassLoaderUtils {\n    private ClassLoaderUtils() {\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    public static URL[] getURLs(ClassLoader classLoader) {\n        if (classLoader instanceof URLClassLoader) {\n            return ((URLClassLoader) classLoader).getURLs();\n        }\n        try {\n            Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                ucpField.setAccessible(true);\n                return null;\n            });\n            Object ucp = ucpField.get(classLoader);\n            Field pathField = ucp.getClass().getDeclaredField(\"path\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                pathField.setAccessible(true);\n                return null;\n            });\n            ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n            return path.toArray(new URL[0]);\n        } catch (Exception e) {\n            throw new DevsporeCicException(e);\n        }\n    }\n```\n\nThe context below is:\n```java\n\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }\n\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }\n\n    /**\n     * 动态加载类并执行指定方法\n     *\n     * @param loader 类加载器\n     * @param className 完整类名（如 \"com.example.Plugin\"）\n     * @param methodName 方法名（如 \"run\"）\n     * @param parameterTypes 方法参数类型数组（无参数传 null）\n     * @param args 方法参数值数组（无参数传 null）\n     * @return 方法执行结果（无返回值方法返回 null）\n     * @throws Exception 封装所有可能的反射异常\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }\n\n    /**\n     * 重载方法：简化无参方法的调用\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n        throws Exception {\n        Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n        return returnType.cast(result);\n    }\n}\n```\n\nThe new feature is 使用系统的Application ClassLoader来加载一个指定的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static void loadClassWithApplicationLoader(String className)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#4", "good_example_response": "```java\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testLoadClassWithApplicationLoader clean test", "extra_content": {"query": "使用系统的Application ClassLoader来加载一个指定的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/4.patch", "test_result": "fail", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 53, "end_line": 63, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RedisRecoveryTimer {\n    public static void markRedisRecovery(); /* 提供外部使用接口，标记redis已恢复，监控组件尝试重启工厂以达到恢复连接的效果 */\n    public static void addInstance(WrappedRedisConnectionFactory factory, RedisMessageListenerContainer container); /* 添加待监控的连接工厂和redis消息监听容器,将其维护到监控集合 */\n}\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class RedisConnectFactoryBuilder {\n    /**\n     * redis模式——standalone\n     */\n    public static final String REDIS_MODE_STANDALONE = \"standalone\";\n\n    /**\n     * redis模式——cluster\n     */\n    public static final String REDIS_MODE_CLUSTER = \"cluster\";\n\n    /**\n     * redis模式——sentinel\n     */\n    public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n\n    /**\n     * redis客户端类型——jedis\n     */\n    public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n\n    /**\n     * redis客户端类型——lettuce\n     */\n    public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n\n    private RedisConnectFactoryBuilder() {\n    }\n\n    /**\n     * 根据config构建响应的redis连接工厂\n     *\n     * @param redisConfig redis配置项\n     * @return redis连接工厂\n     */\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }\n\n    private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n        JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n            .connectTimeout(redisConfig.getConnectTimeout())\n            .readTimeout(redisConfig.getReadTimeout())\n            .usePooling()\n            .poolConfig(redisConfig.getPool())\n            .build();\n        switch (redisConfig.getRedisMode()) {\n            case REDIS_MODE_STANDALONE -> {\n                RedisStandaloneConfiguration standaloneConfiguration =\n                    createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n                return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n            }\n            case REDIS_MODE_CLUSTER -> {\n                RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n                return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n            }\n            case REDIS_MODE_SENTINEL -> {\n                RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n                return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n            }\n            default ->\n                throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n        }\n    }\n```\n\nThe context below is:\n```java\n\n    private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n        String host) {\n        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n        configuration.setPassword(redisConfig.getPassword());\n        String[] items = host.trim().split(\":\");\n        configuration.setHostName(items[0].trim());\n        configuration.setPort(Integer.parseInt(items[1].trim()));\n        configuration.setDatabase(redisConfig.getDatabase());\n        return configuration;\n    }\n\n    private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n        RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n        List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n            String[] items = host.split(\":\");\n            return new RedisNode(items[0], Integer.parseInt(items[1]));\n        }).collect(Collectors.toList());\n        configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n        configuration.setClusterNodes(redisNodes);\n        configuration.setPassword(redisConfig.getPassword());\n        return configuration;\n    }\n\n    private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n        Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n        RedisSentinelConfiguration configuration =\n            new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n        configuration.setPassword(redisConfig.getPassword());\n        return configuration;\n    }\n}\n```\n\nThe new feature is 根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprivate static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "DevUC-common_x00636091#6", "good_example_response": "```java\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn clean test -pl jin-cache", "extra_content": {"query": "根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory", "diff_path": "/docker/JavaRunProject/DevUC-common_x00636091/diff/6.patch", "test_result": "pass", "file_path": "/jin-cache/src/main/java/com/huawei/coral/cache/redis/connection/RedisConnectFactoryBuilder.java", "start_line": 75, "end_line": 82, "work_dir": "/docker/JavaRunProject/DevUC-common_x00636091/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@ConditionalOnProperty(prefix = \"apitest.dynamicglobalvariable\", name = \"storage\", havingValue = \"redis\")\n@Service\npublic class RedisDynamicGlobalVariableService implements DynamicGlobalVariableService {\n\n    private int ttlSeconds = 86400;\n\n    @Value(\"${envcommunication.amountLimitPerTask:100}\")\n    private int amountLimitPerTask;\n\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n\n    private String keyPrefix = \"APITestExecuteDaemonService::dynamic-global-variable::\";\n```\n\nThe context below is:\n```java\n\n    @Override\n    public void put(String taskId, String key, String value) {\n        BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n        if (boundHashOperations.get(key) == null && boundHashOperations.size() >= amountLimitPerTask) {\n            throwLimitExceedException(amountLimitPerTask);\n        }\n        boundHashOperations.put(key, value);\n        boundHashOperations.expire(Duration.ofSeconds(ttlSeconds));\n    }\n\n    @Override\n    public long remove(String taskId, String key) {\n        Long ret = redisTemplate.boundHashOps(prefix(taskId)).delete(key);\n        if (ret == null) {\n            return 0;\n        }\n        return ret;\n    }\n\n    @Override\n    public void removeAll(String taskId) {\n        redisTemplate.delete(prefix(taskId));\n    }\n\n    @Override\n    public Map<String, String> listAll(String taskId) {\n        Map<String, String> valMap = new HashMap<>();\n        // 分页获取所有动态变量, 当数据量较大时, 按照20对K-V为一组分批次获取\n        try (Cursor<Map.Entry<Object, Object>> cursor = redisTemplate.opsForHash()\n                .scan(prefix(taskId), ScanOptions.scanOptions().count(20).build())) {\n            while (cursor.hasNext()) {\n                addToValMap(valMap, cursor.next());\n            }\n            return valMap;\n        }\n    }\n\n    /**\n     * 添加元素至Map\n     */\n    public void addToValMap(Map<String, String> valMap, Map.Entry<Object, Object> entry) {\n        String key = entry.getKey() == null ? \"\" : entry.getKey().toString();\n        String value = entry.getValue() == null ? \"\" : entry.getValue().toString();\n        valMap.put(key, value);\n    }\n\n    private String prefix(String taskId) {\n        return keyPrefix + taskId;\n    }\n}\n```\n\nThe new feature is 使用RedisTemplate实现taskid前缀的hash查询.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic String get(String taskId, String key)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "APITestDesign-l00617778#10", "good_example_response": "```java\n    public String get(String taskId, String key) {\n        BoundHashOperations<String, String, String> boundHashOperations = redisTemplate.boundHashOps(prefix(taskId));\n        return boundHashOperations.get(key);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6   &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -Dtest=com/huawei/cloudtest/apitest/executedaemonservice/webcommon/dynamicglobalvariable/controller/DynamicGlobalVariableControllerTest.java#testGetKeyNotExist -Dsurefire.failIfNoSpecifiedTests=false clean test", "extra_content": {"query": "使用RedisTemplate实现taskid前缀的hash查询", "diff_path": "/docker/JavaRunProject/APITestDesign-l00617778/diff/10.patch", "test_result": "pass", "file_path": "/dynamic-global-variable/src/main/java/com/huawei/cloudtest/apitest/executedaemonservice/webcommon/dynamicglobalvariable/service/RedisDynamicGlobalVariableService.java", "start_line": 39, "end_line": 43, "work_dir": "/docker/JavaRunProject/APITestDesign-l00617778/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class ClassLoaderUtils {\n    private ClassLoaderUtils() {\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    public static URL[] getURLs(ClassLoader classLoader) {\n        if (classLoader instanceof URLClassLoader) {\n            return ((URLClassLoader) classLoader).getURLs();\n        }\n        try {\n            Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                ucpField.setAccessible(true);\n                return null;\n            });\n            Object ucp = ucpField.get(classLoader);\n            Field pathField = ucp.getClass().getDeclaredField(\"path\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                pathField.setAccessible(true);\n                return null;\n            });\n            ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n            return path.toArray(new URL[0]);\n        } catch (Exception e) {\n            throw new DevsporeCicException(e);\n        }\n    }\n\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }\n```\n\nThe context below is:\n```java\n\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }\n\n    /**\n     * 动态加载类并执行指定方法\n     *\n     * @param loader 类加载器\n     * @param className 完整类名（如 \"com.example.Plugin\"）\n     * @param methodName 方法名（如 \"run\"）\n     * @param parameterTypes 方法参数类型数组（无参数传 null）\n     * @param args 方法参数值数组（无参数传 null）\n     * @return 方法执行结果（无返回值方法返回 null）\n     * @throws Exception 封装所有可能的反射异常\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }\n\n    /**\n     * 重载方法：简化无参方法的调用\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n        throws Exception {\n        Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n        return returnType.cast(result);\n    }\n}\n```\n\nThe new feature is 判断给定类是否为Bootstrap ClassLoader.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static boolean isBootstrapClassLoader(String className)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#21", "good_example_response": "```java\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testIsBootstrapClassLoader clean test", "extra_content": {"query": "判断给定类是否为Bootstrap ClassLoader", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/21.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 65, "end_line": 73, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class ClassLoaderUtils {\n    private ClassLoaderUtils() {\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    public static URL[] getURLs(ClassLoader classLoader) {\n        if (classLoader instanceof URLClassLoader) {\n            return ((URLClassLoader) classLoader).getURLs();\n        }\n        try {\n            Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                ucpField.setAccessible(true);\n                return null;\n            });\n            Object ucp = ucpField.get(classLoader);\n            Field pathField = ucp.getClass().getDeclaredField(\"path\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                pathField.setAccessible(true);\n                return null;\n            });\n            ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n            return path.toArray(new URL[0]);\n        } catch (Exception e) {\n            throw new DevsporeCicException(e);\n        }\n    }\n\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }\n\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 动态加载类并执行指定方法\n     *\n     * @param loader 类加载器\n     * @param className 完整类名（如 \"com.example.Plugin\"）\n     * @param methodName 方法名（如 \"run\"）\n     * @param parameterTypes 方法参数类型数组（无参数传 null）\n     * @param args 方法参数值数组（无参数传 null）\n     * @return 方法执行结果（无返回值方法返回 null）\n     * @throws Exception 封装所有可能的反射异常\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }\n\n    /**\n     * 重载方法：简化无参方法的调用\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType)\n        throws Exception {\n        Object result = loadAndInvoke(loader, className, methodName, null, null, returnType);\n        return returnType.cast(result);\n    }\n}\n```\n\nThe new feature is 获取Extension ClassLoader加载路径.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static URL[] getExtensionClassLoaderUrls()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#22", "good_example_response": "```java\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#testGetExtensionClassLoaderUrls clean test", "extra_content": {"query": "获取Extension ClassLoader加载路径", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/22.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 75, "end_line": 84, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class StringUtils {\n    public static final String LF;\n    public static final String EMPTY;\n    public static final String COMMA;\n    public static final String DOT;\n    public static String capitalize(String str); /* Capitalize a {@code String}, changing the first letter to upper case as per {@link Character#toUpperCase(char)}. No other letters are changed. */\n    public static String getFilename(String path); /* Extract the filename from the given Java resource path, e.g. {@code \"mypath/myfile.txt\" &rarr; \"myfile.txt\"}. */\n    public static String applyRelativePath(String path, String relativePath); /* Apply the given relative path to the given Java resource path, assuming standard Java folder separation (i.e. \"/\" separators). */\n    public static String replace(String inString, String oldPattern, String newPattern); /* Replace all occurrences of a substring within a string with another string. */\n    public static String deleteAny(String inString, String charsToDelete); /* Delete any character in a given {@code String}. */\n    public static String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete); /* Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. delimiter characters) delete all new lines and line feeds in a {@code String} */\n    public static String[] delimitedListToStringArray(String str, String delimiter); /* Take a {@code String} that is a delimited list and convert it into a {@code String} array. <p>A single {@code delimiter} may consist of more than one character, but it will still be considered as a single delimiter string, rather than as bunch of potential delimiter characters, in contrast to {@link #tokenizeToStringArray}. delimiter characters) */\n    public static boolean hasLength(String str); /* Check that the given {@code String} is neither {@code null} nor of length 0. <p>Note: this method returns {@code true} for a {@code String} that purely consists of whitespace. */\n    public static String collectionToDelimitedString(Collection<?> coll, String delim, String prefix, String suffix); /* Convert a {@link Collection} to a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations. */\n    public static String collectionToDelimitedString(Collection<?> coll, String delim); /* Convert a {@code Collection} into a delimited {@code String} (e.g. CSV). <p>Useful for {@code toString()} implementations. */\n    public static String cleanPath(String path); /* Normalize the path by suppressing sequences like \"path/..\" and inner simple dots. <p>The result is convenient for path comparison. For other uses, notice that Windows separators (\"\\\") are replaced by simple slashes. <p><strong>NOTE</strong> that {@code cleanPath} should not be depended upon in a security context. Other mechanisms should be used to prevent path-traversal issues. */\n    public static boolean hasText(String str); /* Check whether the given {@code String} contains actual <em>text</em>. <p>More specifically, this method returns {@code true} if the {@code String} is not {@code null}, its length is greater than 0, and it contains at least one non-whitespace character. contain whitespace only */\n    public static String[] toStringArray(Collection<String> collection); /* Copy the given {@link Collection} into a {@code String} array. <p>The {@code Collection} must contain {@code String} elements only. */\n    public static String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens,\n            boolean ignoreEmptyTokens); /* Tokenize the given {@code String} into a {@code String} array via a {@link StringTokenizer}. <p>The given {@code delimiters} string can consist of any number of delimiter characters. Each of those characters can be used to separate tokens. A delimiter is always a single character; individually considered as a delimiter) trimming; StringTokenizer will not consider subsequent delimiters as token in the first place). */\n    public static boolean equalsIgnoreCase(String str1, String str2); /* <p>Compares two CharSequences, returning {@code true} if they represent equal sequences of characters, ignoring case.</p> */\n    public static String deleteWhitespace(String str); /* <p>Deletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.</p> */\n    public static boolean startsWithIgnoreCase(final CharSequence str, final CharSequence prefix); /* <p>Case insensitive check if a CharSequence starts with a specified prefix.</p> <p>{@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The comparison is case insensitive.</p> */\n    public static boolean startsWith(final CharSequence str, final CharSequence prefix); /* <p>Check if a CharSequence starts with a specified prefix.</p> <p>{@code null}s are handled without exceptions. Two {@code null} references are considered to be equal. The comparison is case sensitive.</p> */\n    public static boolean isAnyBlank(final CharSequence... css); /* <p>Checks if any one of the CharSequences are blank (\"\") or null and not whitespace only..</p> */\n    public static boolean isNoneBlank(final CharSequence... css); /* <p>Checks if none of the CharSequences are blank (\"\") or null and whitespace only..</p> */\n    public static boolean contains(final CharSequence str, final CharSequence searchStr); /* Checks if CharSequence contains a search CharSequence. */\n    public static boolean containsIgnoreCase(final CharSequence str, final CharSequence searchStr); /* Checks if CharSequence contains a search CharSequence irrespective of case, handling {@code null}. Case-insensitivity is defined as by {@link String#equalsIgnoreCase(String)}. <p>A {@code null} CharSequence will return {@code false}.</p> null} string input */\n    public static String escapeJavaScript(String str);\n    public static String join(Collection collection, String separator); /* <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> */\n    public static String substringBetween(String str, String open, String close); /* Substring between two index. */\n    public static String trim(final String str); /* <p>Removes control characters (char &lt;= 32) from both ends of this String, handling {@code null} by returning {@code null}.</p> */\n    public static boolean equals(String str1, String str2); /* <p>Compares two CharSequences, returning {@code true} if they represent equal sequences of characters.</p> */\n    public static String defaultIfEmpty(String str, String defaultStr); /* <p>Returns either the passed in CharSequence, or if the CharSequence is empty or {@code null}, the value of {@code defaultStr}.</p> */\n    public static boolean isEmpty(String str); /* <p>Checks if a str is empty (\"\") or null.</p> */\n    public static boolean isNotEmpty(String str); /* <p>Checks if a str is not empty (\"\") or not null.</p> */\n    public static boolean isNotBlank(String str); /* <p>Checks if a string is not empty (\"\"), not null and not whitespace only.</p> */\n    public static boolean isBlank(final CharSequence cs); /* <p>Checks if a string is  empty (\"\"), null and  whitespace only.</p> */\n    public static String newStringForUtf8(byte[] bytes); /* <p>Create a string with encoding format as utf8.</p> */\n}\n\npublic class NacosUser {\n    public void setGlobalAdmin(boolean globalAdmin);\n    public boolean isGlobalAdmin();\n    public void setToken(String token);\n    public String getToken();\n}\n\npublic final class JacksonUtils {\n    public static JavaType constructJavaType(Type type); /* construct java type -> Jackson Java Type. */\n    public static JsonNode transferToJsonNode(Object obj); /* Parse object to Jackson {@link JsonNode}. */\n    public static ArrayNode createEmptyArrayNode(); /* Create a new empty Jackson {@link ArrayNode}. */\n    public static ObjectNode createEmptyJsonNode(); /* Create a new empty Jackson {@link ObjectNode}. */\n    public static void registerSubtype(Class<?> clz, String type); /* Register sub type for child class. */\n    public static JsonNode toObj(String json); /* Json string deserialize to Jackson {@link JsonNode}. */\n    public static <T> T toObj(InputStream inputStream, Type type); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, TypeReference<T> typeReference); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, Type type); /* Json string deserialize to Object. */\n    public static <T> T toObj(String json, Class<T> cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, TypeReference<T> typeReference); /* Json string deserialize to Object. */\n    public static <T> T toObj(InputStream inputStream, Class<T> cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, Type cls); /* Json string deserialize to Object. */\n    public static <T> T toObj(byte[] json, Class<T> cls); /* Json string deserialize to Object. */\n    public static byte[] toJsonBytes(Object obj); /* Object to json string byte array. */\n    public static String toJson(Object obj); /* Object to json string. */\n}\n```\n\nThe context above is:\n```java\npublic final class NacosSignatureAlgorithm {\n\n    private static final String JWT_SEPERATOR = \".\";\n\n    private static final int HEADER_POSITION = 0;\n\n    private static final int PAYLOAD_POSITION = 1;\n\n    private static final int SIGNATURE_POSITION = 2;\n\n    private static final int JWT_PARTS = 3;\n\n    private static final String HS256_JWT_HEADER = \"eyJhbGciOiJIUzI1NiJ9\";\n\n    private static final String HS384_JWT_HEADER = \"eyJhbGciOiJIUzM4NCJ9\";\n\n    private static final String HS512_JWT_HEADER_OLD = \"eyJhbGciOiJIUzUxMiJ9\";\n\n    private static final String HS512_JWT_HEADER = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9\";\n\n    private static final Base64.Encoder URL_BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();\n\n    private static final Base64.Decoder URL_BASE64_DECODER = Base64.getUrlDecoder();\n\n    private static final Map<String, NacosSignatureAlgorithm> MAP = new HashMap<>(4);\n\n    public static final NacosSignatureAlgorithm HS256 = new NacosSignatureAlgorithm(\"HS256\", \"HmacSHA256\",\n            HS256_JWT_HEADER);\n\n    public static final NacosSignatureAlgorithm HS384 = new NacosSignatureAlgorithm(\"HS384\", \"HmacSHA384\",\n            HS384_JWT_HEADER);\n\n    public static final NacosSignatureAlgorithm HS512 = new NacosSignatureAlgorithm(\"HS512\", \"HmacSHA512\",\n            HS512_JWT_HEADER);\n\n    public static final NacosSignatureAlgorithm HS512_OLD = new NacosSignatureAlgorithm(\"HS512\", \"HmacSHA512\",\n        HS512_JWT_HEADER_OLD);\n\n    private final String algorithm;\n\n    private final String jcaName;\n\n    private final String header;\n\n    static {\n        MAP.put(HS256_JWT_HEADER, HS256);\n        MAP.put(HS384_JWT_HEADER, HS384);\n        MAP.put(HS512_JWT_HEADER, HS512);\n        MAP.put(HS512_JWT_HEADER_OLD, HS512_OLD);\n    }\n\n    /**\n     * verify jwt.\n     *\n     * @param jwt complete jwt string\n     * @param key for signature\n     * @return object for payload\n     * @throws AccessException access exception\n     */\n    public static NacosUser verify(String jwt, Key key) throws AccessException {\n        if (StringUtils.isBlank(jwt)) {\n            throw new AccessException(\"user not found!\");\n        }\n        String[] split = jwt.split(\"\\\\.\");\n        if (split.length != JWT_PARTS) {\n            throw new AccessException(\"token invalid!\");\n        }\n        String header = split[HEADER_POSITION];\n        String payload = split[PAYLOAD_POSITION];\n        String signature = split[SIGNATURE_POSITION];\n\n        NacosSignatureAlgorithm signatureAlgorithm = MAP.get(header);\n        if (signatureAlgorithm == null) {\n            throw new AccessException(\"unsupported signature algorithm\");\n        }\n        NacosUser user = signatureAlgorithm.verify(header, payload, signature, key);\n        // add by cse, validate user info\n        if (user.getUserName().equals(\"cse\") && AuthConstants.GLOBAL_ADMIN_ROLE.equals(user.getAuth())) {\n            user.setGlobalAdmin(true);\n        }\n        user.setToken(jwt);\n        return user;\n    }\n\n    /**\n     * verify jwt.\n     *\n     * @param header    header of jwt\n     * @param payload   payload of jwt\n     * @param signature signature of jwt\n     * @param key       for signature\n     * @return object for payload\n     * @throws AccessException access exception\n     */\n    public NacosUser verify(String header, String payload, String signature, Key key) throws AccessException {\n        Mac macInstance = getMacInstance(key);\n        byte[] bytes = macInstance.doFinal((header + JWT_SEPERATOR + payload).getBytes(StandardCharsets.US_ASCII));\n        if (!URL_BASE64_ENCODER.encodeToString(bytes).equals(signature)) {\n            throw new AccessException(\"Invalid signature\");\n        }\n        NacosJwtPayload nacosJwtPayload = JacksonUtils.toObj(URL_BASE64_DECODER.decode(payload), NacosJwtPayload.class);\n        if (nacosJwtPayload.getExp() >= TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis())) {\n            // add by cse, valid token info\n            NacosUser nacosUser = new NacosUser();\n            nacosUser.setAuth(nacosJwtPayload.getAuth());\n            nacosUser.setPerm(nacosJwtPayload.getPerm());\n            nacosUser.setUserName(nacosJwtPayload.getSub());\n            return nacosUser;\n        }\n\n        throw new AccessException(\"token expired!\");\n    }\n\n    /**\n     * get jwt expire time in seconds.\n     *\n     * @param jwt complete jwt string\n     * @param key for signature\n     * @return expire time in seconds\n     * @throws AccessException access exception\n     */\n    public static long getExpiredTimeInSeconds(String jwt, Key key) throws AccessException {\n        if (StringUtils.isBlank(jwt)) {\n            throw new AccessException(\"user not found!\");\n        }\n        String[] split = jwt.split(\"\\\\.\");\n        if (split.length != JWT_PARTS) {\n            throw new AccessException(\"token invalid!\");\n        }\n        String header = split[HEADER_POSITION];\n        String payload = split[PAYLOAD_POSITION];\n        String signature = split[SIGNATURE_POSITION];\n\n        NacosSignatureAlgorithm signatureAlgorithm = MAP.get(header);\n        if (signatureAlgorithm == null) {\n            throw new AccessException(\"unsupported signature algorithm\");\n        }\n        return signatureAlgorithm.getExpireTimeInSeconds(header, payload, signature, key);\n    }\n\n    /**\n     * get jwt expire time in seconds.\n     *\n     * @param header    header of jwt\n     * @param payload   payload of jwt\n     * @param signature signature of jwt\n     * @param key       for signature\n     * @return expire time in seconds\n     * @throws AccessException access exception\n     */\n    public long getExpireTimeInSeconds(String header, String payload, String signature, Key key)\n            throws AccessException {\n        Mac macInstance = getMacInstance(key);\n        byte[] bytes = macInstance.doFinal((header + JWT_SEPERATOR + payload).getBytes(StandardCharsets.US_ASCII));\n        if (!URL_BASE64_ENCODER.encodeToString(bytes).equals(signature)) {\n            throw new AccessException(\"Invalid signature\");\n        }\n        NacosJwtPayload nacosJwtPayload = JacksonUtils.toObj(URL_BASE64_DECODER.decode(payload), NacosJwtPayload.class);\n        return nacosJwtPayload.getExp();\n    }\n\n    private NacosSignatureAlgorithm(String alg, String jcaName, String header) {\n        this.algorithm = alg;\n        this.jcaName = jcaName;\n        this.header = header;\n    }\n```\n\nThe context below is:\n```java\n\n    private Mac getMacInstance(Key key) {\n        try {\n            Mac instance = Mac.getInstance(jcaName);\n            instance.init(key);\n            return instance;\n        } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n            throw new IllegalArgumentException(\"Invalid key: \" + key);\n        }\n    }\n\n    public String getAlgorithm() {\n        return algorithm;\n    }\n\n    public String getJcaName() {\n        return jcaName;\n    }\n\n    public String getHeader() {\n        return header;\n    }\n}\n```\n\nThe new feature is 根据JWT token的结构，生成JWT token.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\n String sign(NacosJwtPayload nacosJwtPayload, Key key)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "nacos_f00563108#25", "good_example_response": "```java\n    String sign(NacosJwtPayload nacosJwtPayload, Key key) {\n        String jwtWithoutSign = header + JWT_SEPERATOR + URL_BASE64_ENCODER.encodeToString(\n                nacosJwtPayload.toString().getBytes(StandardCharsets.UTF_8));\n        Mac macInstance = getMacInstance(key);\n        byte[] bytes = jwtWithoutSign.getBytes(StandardCharsets.US_ASCII);\n        String signature = URL_BASE64_ENCODER.encodeToString(macInstance.doFinal(bytes));\n        return jwtWithoutSign + JWT_SEPERATOR + signature;\n    }\n    ```", "reward_command": "cd /docker/JavaRunProject/nacos_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml -Dtest=com.alibaba.nacos.plugin.auth.impl.token.impl.JwtTokenManagerTest.java", "extra_content": {"query": "根据JWT token的结构，生成JWT token", "diff_path": "/docker/JavaRunProject/nacos_f00563108/diff/25.patch", "test_result": "fail", "file_path": "/plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/jwt/NacosSignatureAlgorithm.java", "start_line": 209, "end_line": 217, "work_dir": "/docker/JavaRunProject/nacos_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ShardingContext {\n    public static void clean();\n    public static List<Handler> getHandlerList();\n    public static void addHandler(Handler handler);\n    public static Object getParams(String key);\n    public static void setParams(String key, Object value);\n}\n```\n\nThe context above is:\n```java\n@Intercepts({\n    @Signature(\n            type = StatementHandler.class,\n            method = \"prepare\",\n            args = {Connection.class, Integer.class})\n})\n/**\n * 表分片处理拦截器\n *\n */\npublic class TableShardInterceptor implements Interceptor {\n    private static final ReflectorFactory DEFAULT_REFLECTOR_FACTORY = new DefaultReflectorFactory();\n```\n\nThe context below is:\n```java\n\n    @Override\n    public Object plugin(final Object target) {\n        if (target instanceof StatementHandler) {\n            return Plugin.wrap(target, this);\n        } else {\n            return target;\n        }\n    }\n\n    @Override\n    public void setProperties(final Properties properties) {}\n}\n```\n\nThe new feature is 自定义一个mybatis的拦截器，拦截sql后增加自定义行为并执行.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic Object intercept(final Invocation invocation) throws Throwable\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#27", "good_example_response": "```java\n    public Object intercept(final Invocation invocation) throws Throwable {\n        List<Handler> handlerList = ShardingContext.getHandlerList();\n        if (handlerList == null) {\n            return invocation.proceed();\n        }\n\n        final StatementHandler statementHandler = (StatementHandler) invocation.getTarget();\n        final MetaObject metaObject =\n            MetaObject.forObject(\n                statementHandler,\n                SystemMetaObject.DEFAULT_OBJECT_FACTORY,\n                SystemMetaObject.DEFAULT_OBJECT_WRAPPER_FACTORY,\n                DEFAULT_REFLECTOR_FACTORY);\n        String SQL = (String) metaObject.getValue(\"delegate.boundSql.sql\");\n\n        for (Handler handler : handlerList) {\n            SQL = handler.replace(SQL);\n        }\n        metaObject.setValue(\"delegate.boundSql.sql\", SQL);\n\n        return invocation.proceed();\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.interceptor.TableShardInterceptorTest.java", "extra_content": {"query": "自定义一个mybatis的拦截器，拦截sql后增加自定义行为并执行", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/27.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/interceptor/TableShardInterceptor.java", "start_line": 34, "end_line": 56, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RiskComplianceManager {\n    public static final int SENSITIVE_WORD_MAX_LEN; /* 敏感词的数据库表内容字段最大长度 */\n    public static final String RESPONSE_PHASE; /* 表示是输出时被风控拦截的字符串 */\n    public static final String REQUEST_PHASE; /* 表示是输入时被风控拦截的字符串 */\n    public static final int TEXT_CHECK_TASK_UUID_LEN;\n    public int getRiskCheckWordLength(); /* 获取风控检查的敏感词长度 */\n    public boolean isSensitiveCheckPromptEnable(); /* 获取prompt攻击检测开关状态 */\n    public static String truncateRiskInfo(String riskInfo); /* 对记录入库的数据进行截断，避免字符串超过数据库字段risk_info长度限制 */\n    public MatchedResult riskTextAttackDetect(String userId, String taskId, String text, boolean isConfidential,\n        String traceId); /* 执行aics prompt注入攻击检查 */\n    public MatchedResult riskComplianceCheck(String userId, String taskId, String text, boolean isConfidential, String domainId); /* 风险控制检查方法实现 */\n    public boolean languageCheck(String taskId, String text, boolean isConfidential, String backendServiceName,\n        String traceId); /* 小语种检查 */\n}\n\npublic class EngineProperties {\n    public boolean isHcsSiteEnv(); /* 判断是否为hcs站点 */\n    public boolean isHcEnv(); /* 判断是否为hc站点 */\n}\n\npublic class SseServer {\n    public void closeWithError(String connectionId, Throwable throwable); /* 错误情况下关闭上游连接 */\n    public void close(String connectionId); /* 正常情况下关闭连接，主要是关闭到上游的连接 */\n    public void send(String connectionId, String content, String traceId); /* 向客户端发送消息, 这个方法用于向上游（插件、web端等)发送数据 */\n    public SseEmitter connect(String connectionId, String traceId); /* 客户端连接sse服务器, 这里是建立engine和插件的长连接 */\n    public static int getCurrentConcurrency(); /* 获取当前系统容量 */\n}\n```\n\nThe context above is:\n```java\n@Async\n@Service\npublic class AsyncService {\n    private static final Logger LOGGER = Logger.getLogger(AsyncService.class);\n\n    @Resource\n    private RiskComplianceManager riskComplianceManager;\n\n    @Resource\n    private UserRiskManageService riskManageService;\n\n    @Resource\n    private EngineProperties engineProperties;\n\n    @Resource\n    private SseServer sseServer;\n\n    /**\n     * 异步执行aics prompt注入攻击检查\n     *\n     * @param sessionId 会话id\n     * @param checkData 检查内容\n     * @param isConfidential 是否为敏感数据\n     * @param userRiskRecord 访问记录对象\n     * @param phase 执行检查的阶段\n     */\n    public void attackCheck(String sessionId, String checkData, boolean isConfidential, UserRiskRecord userRiskRecord,\n        String phase) {\n        // request阶段，判断是否为对话场景，不是对话场景无需执行检查\n        if (StringUtils.equals(REQUEST_PHASE, phase) && !AgentType.ChatAgent.name()\n            .equals(userRiskRecord.getAgentType())) {\n            return;\n        }\n        String traceId = userRiskRecord.getTraceId();\n        String userId = userRiskRecord.getUserId();\n\n        LOGGER.info(\"begin text attack detect, phase:{}, traceId:{}, sessionId:{}\", phase, traceId, sessionId);\n        MatchedResult result = riskComplianceManager.riskTextAttackDetect(userId, sessionId, checkData, isConfidential,\n            traceId);\n        if (!result.isMatched()) {\n            LOGGER.info(\"end text attack detect, phase:{}, traceId:{}, sessionId:{}\", phase, traceId, sessionId);\n            return;\n        }\n        LOGGER.warn(\"text attack detect failed, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n            userId, traceId);\n        checkResultAndRecordAsync(result);\n        interceptAttack(sessionId, phase, userRiskRecord);\n    }\n```\n\nThe context below is:\n```java\n\n    private void interceptAttack(String sessionId, String phase, UserRiskRecord userRiskRecord) {\n        if (!engineProperties.isSensitiveCheckAicsInterceptEnable()) {\n            LOGGER.info(\"aics intercept is not enable, skip forbidden user and close connection\");\n            return;\n        }\n        riskManageService.autoForbiddenUserAsync(userRiskRecord);\n        LOGGER.warn(\"start to close connection, phase:{}, connectionId:{}, userId:{}, traceId:{}\", phase, sessionId,\n            userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n        // 关闭上下游连接\n        sseServer.closeWithError(sessionId, new NotSafePromptException(ErrorCode.NOT_SAFE_PROMPT_ERROR));\n        LOGGER.warn(\"end to close connection, phase:{}, connectionId: {}, userId:{}, traceId:{}\", phase, sessionId,\n            userRiskRecord.getUserId(), userRiskRecord.getTraceId());\n    }\n}\n```\n\nThe new feature is 异步记录风控拦截记录.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprivate void checkResultAndRecordAsync(MatchedResult result)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "SnapEngineService_h00636345#28", "good_example_response": "```java\n    private void checkResultAndRecordAsync(MatchedResult result) {\n        CompletableFuture.completedFuture(result).thenAcceptAsync(matchedResult -> {\n            UserRiskRecord userRiskRecord = new UserRiskRecord();\n            userRiskRecord.setRiskInfo(result.getMatchWord());\n            userRiskRecord.setRiskType(result.getMatchType());\n            userRiskRecord.setRiskScore(result.getRiskScore());\n            riskManageService.addUserRiskRecord(userRiskRecord);\n        });\n    }\n```", "reward_command": "cd /docker/JavaRunProject/SnapEngineService_h00636345;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml -Dtest=com.huawei.codearts.engine.service.AsyncServiceTest#test_attackCheck_should_close_connection_when_risk_compliance_not_pass_and_intercept_unable", "extra_content": {"query": "异步记录风控拦截记录", "diff_path": "/docker/JavaRunProject/SnapEngineService_h00636345/diff/28.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/codearts/engine/service/AsyncService.java", "start_line": 81, "end_line": 90, "work_dir": "/docker/JavaRunProject/SnapEngineService_h00636345/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@MappedJdbcTypes(JdbcType.LONGVARCHAR)\n@MappedTypes(Cddl.class)\npublic class CddlTypeHandler extends JsonValueTypeHandler<Cddl> {\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 自定义mybatis json typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprotected Type type()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#31", "good_example_response": "```java\n    protected Type type() {\n        return (new TypeToken<Cddl>() {\n        }).getType();\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.CddlTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis json typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/31.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/CddlTypeHandler.java", "start_line": 25, "end_line": 28, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class ListElemtIsStringTypeHandler extends ListTypeHandler<List<String>> {\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 自定义mybatis List typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprotected Type type()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#32", "good_example_response": "```java\n    protected Type type() {\n        return (new TypeToken<List<String>>() {\n        }).getType();\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.ListElemtIsStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis List typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/32.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/ListElemtIsStringTypeHandler.java", "start_line": 18, "end_line": 21, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@MappedJdbcTypes(JdbcType.LONGVARCHAR)\n@MappedTypes(Map.class)\npublic class MapObjectTypeHandler extends BaseTypeHandler<Map<String, Object>> {\n```\n\nThe context below is:\n```java\n\n    @Override\n    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {\n        return getMapByJson(rs.getString(columnName));\n    }\n\n    @Override\n    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n        return getMapByJson(rs.getString(columnIndex));\n    }\n\n    @Override\n    public Map<String, Object> getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n        return getMapByJson(cs.getString(columnIndex));\n    }\n\n    private Map<String, Object> getMapByJson(String json) {\n        try {\n            return StringUtils.isBlank(json)\n                    ? new HashMap<>()\n                    : JsonUtil.fromJson(json, (new TypeToken<Map<String, Object>>() {\n                    }).getType());\n        } catch (Exception e) {\n            log.error(e.getMessage());\n        }\n        return null;\n    }\n}\n```\n\nThe new feature is 自定义mybatis Map typeHandler.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType) throws SQLException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#33", "good_example_response": "```java\n    public void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType)\n            throws SQLException {\n        if (parameter == null) {\n            ps.setNull(i, Types.LONGVARCHAR);\n            return;\n        }\n        ps.setString(i, JsonUtil.toJson(parameter));\n    }\n```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.mapper.typehandler.MapStringTypeHandlerTest.java", "extra_content": {"query": "自定义mybatis Map typeHandler", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/33.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/mapper/typehandler/MapObjectTypeHandler.java", "start_line": 36, "end_line": 44, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\n@Configuration\n@MapperScan({\"com.huawei.devcloud.octopusscheduler.mapper\",\n    \"com.huawei.devcloud.octopusscheduler.powerschedule.mappper\"})\npublic class DataSourceConfig {\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 初始化mybatis sql数据源.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "octopusscheduler_f00563108#34", "good_example_response": "```java\n    public SqlSessionFactoryBean init(DynamicRoutingDataSource dataSource) throws IOException {\n        log.info(\">>> Start init datasource\");\n\n        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n        sqlSessionFactoryBean.setDataSource(dataSource);\n        sqlSessionFactoryBean.setVfs(SpringBootVFS.class);\n        sqlSessionFactoryBean.setConfigLocation(new ClassPathResource(\"mybatis-config.xml\"));\n        sqlSessionFactoryBean.setMapperLocations(\n            new PathMatchingResourcePatternResolver().getResources(\"classpath:**/mapper/*.xml\"));\n        sqlSessionFactoryBean.setPlugins(new TableShardInterceptor());\n\n        log.info(\"<<< End init datasource\");\n        return sqlSessionFactoryBean;\n    }```", "reward_command": "cd /docker/JavaRunProject/octopusscheduler_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.devcloud.octopusscheduler.powerschedule.sharding.datasource.config.DataSourceConfigTest.java", "extra_content": {"query": "初始化mybatis sql数据源", "diff_path": "/docker/JavaRunProject/octopusscheduler_f00563108/diff/34.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/devcloud/octopusscheduler/powerschedule/sharding/datasource/config/DataSourceConfig.java", "start_line": 23, "end_line": 36, "work_dir": "/docker/JavaRunProject/octopusscheduler_f00563108/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class OperateAuditManager {\n    public Page<OperateRecord> findAll(Long resourceId, ResourceType resourceType, Integer pageNum, Integer pageSize) throws WrongParameterException;\n    public void save(List<OperateRecord> updateEvents);\n    public <T> List<OperateRecord> getOperateRecords(T oldVo, T newVo, String operator,\n                                                     ResourceType resourceType, Long objectId);\n}\n\npublic class VmPoolDaoV2 {\n    public List<VmPoolDO> findAllByPoolIds(List<Long> poolIds);\n    public Integer batchUpdatePoolInfo(List<Long> poolIds, String dcsName);\n    public Integer countVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                List<String> zone);\n    public List<VmPoolDO> findVmPools(List<String> poolNames, List<Long> poolIds, List<String> dcsName, List<String> type,\n                                      List<String> zone, Integer pageNum, Integer pageSize);\n    public int countByPoolId(Long poolId);\n    public List<VmPoolDO> getDistinctDcsNamesAndDatabases(Zone zone);\n    public int batchInsertPoolInfo(List<VmPoolDO> vmPoolList);\n}\n\npublic class PageUtil {\n    public static <T> Page<T> buildPage(Pageable pageable, long count, Supplier<List<T>> contentSupplier);\n    public static Pair<Integer, Integer> checkPage(Integer pageNum, Integer pageSize) throws WrongParameterException;\n}\n```\n\nThe context above is:\n```java\n@Service\n@RequiredArgsConstructor\npublic class AgentPoolServiceImpl implements AgentPoolService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AgentPoolServiceImpl.class);\n\n    private final VmPoolDao vmPoolDao;\n\n    private final VmPoolDaoV2 vmPoolDaoV2;\n\n    private final IDcsInfoDao dcsInfoDao;\n\n    private final OperateAuditManager operateAuditManager;\n\n    @Override\n    @Transactional\n    public VmPoolDO updatePoolInfo(VmPoolDO vmPoolDO) throws Exception {\n        if (!checkVmPool(vmPoolDO)) {\n            String message = String.format(Locale.ROOT, \"input body error, vmPoolDO = {}\", vmPoolDO);\n            throw new WrongParameterException(message);\n        }\n        VmPoolDO oldVmPoolDO = getVmPoolDO(vmPoolDao.findOneByPoolId(vmPoolDO.getPoolId()).get());\n        VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n        LOGGER.info(\"updatePoolInfo: poolDO = {}\", poolDO);\n        operateAuditManager.save(operateAuditManager.getOperateRecords(oldVmPoolDO, poolDO\n                , DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, poolDO.getPoolId()));\n        return poolDO;\n    }\n\n    @Override\n    @Transactional\n    public List<VmPoolDO> batchUpdatePoolInfo(Map<String, Object> params) throws WrongParameterException {\n        List<Long> poolIds = getPoolIds(params);\n        String dcsName = getDcsName(params);\n        List<VmPoolDO> vmPoolDOS = vmPoolDaoV2.findAllByPoolIds(poolIds);\n        if (CollectionUtil.isEmpty(vmPoolDOS)) {\n            throw new WrongParameterException(\"DCS信息不存在!\");\n        }\n        Map<Zone, List<VmPoolDO>> zoneListMap = vmPoolDOS.stream()\n                .collect(Collectors.groupingBy(VmPoolDO::getZone));\n        if (zoneListMap.size() > 1) {\n            throw new WrongParameterException(\"暂不支持修改不同区域下的DCS!\");\n        }\n        Integer num = vmPoolDaoV2.batchUpdatePoolInfo(poolIds, dcsName);\n        LOGGER.info(\"batchUpdatePoolInfo success! ,num = {}\", num);\n        addOperationLog(dcsName, vmPoolDOS);\n        return vmPoolDaoV2.findAllByPoolIds(poolIds);\n    }\n\n    private void addOperationLog(String dcsName, List<VmPoolDO> vmPoolDOS) {\n        vmPoolDOS.forEach(vmPoolDO -> {\n            VmPoolDO vmPoolDONew = getVmPoolDO(vmPoolDO);\n            vmPoolDONew.setDcsName(dcsName);\n            List<OperateRecord> updateEvents = operateAuditManager.getOperateRecords(vmPoolDO, vmPoolDONew,\n                    DevCloudTokenStore.getUserId(), ResourceType.VM_POOL, vmPoolDO.getPoolId());\n            operateAuditManager.save(updateEvents);\n        });\n    }\n\n    private static VmPoolDO getVmPoolDO(VmPoolDO vmPoolDO) {\n        VmPoolDO vmPoolDONew = new VmPoolDO();\n        vmPoolDONew.setId(vmPoolDO.getId());\n        vmPoolDONew.setPoolId(vmPoolDO.getPoolId());\n        vmPoolDONew.setName(vmPoolDO.getName());\n        vmPoolDONew.setType(vmPoolDO.getType());\n        vmPoolDONew.setZone(vmPoolDO.getZone());\n        vmPoolDONew.setDatabase(vmPoolDO.getDatabase());\n        vmPoolDONew.setDcsName(vmPoolDO.getDcsName());\n        return vmPoolDONew;\n    }\n\n    private static List<Long> getPoolIds(Map<String, Object> params) throws WrongParameterException {\n        if (params.get(\"poolIds\") instanceof List && CollectionUtil.isNotEmpty((List<Long>) params.get(\"poolIds\"))) {\n            return (List<Long>) params.get(\"poolIds\");\n        }\n        throw new WrongParameterException(\"请选择正确的DCS!\");\n    }\n\n    private static String getDcsName(Map<String, Object> params) throws WrongParameterException {\n        if (ObjectUtil.isNotEmpty(params.get(\"dcsName\"))) {\n            return (String) params.get(\"dcsName\");\n        }\n        throw new WrongParameterException(\"请确认要修改的dcsName!\");\n    }\n\n    private boolean checkVmPool(VmPoolDO vmPoolDO) {\n        if (vmPoolDO.getPoolId() == null\n                || StringUtils.isEmpty(vmPoolDO.getName())\n                || StringUtils.isEmpty(vmPoolDO.getDcsName())\n                || StringUtils.isEmpty(vmPoolDO.getType())\n                || vmPoolDO.getZone() == null\n                || vmPoolDO.getDatabase() == null) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public Page<VmPoolDO> getAllPoolInfo(String poolNames, List<Long> poolIds, String dcsName, String type, String zone,\n                                         Integer pageNum, Integer pageSize) throws Exception {\n        pageNum = PageUtil.checkPage(pageNum, pageSize).getLeft();\n        pageSize = PageUtil.checkPage(pageNum, pageSize).getRight();\n\n        Pageable pageable = PageRequest.of(pageNum - 1, pageSize);\n\n        List<String> names = splitString(poolNames);\n        List<String> dcsNames = splitString(dcsName);\n        List<String> types = splitString(type);\n        List<String> zones = splitString(zone);\n        Integer count = vmPoolDaoV2.countVmPools(names, poolIds, dcsNames, types, zones);\n        return PageUtil.buildPage(pageable, count, () -> vmPoolDaoV2.findVmPools(names, poolIds, dcsNames, types, zones,\n                (int) pageable.getOffset(), pageable.getPageSize()));\n    }\n\n    private static List<String> splitString(String str) {\n        if (StringUtils.isNotBlank(str)) {\n            return Arrays.stream(str.split(\",\")).collect(Collectors.toList());\n        }\n        return Collections.emptyList();\n    }\n\n    @Override\n    public VmPoolDO addPoolInfo(VmPoolDO vmPoolDO) throws Exception {\n        int count = vmPoolDaoV2.countByPoolId(vmPoolDO.getPoolId());\n        if (count > 0) {\n            throw new WrongParameterException(\"the pool_id must be unique ！\");\n        }\n        VmPoolDO poolDO = vmPoolDao.save(vmPoolDO);\n        LOGGER.info(\"addPoolInfo: poolDO = {}\", poolDO);\n        return poolDO;\n    }\n\n    @Override\n    @Transactional\n    public void deletePoolInfo(Long poolId) {\n        try {\n            vmPoolDao.deleteByPoolId(poolId);\n            String message = String.format(\"delete pool success, poolId = %d\", poolId);\n            LOGGER.info(message);\n        } catch (Exception e) {\n            LOGGER.error(\"delete pool exception, e = \", e);\n        }\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "agentmanager_y00560175#38", "good_example_response": "```java\n    public List<PoolDcsInfo> getPoolByZone(String zone) throws ServerException {\n        try {\n            List<VmPoolDO> namesAndDatabases = vmPoolDaoV2.getDistinctDcsNamesAndDatabases(Zone.fromValue(zone));\n            Map<String, List<Integer>> dcsMap =\n                    namesAndDatabases.stream()\n                            .collect(\n                                    Collectors.groupingBy(\n                                            VmPoolDO::getDcsName, // key extractor\n                                            Collectors.mapping(\n                                                    VmPoolDO::getDatabase, // value extractor\n                                                    Collectors.toList() // value collector\n                                            )));\n            List<DcsInfoDO> dcsInfoDOS = dcsInfoDao.findAllByZone(Zone.fromValue(zone));\n            List<PoolDcsInfo> poolDcsInfos = new ArrayList<>();\n            for (Map.Entry<String, List<Integer>> entry : dcsMap.entrySet()) {\n                String dcsName = entry.getKey();\n                Optional<DcsInfoDO> dcsOptional =\n                        dcsInfoDOS.stream().filter(dcsInfoDO -> dcsInfoDO.getName().equals(dcsName)).findFirst();\n                if (dcsOptional.isPresent()) {\n                    PoolDcsInfo poolDcsInfo = new PoolDcsInfo();\n                    poolDcsInfo.setDatabases(entry.getValue());\n                    poolDcsInfo.setDcsInfo(dcsOptional.get());\n                    poolDcsInfos.add(poolDcsInfo);\n                }\n            }\n            LOGGER.info(\"getPoolByZone: zone = {}, poolDcsInfos = {}\", zone, poolDcsInfos);\n            return poolDcsInfos;\n        } catch (Exception e) {\n            LOGGER.error(\"getPoolByZone exception, e = \", e);\n            throw new ServerException(e.getMessage());\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.service.impl.AgentPoolServiceImplTest#test_getPoolByZone clean test", "extra_content": {"query": "根据区域zone信息获取对应zone下资源池关联的DCS信息，先根据zone查询资源池信息，再根据zone查询DCS信息，最后按照dcsName关联进行组合", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/38.patch", "test_result": "fail", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/service/impl/AgentPoolServiceImpl.java", "start_line": 188, "end_line": 219, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class ClassLoaderUtils {\n    private ClassLoaderUtils() {\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    public static URL[] getURLs(ClassLoader classLoader) {\n        if (classLoader instanceof URLClassLoader) {\n            return ((URLClassLoader) classLoader).getURLs();\n        }\n        try {\n            Field ucpField = classLoader.getClass().getDeclaredField(\"ucp\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                ucpField.setAccessible(true);\n                return null;\n            });\n            Object ucp = ucpField.get(classLoader);\n            Field pathField = ucp.getClass().getDeclaredField(\"path\");\n            AccessController.doPrivileged((PrivilegedAction) () -> {\n                pathField.setAccessible(true);\n                return null;\n            });\n            ArrayList<URL> path = (ArrayList<URL>) pathField.get(ucp);\n            return path.toArray(new URL[0]);\n        } catch (Exception e) {\n            throw new DevsporeCicException(e);\n        }\n    }\n\n    public static void loadClassWithApplicationLoader(String className) {\n        try {\n            ClassLoader appClassLoader = ClassLoader.getSystemClassLoader();\n            log.info(\"Application ClassLoader: {}\", appClassLoader);\n\n            Class<?> loadedClass = appClassLoader.loadClass(className);\n            log.info(\"Loaded Class: {}\", loadedClass.getName());\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n    }\n\n    public static boolean isBootstrapClassLoader(String className) {\n        try {\n            Class<?> langClass = Class.forName(className);\n            return langClass.getClassLoader() == null;\n        } catch (ClassNotFoundException e) {\n            log.error(\"load error: {}\", e.getMessage());\n        }\n        return false;\n    }\n\n    public static URL[] getExtensionClassLoaderUrls() {\n        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n        ClassLoader extensionClassLoader = systemClassLoader.getParent();\n\n        if (extensionClassLoader instanceof URLClassLoader) {\n            URLClassLoader urlClassLoader = (URLClassLoader) extensionClassLoader;\n            return urlClassLoader.getURLs();\n        }\n        return null;\n    }\n\n    /**\n     * 动态加载类并执行指定方法\n     *\n     * @param loader 类加载器\n     * @param className 完整类名（如 \"com.example.Plugin\"）\n     * @param methodName 方法名（如 \"run\"）\n     * @param parameterTypes 方法参数类型数组（无参数传 null）\n     * @param args 方法参数值数组（无参数传 null）\n     * @return 方法执行结果（无返回值方法返回 null）\n     * @throws Exception 封装所有可能的反射异常\n     */\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 使用指定类加载器实现动态加载.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 重载方法：简化无参方法的调用\npublic static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName, Class<T> returnType) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#40", "good_example_response": "```java\n    public static <T> T loadAndInvoke(ClassLoader loader, String className, String methodName,\n        Class<?>[] parameterTypes, Object[] args, Class<T> returnType) throws Exception {\n\n        // 1. 加载目标类\n        Class<?> clazz = loader.loadClass(className);\n\n        // 2. 实例化对象（使用无参构造函数）\n        Constructor<?> constructor = clazz.getDeclaredConstructor();\n        constructor.setAccessible(true); // 允许调用私有构造方法\n        Object instance = constructor.newInstance();\n\n        // 3. 获取并执行方法\n        Method method = clazz.getMethod(methodName, parameterTypes);\n\n        // 判断是否为静态方法\n        if (Modifier.isStatic(method.getModifiers())) {\n            return returnType.cast(method.invoke(null, args));// 静态方法无需实例\n        } else {\n            // 非静态方法\n            return returnType.cast(method.invoke(instance, args));\n        }\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.ClassLoaderUtilsTest#loadAndInvoke clean test", "extra_content": {"query": "使用指定类加载器实现动态加载", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/40.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/ClassLoaderUtils.java", "start_line": 97, "end_line": 118, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class BaseDao<T> {\n\n    /**\n     * 构建分页查询\n     *\n     * @param request 查询条件\n     * @return IPage<T>\n     */\n    public IPage<T> buildIPage(QueryRequest request) {\n        IPage<T> iPage = new Page<>();\n        iPage.setCurrent(request.getPageIndex());\n        iPage.setSize(request.getPageSize());\n        return iPage;\n    }\n\n    /**\n     * 构建查询条件，包括条件查询和按字段排序。\n     *\n     * @param request   查询条件\n     * @return QueryWrapper<T>\n     */\n    public QueryWrapper<T> buildQueryWrapper(QueryRequest request) {\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        buildCondition(request, queryWrapper);\n        buildOrder(request, queryWrapper, null);\n        return queryWrapper;\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 构建查询条件\n     * 因为in和notIn这两个条件特殊，在for循环外分别单独构建。对于同一列名，把所有的值放到一起。\n     *\n     * @param request      查询条件\n     * @param queryWrapper 构建对象\n     */\n    public void buildCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n        if (request.getSelectors() == null) {\n            return;\n        }\n        buildInCondition(request, queryWrapper);\n        buildNotInCondition(request, queryWrapper);\n        for (QueryRequest.Selector selector : request.getSelectors()) {\n            switch (selector.getFilterType()) {\n                case LIKE:\n                    queryWrapper.like(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case EQUAL:\n                    queryWrapper.eq(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case BIGGER:\n                    queryWrapper.gt(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case BIGGEREQUAL:\n                    queryWrapper.ge(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case LESS:\n                    queryWrapper.lt(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case LESSEQUAL:\n                    queryWrapper.le(selector.getColumnName(), selector.getFilterValue());\n                    break;\n                case ISNULL:\n                    queryWrapper.isNull(selector.getColumnName());\n                    break;\n                case ISNOTNULL:\n                    queryWrapper.isNotNull(selector.getColumnName());\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    /**\n     * 构建排序条件\n     *\n     * @param request      查询条件\n     * @param queryWrapper 构建对象\n     * @param uniqueKey    唯一主键（传入如果不为空，则自动添加一条根据默认主键升序方法）\n     */\n    public void buildOrder(QueryRequest request, QueryWrapper<T> queryWrapper, String uniqueKey) {\n        if (request.getSortOrder() != null && request.getSortColumn() != null) {\n            queryWrapper.orderBy(\n                    true, SortOrderEnum.ASC.equals(request.getSortOrder()), request.getSortColumn());\n        }\n\n        if (ObjectUtils.isNotEmpty(uniqueKey)) {\n            queryWrapper.orderBy(true, true, uniqueKey);\n        }\n    }\n\n    private void buildInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n        Map<String, List<QueryRequest.Selector>> inColumnMap =\n                getFilterColumnMap(request, FilterTypeEnum.IN);\n        inColumnMap.forEach(\n                (columnName, fieldSelector) ->\n                        queryWrapper.in(\n                                columnName,\n                                fieldSelector.stream()\n                                        .map(QueryRequest.Selector::getFilterValue)\n                                        .collect(Collectors.toList())));\n    }\n\n    private void buildNotInCondition(QueryRequest request, QueryWrapper<T> queryWrapper) {\n        Map<String, List<QueryRequest.Selector>> notInColumnMap =\n                getFilterColumnMap(request, FilterTypeEnum.NOTIN);\n        notInColumnMap.forEach(\n                (columnName, fieldSelector) ->\n                        queryWrapper.notIn(\n                                columnName,\n                                fieldSelector.stream()\n                                        .map(QueryRequest.Selector::getFilterValue)\n                                        .collect(Collectors.toList())));\n    }\n\n    /**\n     * 根据列名称分组\n     *\n     * @param request    查询条件\n     * @param filterType 过滤类型\n     * @return key是列名，value是List<RequestFieldSelector>的map\n     */\n    private Map<String, List<QueryRequest.Selector>> getFilterColumnMap(\n            QueryRequest request, FilterTypeEnum filterType) {\n        return request.getSelectors().stream()\n                .filter(selector -> filterType == selector.getFilterType())\n                .collect(Collectors.groupingBy(QueryRequest.Selector::getColumnName));\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 构建查询条件，包括条件查询和按字段排序。\npublic QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "DubheProbeOrchestration_z00806805#41", "good_example_response": "```java\n    public QueryWrapper<T> buildQueryWrapper(QueryRequest request, String uniqueKey) {\n        QueryWrapper<T> queryWrapper = new QueryWrapper<>();\n        buildCondition(request, queryWrapper);\n        buildOrder(request, queryWrapper, uniqueKey);\n        return queryWrapper;\n    }\n```", "reward_command": "cd /docker/JavaRunProject/DubheProbeOrchestration_z00806805; export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/cbu/dubheprobeorchestration/dao/BaseDaoTest.java", "extra_content": {"query": "使用mybatis-plus-querywrapper构建查询条件", "diff_path": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/diff/41.patch", "test_result": "pass", "file_path": "/DubheProbeOrchestration/src/main/java/com/huawei/cbu/dubheprobeorchestration/dao/BaseDao.java", "start_line": 54, "end_line": 60, "work_dir": "/docker/JavaRunProject/DubheProbeOrchestration_z00806805/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class FunctionalDemo {\n    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n\n    public static final int BATCH_SIZE = 1000;\n\n    public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n        map.put(\"AZ_FLAG\", \"AZ_CODE\");\n        map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n        map.put(\"REGION_FLAG\", \"REGION_CODE\");\n    };\n\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n```\n\nThe context below is:\n```java\n\n    public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n        orders.forEach(order -> handler.accept(order.getCustomer(), order));\n    }\n\n    /**\n     * 按比例奖励客户积分\n     *\n     * @param ratio ratio\n     * @return {@link UnaryOperator<Customer>}\n     */\n    public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n        return customer -> {\n            int currentPoints = customer.getPoints();\n            int bonus = (int) (currentPoints * ratio);\n            customer.addPoints(bonus);\n            return customer;\n        };\n    }\n\n    /**\n     * 合并订单\n     *\n     * @return {@link BinaryOperator<Order>}\n     */\n    public static BinaryOperator<Order> mergeOrderOperator() {\n        return (order1, order2) -> {\n            double totalAmount = order1.getAmount() + order2.getAmount();\n            int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n            if (order1.getOrderId().equals(order2.getOrderId())) {\n                return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n            } else {\n                return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n            }\n        };\n    }\n\n    /**\n     * 计算总积分：用户当前积分 + 订单积分\n     *\n     * @return {@link BiFunction<Customer, Order, Integer>}\n     */\n    public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n        return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n    }\n\n    public static Predicate<User> createNonAdminValidator() {\n        Predicate<User> isActive = User::isActive;\n        Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n        return isActive.and(isAdmin.negate());\n    }\n\n    public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n        return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n            .equals(host2.getHostName());\n    }\n\n    public static BinaryOperator<Customer> higherPointsOperator() {\n        return (customer1, customer2) -> {\n            if (customer1.getPoints() >= customer2.getPoints()) {\n                return customer1;\n            }\n            return customer2;\n        };\n    }\n\n    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n        return (customer, products) -> {\n            double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n            return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n        };\n    }\n\n    public static Predicate<JSONObject> validPredicate(String key) {\n        return item -> ObjectUtils.isNotEmpty(item.get(key));\n    }\n\n    public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n        return item -> ObjectUtils.equals(item.get(key), another.get(key));\n    }\n\n    public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n        Map<String, String> map = new HashMap<>();\n        if (mapping != null) {\n            mapping.accept(map);\n        }\n\n        return item -> {\n            if (map.containsKey(item)) {\n                item = map.get(item);\n            }\n\n            return item;\n        };\n    }\n\n    public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n        UnaryOperator<String> operator = mappingOperator(mapping);\n        if (StringUtils.isNotEmpty(vo.getAzCode())) {\n            params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n        } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n            params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n        } else {\n            params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n        }\n    }\n\n    public static BiFunction<Integer, Integer, Double> euclidean() {\n        return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    }\n\n    public static BiFunction<Integer, Integer, Double> manhattan() {\n        return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n    }\n}\n\nclass User {\n    private String username;\n\n    private List<String> roles;\n\n    private boolean active;\n\n    public User(String username, List<String> roles, boolean active) {\n        this.username = username;\n        this.roles = roles;\n        this.active = active;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public List<String> getRoles() {\n        return roles;\n    }\n\n    public boolean isActive() {\n        return active;\n    }\n}\n\nclass Customer {\n    private String id;\n\n    private int points;\n\n    public Customer(String id, int points) {\n        this.id = id;\n        this.points = points;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public int getPoints() {\n        return points;\n    }\n\n    public void addPoints(int points) {\n        this.points += points;\n    }\n}\n\nclass Order {\n    private Customer customer;\n\n    private String orderId;\n\n    private double amount;\n\n    private boolean isCompleted;\n\n    public Order(Customer customer, String orderId, double amount) {\n        this.customer = customer;\n        this.orderId = orderId;\n        this.amount = amount;\n        this.isCompleted = false;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public boolean isCompleted() {\n        return isCompleted;\n    }\n\n    public void markCompleted() {\n        isCompleted = true;\n    }\n}\n\nclass Product {\n    private String productId;\n\n    private int amount;\n\n    private double price;\n\n    public Product(String productId, int amount, double price) {\n        this.productId = productId;\n        this.amount = amount;\n        this.price = price;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n```\n\nThe new feature is 实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "agentmanager_y00560175#43", "good_example_response": "```java\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#testBatchUpdateWithMultipleBatches clean test", "extra_content": {"query": "实现对传入列表对象的分批处理，每一批按BATCH_SIZE分隔，并调用传入的consumer进行处理", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/43.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 35, "end_line": 49, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class FunctionalDemo {\n    private static final Logger LOGGER = LoggerFactory.getLogger(FunctionalDemo.class);\n\n    public static final int BATCH_SIZE = 1000;\n\n    public static final Consumer<Map<String, String>> CL_FLAG = map -> {\n        map.put(\"AZ_FLAG\", \"AZ_CODE\");\n        map.put(\"SECURITY_AREA_FLAG\", \"SECURITY_AREA_CODE\");\n        map.put(\"REGION_FLAG\", \"REGION_CODE\");\n    };\n\n    public static List<User> checkUserPermission(List<User> users, String role) {\n        BiPredicate<User, String> hasPermission = (user, requiredRole) -> user.isActive() && user.getRoles()\n            .contains(requiredRole);\n\n        List<User> allowed = new ArrayList<>();\n        // 执行权限校验流程\n        users.forEach(user -> {\n            if (hasPermission.test(user, role)) {\n                allowed.add(user);\n            }\n        });\n\n        return allowed;\n    }\n\n    public static <E> void batchUpdate(List<E> list, Consumer<List<E>> consumer) {\n        int totalSize = list.size();\n        LOGGER.info(\"start to handle list, total size: {}\", totalSize);\n        // 计算需要分成多少批\n        int batchCount = (totalSize + BATCH_SIZE - 1) / BATCH_SIZE;\n        for (int i = 0; i < batchCount; i++) {\n            int startIndex = i * BATCH_SIZE;\n            int endIndex = Math.min((i + 1) * BATCH_SIZE, totalSize);\n            List<E> batch = list.subList(startIndex, endIndex);\n            // 处理batch\n            consumer.accept(batch);\n            LOGGER.debug(\"updated size: {}\", endIndex);\n        }\n        LOGGER.info(\"finish to handle list\");\n    }\n\n    public static void processOrders(List<Order> orders, BiConsumer<Customer, Order> handler) {\n        orders.forEach(order -> handler.accept(order.getCustomer(), order));\n    }\n\n    /**\n     * 按比例奖励客户积分\n     *\n     * @param ratio ratio\n     * @return {@link UnaryOperator<Customer>}\n     */\n    public static UnaryOperator<Customer> addBonusOperator(double ratio) {\n        return customer -> {\n            int currentPoints = customer.getPoints();\n            int bonus = (int) (currentPoints * ratio);\n            customer.addPoints(bonus);\n            return customer;\n        };\n    }\n```\n\nThe context below is:\n```java\n\n    /**\n     * 计算总积分：用户当前积分 + 订单积分\n     *\n     * @return {@link BiFunction<Customer, Order, Integer>}\n     */\n    public static BiFunction<Customer, Order, Integer> totalPointCalculator() {\n        return (customer, order) -> customer.getPoints() + (int) order.getAmount();\n    }\n\n    public static Predicate<User> createNonAdminValidator() {\n        Predicate<User> isActive = User::isActive;\n        Predicate<User> isAdmin = user -> user.getRoles().contains(\"ADMIN\");\n        return isActive.and(isAdmin.negate());\n    }\n\n    public static BiPredicate<HostInfoVO, HostInfoVO> hostConflictValidator() {\n        return (host1, host2) -> host1.getHostIp().equals(host2.getHostIp()) && host1.getHostName()\n            .equals(host2.getHostName());\n    }\n\n    public static BinaryOperator<Customer> higherPointsOperator() {\n        return (customer1, customer2) -> {\n            if (customer1.getPoints() >= customer2.getPoints()) {\n                return customer1;\n            }\n            return customer2;\n        };\n    }\n\n    public static BiFunction<Customer, List<Product>, Order> createOrderGenerator() {\n        return (customer, products) -> {\n            double sum = products.stream().mapToDouble(o -> o.getPrice() * o.getAmount()).sum();\n            return new Order(customer, \"ORD\" + System.currentTimeMillis(), sum);\n        };\n    }\n\n    public static Predicate<JSONObject> validPredicate(String key) {\n        return item -> ObjectUtils.isNotEmpty(item.get(key));\n    }\n\n    public static Predicate<JSONObject> eqPredicate(String key, JSONObject another){\n        return item -> ObjectUtils.equals(item.get(key), another.get(key));\n    }\n\n    public static UnaryOperator<String> mappingOperator(Consumer<Map<String, String>> mapping) {\n        Map<String, String> map = new HashMap<>();\n        if (mapping != null) {\n            mapping.accept(map);\n        }\n\n        return item -> {\n            if (map.containsKey(item)) {\n                item = map.get(item);\n            }\n\n            return item;\n        };\n    }\n\n    public static void setupDataFlag(Map<String, Object> params, HostInfoVO vo, Consumer<Map<String, String>> mapping) {\n        UnaryOperator<String> operator = mappingOperator(mapping);\n        if (StringUtils.isNotEmpty(vo.getAzCode())) {\n            params.put(operator.apply(\"AZ_FLAG\"), \"Y\");\n        } else if (StringUtils.isNotEmpty(vo.getSecurityArea())) {\n            params.put(operator.apply(\"SECURITY_AREA_FLAG\"), \"Y\");\n        } else {\n            params.put(operator.apply(\"REGION_FLAG\"), \"Y\");\n        }\n    }\n\n    public static BiFunction<Integer, Integer, Double> euclidean() {\n        return (dx, dy) -> Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n    }\n\n    public static BiFunction<Integer, Integer, Double> manhattan() {\n        return (dx, dy) -> (double) (Math.abs(dx) + Math.abs(dy));\n    }\n}\n\nclass User {\n    private String username;\n\n    private List<String> roles;\n\n    private boolean active;\n\n    public User(String username, List<String> roles, boolean active) {\n        this.username = username;\n        this.roles = roles;\n        this.active = active;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public List<String> getRoles() {\n        return roles;\n    }\n\n    public boolean isActive() {\n        return active;\n    }\n}\n\nclass Customer {\n    private String id;\n\n    private int points;\n\n    public Customer(String id, int points) {\n        this.id = id;\n        this.points = points;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public int getPoints() {\n        return points;\n    }\n\n    public void addPoints(int points) {\n        this.points += points;\n    }\n}\n\nclass Order {\n    private Customer customer;\n\n    private String orderId;\n\n    private double amount;\n\n    private boolean isCompleted;\n\n    public Order(Customer customer, String orderId, double amount) {\n        this.customer = customer;\n        this.orderId = orderId;\n        this.amount = amount;\n        this.isCompleted = false;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public boolean isCompleted() {\n        return isCompleted;\n    }\n\n    public void markCompleted() {\n        isCompleted = true;\n    }\n}\n\nclass Product {\n    private String productId;\n\n    private int amount;\n\n    private double price;\n\n    public Product(String productId, int amount, double price) {\n        this.productId = productId;\n        this.amount = amount;\n        this.price = price;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n}\n```\n\nThe new feature is 返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 合并订单\npublic static BinaryOperator<Order> mergeOrderOperator()\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "agentmanager_y00560175#46", "good_example_response": "```java\n    public static BinaryOperator<Order> mergeOrderOperator() {\n        return (order1, order2) -> {\n            double totalAmount = order1.getAmount() + order2.getAmount();\n            int totalPoints = order1.getCustomer().getPoints() + order2.getCustomer().getPoints();\n            if (order1.getOrderId().equals(order2.getOrderId())) {\n                return new Order(new Customer(\"COMMON\", totalPoints), order1.getOrderId(), totalAmount);\n            } else {\n                return new Order(new Customer(\"COMMON\", totalPoints), \"0\", totalAmount);\n            }\n        };\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/agentmanager_y00560175/pom.xml -Dtest=com.huawei.cloudbuild.agentmanager.utils.FunctionalDemoTest#test_mergeOrderOperator clean test", "extra_content": {"query": "返回一个可以合并订单的函数式接口：累加两个订单中的客户积分作为新的客户积分，新的客户id使用COMMON表示；累加两个订单本身的积分作为新的总订单积分，如果两个订单id相同，则合并后的订单继续保留使用该ID，否则合并订单ID为0；", "diff_path": "/docker/JavaRunProject/agentmanager_y00560175/diff/46.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/cloudbuild/agentmanager/utils/FunctionalDemo.java", "start_line": 90, "end_line": 101, "work_dir": "/docker/JavaRunProject/agentmanager_y00560175/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\n\n```\n\nThe context above is:\n```java\npublic class UrlClassLoaderUtils {\n```\n\nThe context below is:\n```java\n\n}\n```\n\nThe new feature is 加载指定路径下的类.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 动态加载类并执行指定方法\npublic static Class<?> loadClassByPath(String[] paths, String className) throws Exception\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "devspore-cic_30036124#48", "good_example_response": "```java\n    public static Class<?> loadClassByPath(String[] paths, String className) throws Exception {\n\n        // 1. 将路径转换为 URL 对象（适配不同操作系统）\n        URL[] urls = new URL[paths.length];\n        for (int i = 0; i < paths.length; i++) {\n            String normalizedPath = paths[i].replace(\"/\", File.separator);\n            urls[i] = new File(normalizedPath).toURI().toURL();\n        }\n        URLClassLoader loader = new URLClassLoader(urls);\n\n        // 2. 加载目标类\n        return loader.loadClass(className);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true -f /docker/JavaRunProject/devspore-cic_30036124/devspore-cic-core/pom.xml -Dtest=com.huaweicloud.devspore.cic.core.utils.UrlClassLoaderUtilsTest clean test", "extra_content": {"query": "加载指定路径下的类", "diff_path": "/docker/JavaRunProject/devspore-cic_30036124/diff/48.patch", "test_result": "pass", "file_path": "/devspore-cic-core/src/main/java/com/huaweicloud/devspore/cic/core/utils/UrlClassLoaderUtils.java", "start_line": 18, "end_line": 31, "work_dir": "/docker/JavaRunProject/devspore-cic_30036124/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class UniSystemRepository {\n    public List<UniSystem> listUniSystem(Integer offset, Integer limit); /* 分页查询目标系统列表 */\n    public int countUniSystem(); /* 查询目标系统数量 */\n    public List<UniSystem> listSystemByCodes(List<String> systemCodes); /* 根据目标系统编码列表查询目标系统列表 */\n    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode); /* 根据作业空间编码查询关联的目标系统列表 */\n    public PageInfo<UniSystem> pageByCriteria(UniSystemCriteria uniSystemCriteria, int pageNum, int pageSize,\n        Boolean isQueryTotal); /* GetUniSystems Method */\n    public UniSystem getById(Long uniSystemId); /* GetUniSystemById Method */\n    public int updateByIds(List<UniSystem> uniSystemList); /* UpdateUniSystemByIds Method */\n    public int deleteAllById(List<Long> uniSystemIds); /* DeleteUniSystemByIds Method */\n    public int deleteById(Long uniSystemId); /* DeleteUniSystemById Method */\n    public int batchSave(List<UniSystem> uniSystemList); /* AddUniSystems Method */\n    public int save(UniSystem uniSystem); /* AddUniSystem Method */\n}\n```\n\nThe context above is:\n```java\n@Slf4j\n@Service\npublic class UniSystemService {\n    @Autowired\n    private UniSystemRepository uniSystemRepository;\n\n    @Autowired\n    private CloudDragonProjectService cloudDragonProjectService;\n\n    /**\n     * 分页查询目标系统列表\n     *\n     * @param offset 偏移量\n     * @param limit 分页大小\n     * @return 目标系统列表\n     */\n    public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n        int total = uniSystemRepository.countUniSystem();\n        List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n        List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n        return new PageResponseV2<>(total, listResp);\n    }\n\n    /**\n     * 根据作业空间编码查询关联的目标系统列表\n     *\n     * @param uniWorkspaceCode 作业空间编码\n     * @return 目标系统列表\n     */\n    public List<UniSystemResp> listUniSystemByUniWorkspaceCode(String uniWorkspaceCode) {\n        return uniSystemRepository.listUniSystemByUniWorkspaceCode(uniWorkspaceCode);\n    }\n```\n\nThe context below is:\n```java\n}\n```\n\nThe new feature is 分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 根据云龙群组id查询对应作业空间关联的目标系统\npublic List<UniSystemResp> listUniSystemByGroupId(String groupId)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "projectTree_l00619365#56", "good_example_response": "```java\n    public PageResponseV2<UniSystemResp> listUniSystem(Integer offset, Integer limit) {\n        int total = uniSystemRepository.countUniSystem();\n        List<UniSystem> uniSystemList = uniSystemRepository.listUniSystem(offset, limit);\n        List<UniSystemResp> listResp = UniSystemConverter.INSTANCE.toUniSystemRespList(uniSystemList);\n        return new PageResponseV2<>(total, listResp);\n    }\n```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6  &&  export PATH=$JAVA_HOME/bin:$PATH && mvn -Dmaven.test.failure.ignore=true clean test -f service/pom.xml -Dtest=com.huawei.clouddragon.uniworkspace.service.UniSystemServiceTest", "extra_content": {"query": "分页查询目标系统列表，并将查询结果列表使用mapstruct mapper进行类型转换", "diff_path": "/docker/JavaRunProject/projectTree_l00619365/diff/56.patch", "test_result": "pass", "file_path": "/service/src/main/java/com/huawei/clouddragon/uniworkspace/service/UniSystemService.java", "start_line": 46, "end_line": 52, "work_dir": "/docker/JavaRunProject/projectTree_l00619365/"}}
{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class ErrorMessage {\n    public void setSuggestion(String suggestion);\n    public String getSuggestion();\n    public void setExplain(String explain);\n    public String getExplain();\n    public void setErrorMessage(String errorMessage);\n    public String getErrorMessage();\n    public void setErrorCode(String errorCode);\n    public String getErrorCode();\n}\n```\n\nThe context above is:\n```java\npublic abstract class AbstractRemoteCallService {\n    protected static final Logger LOG = LoggerFactory.getLogger(AbstractRemoteCallService.class);\n\n    @Autowired\n    private ServiceAvailableDetectConfig serviceAvailableDetectService;\n\n    private LubanRestTemplate lubanRestTemplate;\n\n    private String server;\n\n    private int connectTimeout = 5000;\n\n    private int readTimeout = 240000;\n\n    private int connectionRequestTimeout = 20000;\n\n    protected LubanRestTemplate getLubanRestTemplate() {\n        if (lubanRestTemplate != null) {\n            return lubanRestTemplate;\n        }\n        synchronized (this) {\n            if (lubanRestTemplate != null) {\n                return lubanRestTemplate;\n            }\n            lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n        }\n        return lubanRestTemplate;\n    }\n\n    protected String getServer() {\n        return server;\n    }\n\n    public void setServer(String server) {\n        this.server = server;\n    }\n\n    protected <T> T postForObject(String url, Object request, ParameterizedTypeReference<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n\n    /**\n     * 发送post请求，并且获取结果转换成对象 <br>\n     *\n     * @param url\n     * @param request\n     * @param responseType\n     * @return\n     * @author y00438022\n     * @since 2019年6月28日\n     */\n    protected <T> T postForObject(String url, Object request, Class<T> responseType) {\n\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n        String requestBody = JSON.toJSONString(request);\n        HttpEntity<String> requestEntity = new HttpEntity<String>(requestBody, headers);\n        ResponseEntity<String> response = null;\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.POST, requestEntity, String.class);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                }\n                if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n\n            } catch (RestClientException logException) { // 客户端的数据\n\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        String result = response.getBody();\n        return JSON.parseObject(result, responseType);\n\n    }\n\n    /**\n     * 新的get方法\n     *\n     * @param url\n     * @param responseType\n     * @param <T>\n     * @return\n     * @author lwx521892\n     * @since 2019年12月19日\n     */\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```\n\nThe context below is:\n```java\n\n    public int getConnectTimeout() {\n        return connectTimeout;\n    }\n\n    public void setConnectTimeout(int connectTimeout) {\n        this.connectTimeout = connectTimeout;\n    }\n\n    public int getReadTimeout() {\n        return readTimeout;\n    }\n\n    public void setReadTimeout(int readTimeout) {\n        this.readTimeout = readTimeout;\n    }\n\n    public int getConnectionRequestTimeout() {\n        return connectionRequestTimeout;\n    }\n\n    public void setConnectionRequestTimeout(int connectionRequestTimeout) {\n        this.connectionRequestTimeout = connectionRequestTimeout;\n    }\n\n}\n```\n\nThe new feature is 通过spring RestTemplate发送get请求.\n\nAnd here is the code snippet you are asked to modify:\n```java\n// 发送Get请求，并且获取结果转换成对象 <br>\nprotected <T> T getForObject(String url, Class<T> responseType)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "lubanjob_f00563108#61", "good_example_response": "```java\n    protected <T> T getForObject(String url, ParameterizedTypeReference<T> responseType) {\n        List<String> availableAddress = serviceAvailableDetectService.getAvailableUrls();\n        if (availableAddress.isEmpty()) {\n            throw new ApiClientException(\"not available address:\");\n        }\n        RestTemplate templete = getLubanRestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setContentType(MediaType.APPLICATION_JSON);\n        // 未来此处可以添加body体\n\n        HttpEntity<String> requestEntity = new HttpEntity<String>(null, headers);\n\n        ResponseEntity<T> response = null;\n\n        // 挨个地址去调用,防止某个服务发布不可用造成调用失败\n        RestClientException ex = null;\n        for (String str : availableAddress) {\n            try {\n                String address = str + url;\n                response = templete.exchange(address, HttpMethod.GET, requestEntity, responseType);\n                break;\n            } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                int status = logException.getRawStatusCode();\n                String body = logException.getResponseBodyAsString();\n                LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n                if (em == null) {\n                    throw new ApiClientException(body, logException);\n                } else if (em.getErrorCode() == null) {\n                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n                } else {\n                    throw new ApiClientException(em);\n                }\n            } catch (RestClientException logException) { // 客户端的数据\n                ex = logException;\n                continue;\n            }\n        }\n\n        if (response == null) {\n            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n        }\n\n        return response.getBody();\n    }\n```", "reward_command": "cd /docker/JavaRunProject/lubanjob_f00563108;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true clean test -f pom.xml -Dtest=com.huawei.luban.cmdb.client.config.AbstractRemoteCallServiceTest.java#test_getForObject_should_return_not_null_when_condition", "extra_content": {"query": "通过spring RestTemplate发送get请求", "diff_path": "/docker/JavaRunProject/lubanjob_f00563108/diff/61.patch", "test_result": "pass", "file_path": "/common/cmdb-client/src/main/java/com/huawei/luban/cmdb/client/config/AbstractRemoteCallService.java", "start_line": 189, "end_line": 234, "work_dir": "/docker/JavaRunProject/lubanjob_f00563108/"}}