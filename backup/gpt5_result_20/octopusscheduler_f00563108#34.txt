好的！按照你给定的“正向补丁（更早 → 更接近最终）”口径，下面给出 3 轮递进式改动（RC3 → RC2 → RC1）。所有 **+ 行**均与最终代码在相同行号处逐字匹配，且**未触碰**第 6–19 行的“\[禁止修改-目标实现]”。

---

### hunks\_3 (倒数第三次修改，最早的准备工作)

> 引入 `@Configuration`，让 Spring 能扫描到该配置类，为后续创建 `SqlSessionFactoryBean` 的方法生效打基础。

```json
[
  {
    "file_path": "DataSourceConfig.java",
    "start_line": 2,
    "end_line": 2,
    "diff_content": "@@ -2,1 +2,1 @@\n-// TODO mark as configuration\n+@Configuration\n"
  }
]
```

---

### hunks\_2 (倒数第二次修改，中间准备)

> 增加 `@MapperScan` 的多包配置，确保 MyBatis 能扫描两个包下的 Mapper，支撑目标方法里 `mybatis-config.xml` 与 `mapper/*.xml` 的加载路径规划。

```json
[
  {
    "file_path": "DataSourceConfig.java",
    "start_line": 3,
    "end_line": 4,
    "diff_content": "@@ -3,1 +3,2 @@\n-// TODO add mapper scan\n+@MapperScan({\"com.huawei.devcloud.octopusscheduler.mapper\",\n+    \"com.huawei.devcloud.octopusscheduler.powerschedule.mappper\"})\n"
  }
]
```

---

### hunks\_1 (最近一次修改，最后的准备工作)

> 引入 `@Slf4j` 以获得 `log`，使目标方法中的 `log.info` 能正常编译与运行。

```json
[
  {
    "file_path": "DataSourceConfig.java",
    "start_line": 1,
    "end_line": 1,
    "diff_content": "@@ -1,1 +1,1 @@\n-// TODO add logger\n+@Slf4j\n"
  }
]
```

---

### notes

* **RC3**：先把类标注为 `@Configuration`，使之成为 Spring 管理的配置类，目标方法创建的 `SqlSessionFactoryBean` 才会被容器识别。
* **RC2**：补齐 `@MapperScan` 多包数组形式，保证两个包下的 `mapper/*.xml` 与接口都能被扫描到，与目标方法中的 `setMapperLocations` 相呼应。
* **RC1**：最后补上 `@Slf4j`，为目标实现中的 `log.info` 提供日志实例，完成收尾。
