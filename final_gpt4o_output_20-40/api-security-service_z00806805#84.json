{
  "benchmark_id": "api-security-service_z00806805#84",
  "timestamp": "2025-09-19T10:57:05.805248",
  "model_used": "gpt-4o-2024-11-20",
  "prompt_version": "v9_improved",
  "selected_region": "public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service)",
  "target_implementation": "public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) {\n        Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc(\n            ServiceTokenInfo::getCreateTime);\n        if (StringUtils.isNotBlank(service)) {\n            queryWrapper.like(ServiceTokenInfo::getServiceName, service);\n        }\n        return serviceTokenInfoMapper.selectPage(page, queryWrapper);\n    }",
  "final_code_with_annotations": "  1: @Service\n  2: @Slf4j\n  3: public class TokenDaoServiceImpl implements TokenDaoService {\n  4: \n  5:     @Autowired\n  6:     ServiceTokenHistoryMapper serviceTokenHistoryMapper;\n  7: \n  8:     @Autowired\n  9:     ServiceTokenInfoMapper serviceTokenInfoMapper;\n 10: \n 11:     @Autowired\n 12:     CacheTokenService cacheTokenService;\n 13: \n 14:     @Autowired\n 15:     CredentialUserService credentialUserService;\n 16: \n 17:     @Value(\"${fuxi.security.token.length:20}\")\n 18:     Integer tokenLength;\n 19: \n 20:     @Autowired\n 21:     SccCrypto sccCrypto;\n 22: \n 23:     @Override\n 24:     @Cacheable(key = \"'TOKEN:'+#toValidToken\", value = \"token\", unless = \"#result == null\")\n 25:     @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n 26:     public String checkIfTokenValid(String toValidToken) {\n 27:         ServiceTokenInfo result = queryToken(toValidToken);\n 28:         return result == null || !result.getEnable() ? null : result.getServiceName();\n 29:     }\n 30: \n 31:     @Override\n 32:     public boolean refreshToken() {\n 33:         log.info(\"refresh cache to avoid long time query\");\n 34:         queryToken(SecurityStringUtils.random(10));\n 35:         log.info(\"refresh cache finished\");\n 36:         return true;\n 37:     }\n 38: \n 39:     @Override\n 40:     public boolean changeEnableStatus(Long id) {\n 41:         Optional<ServiceTokenInfo> serviceTokenInfoOp = Optional.ofNullable(serviceTokenInfoMapper.selectById(id));\n 42:         if (!serviceTokenInfoOp.isPresent()) {\n 43:             throw new BizException(String.format(\"当前服务不存在，id:%s\", id));\n 44:         }\n 45:         ServiceTokenInfo serviceTokenInfo = serviceTokenInfoOp.get();\n 46:         serviceTokenInfo.setEnable(!serviceTokenInfo.getEnable());\n 47:         serviceTokenInfo.setUpdateTime(new Date());\n 48:         serviceTokenInfoMapper.updateById(serviceTokenInfo);\n 49:         return serviceTokenInfo.getEnable();\n 50:     }\n 51: \n 52:     @Override\n 53:     public ServiceTokenInfo queryById(Long id) {\n 54:         return serviceTokenInfoMapper.selectById(id);\n 55:     }\n 56: \n 57:     @Override\n 58:     public boolean deleteServiceToken(Long id) {\n 59:         int row = serviceTokenInfoMapper.deleteById(id);\n 60:         return row == 1;\n 61:     }\n 62: public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) { // [禁止修改-目标实现]\n 63:         Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize); // [禁止修改-目标实现]\n 64:         LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc( // [禁止修改-目标实现]\n 65:             ServiceTokenInfo::getCreateTime); // [禁止修改-目标实现]\n 66:         if (StringUtils.isNotBlank(service)) { // [禁止修改-目标实现]\n 67:             queryWrapper.like(ServiceTokenInfo::getServiceName, service); // [禁止修改-目标实现]\n 68:         } // [禁止修改-目标实现]\n 69:         return serviceTokenInfoMapper.selectPage(page, queryWrapper); // [禁止修改-目标实现]\n 70:     } // [禁止修改-目标实现]\n 71: @Override\n 72:     public boolean isAdmin(String sub) {\n 73:         CredentialUserEntity credentialUserEntity = credentialUserService.queryUserInfoBySub(sub);\n 74:         return Optional.ofNullable(serviceTokenInfoMapper.isAdmin(credentialUserEntity.getId())).isPresent();\n 75:     }\n 76: \n 77:     private ServiceTokenInfo queryToken(String toFindToken) {\n 78:         Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n 79:         Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n 80:             .filter(\n 81:                 e -> StringUtils.equalsIgnoreCase(toFindToken, cacheTokenService.getDecryptString(e.getEncodeToken())))\n 82:             .findFirst();\n 83:         return opServiceTokenInfo.orElse(null);\n 84:     }\n 85: \n 86:     private String queryEncryToken(String toFindToken) {\n 87:         Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n 88:         Optional<ServiceTokenInfo> optionalServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n 89:             .filter(\n 90:                 e -> StringUtils.equalsIgnoreCase(cacheTokenService.getDecryptString(e.getEncodeToken()), toFindToken))\n 91:             .findAny();\n 92:         return optionalServiceTokenInfo.map(ServiceTokenInfo::getEncodeToken).orElse(null);\n 93:     }\n 94: \n 95:     @Override\n 96:     @CacheEvict(key = \"'TOKEN:'+#rawToken\", value = \"token\")\n 97:     @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n 98:     public boolean refreshServiceToken(String rawToken, String newToken) {\n 99:         String encryToken = sccCrypto.encrypt(newToken);\n100:         String rawEncrtyToken = queryEncryToken(rawToken);\n101: \n102:         if (StringUtils.isBlank(rawEncrtyToken)) {\n103:             return false;\n104:         }\n105:         ServiceTokenInfo rawServiceTokenInfo = serviceTokenInfoMapper.findFirstByEncodeToken(rawEncrtyToken);\n106:         if (rawServiceTokenInfo == null) {\n107:             log.info(\"query by raw Token error\");\n108:             return false;\n109:         }\n110: \n111:         String rawServiceTokenInfoServiceName = rawServiceTokenInfo.getServiceName();\n112:         ServiceTokenInfo.builder().id(rawServiceTokenInfo.getId()).encodeToken(encryToken);\n113: \n114:         int updateLines = serviceTokenInfoMapper.refreshServiceToken(rawServiceTokenInfo.getId(), encryToken);\n115:         if (updateLines == 0) {\n116:             log.info(\"refresh token error\");\n117:             return false;\n118:         }\n119: \n120:         ServiceTokenHistory history = ServiceTokenHistory.builder()\n121:             .priorToken(rawEncrtyToken)\n122:             .serviceName(rawServiceTokenInfoServiceName)\n123:             .build();\n124:         serviceTokenHistoryMapper.insert(history);\n125:         return true;\n126:     }\n127: \n128:     @Override\n129:     public String addNewServiceToken(String serviceName) {\n130:         String newKey = SecurityStringUtils.random(tokenLength, true, true);\n131:         String newEncrtyToken = sccCrypto.encrypt(newKey);\n132: \n133:         ServiceTokenInfo serviceTokenInfo = ServiceTokenInfo.builder()\n134:             .serviceName(serviceName)\n135:             .encodeToken(newEncrtyToken)\n136:             .createTime(new Date())\n137:             .updateTime(new Date())\n138:             .build();\n139:         serviceTokenInfoMapper.insert(serviceTokenInfo);\n140:         return newKey;\n141:     }\n142: }",
  "prompt": {
    "system_prompt": "(1) System Prompt\n\n你是资深 Java 工程师。现在给你一个完整的代码文件（最终状态），你需要**倒推**出为了达到这个最终状态而**刚刚**做过的3次递进式代码修改（Recent Changes）。\n\n核心逻辑：\n- 给出的代码是最终完整状态，每行都有行号标注\n- 你需要倒推出3个历史版本的修改过程\n- 演进路径：初始版本 → RC3 → RC2 → RC1 → 当前最终版本\n- **关键**：不要在最终状态基础上再做修改，而是倒推出达到最终状态的历史修改过程\n\n重要约束：\n1. **禁止修改区域**：不能修改标注为\"禁止修改\"的代码部分\n2. **只能修改**：其他未标注为禁止修改的代码部分\n3. **不新增**：import/依赖；不修改方法签名/可见性；不创建/删除类\n4. **RC目标**：每个RC都应该为实现目标功能做准备工作\n5. **diff格式**：使用标准的unified diff格式，包含行号和+/-操作\n6. **行号准确性**：diff中的行号必须与给出的带行号代码完全一致\n7. **倒推逻辑**：从最终状态向前倒推，不是在最终状态上继续修改\n\n**🔥 DIFF方向关键说明**：\n- hunks_3 / hunks_2 / hunks_1：每一步都是\"RC_k ➜ 下一步更接近最终\"的**正向补丁**\n- **+ 行**：在\"更接近最终的版本/最终版\"中存在的行（应与最终版行号、内容一致）\n- **- 行**：只存在于\"更早版本\"的行（在演进过程中被替换掉的内容）\n- **所有行号以你给的最终代码为准**，在 diff_content 的可见行里必须匹配\n\n技术要求：\n- 每个 hunk 包含：file_path、start_line、end_line、diff_content（标准unified diff格式）\n- 使用精确的行号定位，基于给出的带行号的代码\n- diff_content必须包含真实的删除(-)和新增(+)操作\n- **重要**：diff中的行号必须与最终代码的实际行号匹配\n\n(2) User Prompt\n\n[SELECTED_REGION] - 禁止修改\n选中的代码区域（不可修改）：\n{selected_region}\n\n[TARGET_IMPLEMENTATION] - 禁止修改\n目标实现代码（不可修改）：\n{target_implementation}\n\n[FINAL_CODE_WITH_LINE_NUMBERS] - 最终状态（带行号和标注）\n以下是最终完整代码状态，每行都有行号标注，并标注了禁止修改的区域：\n{final_code_with_annotations}\n\n[RC_CONSTRAINTS]\nRecent Changes约束：\n1. 只能修改未标注为\"禁止修改\"的代码部分\n2. 每个RC都应该为实现TARGET_IMPLEMENTATION做准备工作\n3. 使用精确的行号定位和标准diff格式\n4. RC应该体现真实的开发演进过程\n5. **关键**：diff中的行号必须与上面给出的最终代码行号完全一致\n6. **倒推思维**：从最终状态倒推历史修改，不是在最终状态上继续开发\n\n**🎯 DIFF方向再次强调**：\n- 每个RC都是朝着最终状态的**正向演进**\n- **+ 行**：最终版本中存在的内容（目标状态的行）\n- **- 行**：历史版本中存在但被替换的内容（旧状态的行）\n- **验证方法**：+ 行的内容应该能在最终代码的对应行号找到\n\n[INTENT]\n请倒推出为了实现TARGET_IMPLEMENTATION，开发者做过的3次递进式准备工作：\n- hunks_3: 倒数第三次修改（最早的准备工作）\n- hunks_2: 倒数第二次修改（中间准备）\n- hunks_1: 最近一次修改（最后的准备工作）\n\n每次修改都应该：\n1. 基于精确的行号定位（与最终代码行号完全一致）\n2. 使用标准的unified diff格式\n3. 为实现TARGET_IMPLEMENTATION做必要准备\n4. 体现真实的开发思维过程\n5. **验证**：确保diff中的行号与最终代码中的实际行号匹配\n6. **倒推验证**：确保是从最终状态向前倒推的修改过程\n7. **方向验证**：+ 行内容应该在最终代码中存在，- 行内容应该是被替换的历史内容\n\n[RETURN FORMAT]\n### hunks_3 (倒数第三次修改，最早的准备工作)\n```json\n[\n    {{\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }}\n]\n```\n\n### hunks_2 (倒数第二次修改，中间准备)\n```json\n[\n    {{\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }}\n]\n```\n\n### hunks_1 (最近一次修改，最后的准备工作)\n```json\n[\n    {{\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }}\n]\n```\n\n### notes\n简要说明这3次准备工作如何为实现TARGET_IMPLEMENTATION做准备，体现倒推的逻辑思维\n",
    "user_prompt": "[SELECTED_REGION] - 禁止修改\n选中的代码区域（不可修改）：\npublic IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service)\n\n[TARGET_IMPLEMENTATION] - 禁止修改\n目标实现代码（不可修改）：\npublic IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) {\n        Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc(\n            ServiceTokenInfo::getCreateTime);\n        if (StringUtils.isNotBlank(service)) {\n            queryWrapper.like(ServiceTokenInfo::getServiceName, service);\n        }\n        return serviceTokenInfoMapper.selectPage(page, queryWrapper);\n    }\n\n[FINAL_CODE_WITH_LINE_NUMBERS] - 最终状态（带行号和标注）\n以下是最终完整代码状态，每行都有行号标注，并标注了禁止修改的区域：\n  1: @Service\n  2: @Slf4j\n  3: public class TokenDaoServiceImpl implements TokenDaoService {\n  4: \n  5:     @Autowired\n  6:     ServiceTokenHistoryMapper serviceTokenHistoryMapper;\n  7: \n  8:     @Autowired\n  9:     ServiceTokenInfoMapper serviceTokenInfoMapper;\n 10: \n 11:     @Autowired\n 12:     CacheTokenService cacheTokenService;\n 13: \n 14:     @Autowired\n 15:     CredentialUserService credentialUserService;\n 16: \n 17:     @Value(\"${fuxi.security.token.length:20}\")\n 18:     Integer tokenLength;\n 19: \n 20:     @Autowired\n 21:     SccCrypto sccCrypto;\n 22: \n 23:     @Override\n 24:     @Cacheable(key = \"'TOKEN:'+#toValidToken\", value = \"token\", unless = \"#result == null\")\n 25:     @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n 26:     public String checkIfTokenValid(String toValidToken) {\n 27:         ServiceTokenInfo result = queryToken(toValidToken);\n 28:         return result == null || !result.getEnable() ? null : result.getServiceName();\n 29:     }\n 30: \n 31:     @Override\n 32:     public boolean refreshToken() {\n 33:         log.info(\"refresh cache to avoid long time query\");\n 34:         queryToken(SecurityStringUtils.random(10));\n 35:         log.info(\"refresh cache finished\");\n 36:         return true;\n 37:     }\n 38: \n 39:     @Override\n 40:     public boolean changeEnableStatus(Long id) {\n 41:         Optional<ServiceTokenInfo> serviceTokenInfoOp = Optional.ofNullable(serviceTokenInfoMapper.selectById(id));\n 42:         if (!serviceTokenInfoOp.isPresent()) {\n 43:             throw new BizException(String.format(\"当前服务不存在，id:%s\", id));\n 44:         }\n 45:         ServiceTokenInfo serviceTokenInfo = serviceTokenInfoOp.get();\n 46:         serviceTokenInfo.setEnable(!serviceTokenInfo.getEnable());\n 47:         serviceTokenInfo.setUpdateTime(new Date());\n 48:         serviceTokenInfoMapper.updateById(serviceTokenInfo);\n 49:         return serviceTokenInfo.getEnable();\n 50:     }\n 51: \n 52:     @Override\n 53:     public ServiceTokenInfo queryById(Long id) {\n 54:         return serviceTokenInfoMapper.selectById(id);\n 55:     }\n 56: \n 57:     @Override\n 58:     public boolean deleteServiceToken(Long id) {\n 59:         int row = serviceTokenInfoMapper.deleteById(id);\n 60:         return row == 1;\n 61:     }\n 62: public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) { // [禁止修改-目标实现]\n 63:         Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize); // [禁止修改-目标实现]\n 64:         LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc( // [禁止修改-目标实现]\n 65:             ServiceTokenInfo::getCreateTime); // [禁止修改-目标实现]\n 66:         if (StringUtils.isNotBlank(service)) { // [禁止修改-目标实现]\n 67:             queryWrapper.like(ServiceTokenInfo::getServiceName, service); // [禁止修改-目标实现]\n 68:         } // [禁止修改-目标实现]\n 69:         return serviceTokenInfoMapper.selectPage(page, queryWrapper); // [禁止修改-目标实现]\n 70:     } // [禁止修改-目标实现]\n 71: @Override\n 72:     public boolean isAdmin(String sub) {\n 73:         CredentialUserEntity credentialUserEntity = credentialUserService.queryUserInfoBySub(sub);\n 74:         return Optional.ofNullable(serviceTokenInfoMapper.isAdmin(credentialUserEntity.getId())).isPresent();\n 75:     }\n 76: \n 77:     private ServiceTokenInfo queryToken(String toFindToken) {\n 78:         Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n 79:         Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n 80:             .filter(\n 81:                 e -> StringUtils.equalsIgnoreCase(toFindToken, cacheTokenService.getDecryptString(e.getEncodeToken())))\n 82:             .findFirst();\n 83:         return opServiceTokenInfo.orElse(null);\n 84:     }\n 85: \n 86:     private String queryEncryToken(String toFindToken) {\n 87:         Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n 88:         Optional<ServiceTokenInfo> optionalServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n 89:             .filter(\n 90:                 e -> StringUtils.equalsIgnoreCase(cacheTokenService.getDecryptString(e.getEncodeToken()), toFindToken))\n 91:             .findAny();\n 92:         return optionalServiceTokenInfo.map(ServiceTokenInfo::getEncodeToken).orElse(null);\n 93:     }\n 94: \n 95:     @Override\n 96:     @CacheEvict(key = \"'TOKEN:'+#rawToken\", value = \"token\")\n 97:     @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n 98:     public boolean refreshServiceToken(String rawToken, String newToken) {\n 99:         String encryToken = sccCrypto.encrypt(newToken);\n100:         String rawEncrtyToken = queryEncryToken(rawToken);\n101: \n102:         if (StringUtils.isBlank(rawEncrtyToken)) {\n103:             return false;\n104:         }\n105:         ServiceTokenInfo rawServiceTokenInfo = serviceTokenInfoMapper.findFirstByEncodeToken(rawEncrtyToken);\n106:         if (rawServiceTokenInfo == null) {\n107:             log.info(\"query by raw Token error\");\n108:             return false;\n109:         }\n110: \n111:         String rawServiceTokenInfoServiceName = rawServiceTokenInfo.getServiceName();\n112:         ServiceTokenInfo.builder().id(rawServiceTokenInfo.getId()).encodeToken(encryToken);\n113: \n114:         int updateLines = serviceTokenInfoMapper.refreshServiceToken(rawServiceTokenInfo.getId(), encryToken);\n115:         if (updateLines == 0) {\n116:             log.info(\"refresh token error\");\n117:             return false;\n118:         }\n119: \n120:         ServiceTokenHistory history = ServiceTokenHistory.builder()\n121:             .priorToken(rawEncrtyToken)\n122:             .serviceName(rawServiceTokenInfoServiceName)\n123:             .build();\n124:         serviceTokenHistoryMapper.insert(history);\n125:         return true;\n126:     }\n127: \n128:     @Override\n129:     public String addNewServiceToken(String serviceName) {\n130:         String newKey = SecurityStringUtils.random(tokenLength, true, true);\n131:         String newEncrtyToken = sccCrypto.encrypt(newKey);\n132: \n133:         ServiceTokenInfo serviceTokenInfo = ServiceTokenInfo.builder()\n134:             .serviceName(serviceName)\n135:             .encodeToken(newEncrtyToken)\n136:             .createTime(new Date())\n137:             .updateTime(new Date())\n138:             .build();\n139:         serviceTokenInfoMapper.insert(serviceTokenInfo);\n140:         return newKey;\n141:     }\n142: }\n\n[RC_CONSTRAINTS]\nRecent Changes约束：\n1. 只能修改未标注为\"禁止修改\"的代码部分\n2. 每个RC都应该为实现TARGET_IMPLEMENTATION做准备工作\n3. 使用精确的行号定位和标准diff格式\n4. RC应该体现真实的开发演进过程\n5. **关键**：diff中的行号必须与上面给出的最终代码行号完全一致\n6. **倒推思维**：从最终状态倒推历史修改，不是在最终状态上继续开发\n\n[INTENT]\n请倒推出为了实现TARGET_IMPLEMENTATION，开发者做过的3次递进式准备工作：\n- hunks_3: 倒数第三次修改（最早的准备工作）\n- hunks_2: 倒数第二次修改（中间准备）\n- hunks_1: 最近一次修改（最后的准备工作）\n\n每次修改都应该：\n1. 基于精确的行号定位（与最终代码行号完全一致）\n2. 使用标准的unified diff格式\n3. 为实现TARGET_IMPLEMENTATION做必要准备\n4. 体现真实的开发思维过程\n5. **验证**：确保diff中的行号与最终代码中的实际行号匹配\n6. **倒推验证**：确保是从最终状态向前倒推的修改过程\n\n[RETURN FORMAT]\n### hunks_3 (倒数第三次修改，最早的准备工作)\n```json\n[\n    {\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }\n]\n```\n\n### hunks_2 (倒数第二次修改，中间准备)\n```json\n[\n    {\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }\n]\n```\n\n### hunks_1 (最近一次修改，最后的准备工作)\n```json\n[\n    {\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }\n]\n```\n\n### notes\n简要说明这3次准备工作如何为实现TARGET_IMPLEMENTATION做准备，体现倒推的逻辑思维"
  },
  "llm_response": "",
  "parsed_hunks": {},
  "validation_results": {},
  "usage": {},
  "original_benchmark": {
    "prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class SecurityStringUtils {\n    public static String normal(String str);\n    public static String random(int count, boolean letter, boolean numbers);\n    public static String random(int count);\n}\n```\n\nThe context above is:\n```java\n@Service\n@Slf4j\npublic class TokenDaoServiceImpl implements TokenDaoService {\n\n    @Autowired\n    ServiceTokenHistoryMapper serviceTokenHistoryMapper;\n\n    @Autowired\n    ServiceTokenInfoMapper serviceTokenInfoMapper;\n\n    @Autowired\n    CacheTokenService cacheTokenService;\n\n    @Autowired\n    CredentialUserService credentialUserService;\n\n    @Value(\"${fuxi.security.token.length:20}\")\n    Integer tokenLength;\n\n    @Autowired\n    SccCrypto sccCrypto;\n\n    @Override\n    @Cacheable(key = \"'TOKEN:'+#toValidToken\", value = \"token\", unless = \"#result == null\")\n    @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n    public String checkIfTokenValid(String toValidToken) {\n        ServiceTokenInfo result = queryToken(toValidToken);\n        return result == null || !result.getEnable() ? null : result.getServiceName();\n    }\n\n    @Override\n    public boolean refreshToken() {\n        log.info(\"refresh cache to avoid long time query\");\n        queryToken(SecurityStringUtils.random(10));\n        log.info(\"refresh cache finished\");\n        return true;\n    }\n\n    @Override\n    public boolean changeEnableStatus(Long id) {\n        Optional<ServiceTokenInfo> serviceTokenInfoOp = Optional.ofNullable(serviceTokenInfoMapper.selectById(id));\n        if (!serviceTokenInfoOp.isPresent()) {\n            throw new BizException(String.format(\"当前服务不存在，id:%s\", id));\n        }\n        ServiceTokenInfo serviceTokenInfo = serviceTokenInfoOp.get();\n        serviceTokenInfo.setEnable(!serviceTokenInfo.getEnable());\n        serviceTokenInfo.setUpdateTime(new Date());\n        serviceTokenInfoMapper.updateById(serviceTokenInfo);\n        return serviceTokenInfo.getEnable();\n    }\n\n    @Override\n    public ServiceTokenInfo queryById(Long id) {\n        return serviceTokenInfoMapper.selectById(id);\n    }\n\n    @Override\n    public boolean deleteServiceToken(Long id) {\n        int row = serviceTokenInfoMapper.deleteById(id);\n        return row == 1;\n    }\n```\n\nThe context below is:\n```java\n\n    @Override\n    public boolean isAdmin(String sub) {\n        CredentialUserEntity credentialUserEntity = credentialUserService.queryUserInfoBySub(sub);\n        return Optional.ofNullable(serviceTokenInfoMapper.isAdmin(credentialUserEntity.getId())).isPresent();\n    }\n\n    private ServiceTokenInfo queryToken(String toFindToken) {\n        Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n        Optional<ServiceTokenInfo> opServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n            .filter(\n                e -> StringUtils.equalsIgnoreCase(toFindToken, cacheTokenService.getDecryptString(e.getEncodeToken())))\n            .findFirst();\n        return opServiceTokenInfo.orElse(null);\n    }\n\n    private String queryEncryToken(String toFindToken) {\n        Iterable<ServiceTokenInfo> fullTokens = serviceTokenInfoMapper.selectList(null);\n        Optional<ServiceTokenInfo> optionalServiceTokenInfo = StreamSupport.stream(fullTokens.spliterator(), true)\n            .filter(\n                e -> StringUtils.equalsIgnoreCase(cacheTokenService.getDecryptString(e.getEncodeToken()), toFindToken))\n            .findAny();\n        return optionalServiceTokenInfo.map(ServiceTokenInfo::getEncodeToken).orElse(null);\n    }\n\n    @Override\n    @CacheEvict(key = \"'TOKEN:'+#rawToken\", value = \"token\")\n    @Timed(percentiles = {0.5, 0.75, 0.9, 0.95})\n    public boolean refreshServiceToken(String rawToken, String newToken) {\n        String encryToken = sccCrypto.encrypt(newToken);\n        String rawEncrtyToken = queryEncryToken(rawToken);\n\n        if (StringUtils.isBlank(rawEncrtyToken)) {\n            return false;\n        }\n        ServiceTokenInfo rawServiceTokenInfo = serviceTokenInfoMapper.findFirstByEncodeToken(rawEncrtyToken);\n        if (rawServiceTokenInfo == null) {\n            log.info(\"query by raw Token error\");\n            return false;\n        }\n\n        String rawServiceTokenInfoServiceName = rawServiceTokenInfo.getServiceName();\n        ServiceTokenInfo.builder().id(rawServiceTokenInfo.getId()).encodeToken(encryToken);\n\n        int updateLines = serviceTokenInfoMapper.refreshServiceToken(rawServiceTokenInfo.getId(), encryToken);\n        if (updateLines == 0) {\n            log.info(\"refresh token error\");\n            return false;\n        }\n\n        ServiceTokenHistory history = ServiceTokenHistory.builder()\n            .priorToken(rawEncrtyToken)\n            .serviceName(rawServiceTokenInfoServiceName)\n            .build();\n        serviceTokenHistoryMapper.insert(history);\n        return true;\n    }\n\n    @Override\n    public String addNewServiceToken(String serviceName) {\n        String newKey = SecurityStringUtils.random(tokenLength, true, true);\n        String newEncrtyToken = sccCrypto.encrypt(newKey);\n\n        ServiceTokenInfo serviceTokenInfo = ServiceTokenInfo.builder()\n            .serviceName(serviceName)\n            .encodeToken(newEncrtyToken)\n            .createTime(new Date())\n            .updateTime(new Date())\n            .build();\n        serviceTokenInfoMapper.insert(serviceTokenInfo);\n        return newKey;\n    }\n}\n```\n\nThe new feature is 使用mybatis-plus-page构建分页条件&&使用mybatis-plus-querywrapper构建查询条件.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\npublic IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.",
    "domain": "nl2code_java",
    "id": "api-security-service_z00806805#84",
    "good_example_response": "```java\n    public IPage<ServiceTokenInfo> queryAllService(Integer pageNum, Integer pageSize, String service) {\n        Page<ServiceTokenInfo> page = new Page<>(pageNum, pageSize);\n        LambdaQueryWrapper<ServiceTokenInfo> queryWrapper = new LambdaQueryWrapper<ServiceTokenInfo>().orderByDesc(\n            ServiceTokenInfo::getCreateTime);\n        if (StringUtils.isNotBlank(service)) {\n            queryWrapper.like(ServiceTokenInfo::getServiceName, service);\n        }\n        return serviceTokenInfoMapper.selectPage(page, queryWrapper);\n    }\n```",
    "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_352 && export PATH=$JAVA_HOME/bin:$PATH && mvn -DfailIfNoTests=false -Dmaven.test.failure.ignore=true -Dcheckstyle.skip=true clean test -f pom.xml  -e -Dtest=com/huawei/fuxi/security/service/impl/TokenDaoServiceImplTest",
    "extra_content": {
      "query": "使用mybatis-plus-page构建分页条件&&使用mybatis-plus-querywrapper构建查询条件",
      "diff_path": "/docker/JavaRunProject/api-security-service_z00806805/diff/84.patch",
      "test_result": "pass",
      "file_path": "/src/main/java/com/huawei/fuxi/security/service/impl/TokenDaoServiceImpl.java",
      "start_line": 100,
      "end_line": 109,
      "work_dir": "/docker/JavaRunProject/api-security-service_z00806805/"
    }
  }
}