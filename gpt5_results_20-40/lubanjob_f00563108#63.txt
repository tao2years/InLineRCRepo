### hunks\_3 (倒数第三次修改，最早的准备工作)

```json
[
  {
    "file_path": "AbstractRemoteCallService.java",
    "start_line": 21,
    "end_line": 26,
    "diff_content": "@@ -21,6 +21,6 @@\n         synchronized (this) {\n             if (lubanRestTemplate != null) {\n                 return lubanRestTemplate;\n             }\n-            lubanRestTemplate = new LubanRestTemplate();\n+            lubanRestTemplate = new LubanRestTemplate(connectTimeout, readTimeout, connectionRequestTimeout);\n         }\n"
  }
]
```

### hunks\_2 (倒数第二次修改，中间准备)

```json
[
  {
    "file_path": "AbstractRemoteCallService.java",
    "start_line": 61,
    "end_line": 73,
    "diff_content": "@@ -61,13 +61,13 @@\n             } catch (RestClientResponseException logException) { // 服务器端返回错误了\n                 int status = logException.getRawStatusCode();\n                 String body = logException.getResponseBodyAsString();\n                 LOG.warn(\"getForObject has restClientResponseException, message: \" + body, logException);\n-                throw new ApiClientException(body, logException);\n+                ErrorMessage em = JSON.parseObject(logException.getResponseBodyAsString(), ErrorMessage.class);\n+                if (em == null) {\n+                    throw new ApiClientException(body, logException);\n+                }\n+                if (em.getErrorCode() == null) {\n+                    throw new ApiClientException(\"server return wrong vo:status:\" + status + \",body:\" + body);\n+                } else {\n+                    throw new ApiClientException(em);\n+                }\n \n             } catch (RestClientException logException) { // 客户端的数据\n \n                 ex = logException;\n                 continue;\n             }\n"
  }
]
```

### hunks\_1 (最近一次修改，最后的准备工作)

```json
[
  {
    "file_path": "AbstractRemoteCallService.java",
    "start_line": 80,
    "end_line": 87,
    "diff_content": "@@ -80,8 +80,11 @@\n         }\n \n-        return response.getBody();\n+        if (response == null) {\n+            throw new ApiClientException(\"failed to call:\" + availableAddress.toString(), ex);\n+        }\n+\n+        return response.getBody();\n     }\n"
  }
]
```

### notes

* **RC3（行21–26）**：把 `getLubanRestTemplate()` 中的无参构造替换为带超时参数的构造，提前铺好稳定的超时与连接管理能力，确保后续重试/容错策略生效有基础设施支撑。
* **RC2（行61–73）**：丰富服务端异常处理逻辑，引入 `ErrorMessage` 解析与按 `errorCode` 分支抛出，便于上层感知明确的失败原因，为目标实现中的一致异常语义做铺垫。
* **RC1（行80–87）**：补充“兜底”判空与统一异常抛出（当所有可用地址都失败时），在返回响应体前确保失败路径被明确处理，形成与目标实现一致的健壮性。

以上三步均只变更**未标注为禁止修改**的区域；它们依次完善网络层基础能力、异常建模与最终失败收敛，体现从基础设施 → 语义化错误 → 完整兜底的倒推演进路径。
