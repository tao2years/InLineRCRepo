### hunks\_3 (倒数第三次修改，最早的准备工作)

```json
[
  {
    "file_path": "RocketMQServiceImpl.java",
    "start_line": 20,
    "end_line": 23,
    "diff_content": "@@ -20,4 +20,4 @@\n     @Override\n-    public SendResult sendMessage(String topicName, String tags, Object msg) {\n-        return this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), msg);\n-    }\n+    public SendResult sendMessage(String topicName, String tags, Object msg) {\n+        return this.sendMessage(topicName, tags, null, msg);\n+    }\n"
  }
]
```

### hunks\_2 (倒数第二次修改，中间准备)

```json
[
  {
    "file_path": "RocketMQServiceImpl.java",
    "start_line": 27,
    "end_line": 34,
    "diff_content": "@@ -27,8 +27,8 @@\n         MessageBuilder<?> messageBuilder = MessageBuilder.withPayload(msg);\n         //设置key,唯一标识码要设置到keys字段，方便将来定位消息丢失问题\n         if (StringUtils.isNotBlank(key)) {\n             messageBuilder.setHeader(MessageConst.PROPERTY_KEYS, key);\n         }\n         Message<?> message = messageBuilder.build();\n-        SendResult sendResult = this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), msg);\n+        SendResult sendResult = this.rocketMqTemplate.syncSend(StringUtils.isBlank(tags) ? topicName : (topicName + \":\" + tags), message);\n         if (SendStatus.SEND_OK.equals(sendResult.getSendStatus())) {\n"
  }
]
```

### hunks\_1 (最近一次修改，最后的准备工作)

```json
[
  {
    "file_path": "RocketMQServiceImpl.java",
    "start_line": 80,
    "end_line": 93,
    "diff_content": "@@ -80,14 +80,14 @@\n     @Override\n-    public void sendBatchMessage(String destination, List<?> list) {\n-    }\n+    public void sendBatchMessage(String destination, List<?> list) {\n+        String topicName = destination;\n+        String tags = \"\";\n+\n+        String[] split = destination.split(\":\");\n+        if (split.length == 2) {\n+            topicName = split[0];\n+            tags = split[1];\n+        }\n+        this.sendBatchMessage(topicName, tags, 30000L, list);\n+    }\n \n     @Override\n"
  }
]
```

### notes

* **RC3（行20–23）**：将 `sendMessage(topicName, tags, Object)` 从直接发送改为**委托**到四参重载，统一出入口，便于后续扩展（批量、超时、keys 等）集中处理。
* **RC2（行27–34）**：把发送的入参从原始 `msg` 切换为构造好的 `Message`，确保头部（如 `keys`、自定义属性）能随消息一起下发。
* **RC1（行80–93）**：补全 `sendBatchMessage(destination, List)` 的**拆解与转发逻辑**，解析 `topic:tags`，并统一委托到三参批量方法，为最终版本的批量与事务能力对齐铺路。

以上步骤均未触碰“禁止修改”的事务发送方法 `sendMessageInTransaction(...)`，并且每一步都是朝向最终代码形态的正向补丁。
