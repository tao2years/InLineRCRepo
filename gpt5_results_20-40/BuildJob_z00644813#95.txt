### hunks\_3 (倒数第三次修改，最早的准备工作)

```json
[
  {
    "file_path": "ThreadPoolManager.java",
    "start_line": 5,
    "end_line": 7,
    "diff_content": "@@ -5,3 +5,3 @@\n-public static ExecutorService newCachedThreadPool() {\n-        return null;\n-    }\n+public static ExecutorService newCachedThreadPool() {\n+        return Executors.newCachedThreadPool();\n+    }\n"
  }
]
```

### hunks\_2 (倒数第二次修改，中间准备)

```json
[
  {
    "file_path": "ThreadPoolManager.java",
    "start_line": 9,
    "end_line": 11,
    "diff_content": "@@ -9,3 +9,3 @@\n-    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n-        return null;\n-    }\n+    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n+        return Executors.newScheduledThreadPool(corePoolSize);\n+    }\n"
  }
]
```

### hunks\_1 (最近一次修改，最后的准备工作)

```json
[
  {
    "file_path": "ThreadPoolManager.java",
    "start_line": 1,
    "end_line": 1,
    "diff_content": "@@ -1,1 +1,1 @@\n-public class ThreadPools {\n+public class ThreadPoolManager {\n"
  }
]
```

### notes

* **RC3（地基）**：实现 `newCachedThreadPool` 的最终返回逻辑（5–7），提供基础的线程池工厂方法，配套目标实现的固定线程池创建语义。
* **RC2（能力补齐）**：补齐 `newScheduledThreadPool` 的创建逻辑（9–11），完善定时线程池的统一入口，形成与目标方法一致的 `Executors.*` 工厂风格。
* **RC1（最后准备）**：将类名由占位名统一为最终的 `ThreadPoolManager`（第 1 行），与类职责相符，确保对外 API 命名一致。

以上三步均为**正向演进补丁**，所有 `+` 行逐字匹配最终代码；并且**未触碰** 2–4 行的**禁止修改区域**（`newFixedThreadPool(int)` 目标实现）。
