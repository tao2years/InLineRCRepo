### hunks\_3 (倒数第三次修改，最早的准备工作)

```json
[
  {
    "file_path": "KafkaProducerService.java",
    "start_line": 5,
    "end_line": 9,
    "diff_content": "@@ -5,5 +5,5 @@\n-    // legacy: used static template, no DI\n-    private static KafkaTemplate<String, String> staticTemplate;\n-    public KafkaProducerService() {}\n+    private final KafkaTemplate<String, String> kafkaTemplate;\n+\n+    public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {\n+        this.kafkaTemplate = kafkaTemplate;\n+    }\n"
  }
]
```

### hunks\_2 (倒数第二次修改，中间准备)

```json
[
  {
    "file_path": "KafkaProducerService.java",
    "start_line": 11,
    "end_line": 24,
    "diff_content": "@@ -11,14 +11,14 @@\n-    // TODO: basic send without validation\n-    public void send(String topic, String message) {\n-        kafkaTemplate.send(topic, message);\n-    }\n+    /**\n+     * 发送消息到 Kafka 指定主题\n+     *\n+     * @param topic 目标主题\n+     * @param key 消息键\n+     * @param message 消息内容\n+     * @throws IllegalArgumentException 如果主题为空或无效\n+     */\n+    public ListenableFuture<?> sendMessage(String topic, String key, String message) {\n+        if (topic == null || topic.trim().isEmpty()) {\n+            throw new IllegalArgumentException(\"Topic must not be null or empty\");\n+        }\n+        return kafkaTemplate.send(topic, key, message);\n+    }\n"
  }
]
```

### hunks\_1 (最近一次修改，最后的准备工作)

```json
[
  {
    "file_path": "KafkaProducerService.java",
    "start_line": 26,
    "end_line": 39,
    "diff_content": "@@ -26,14 +26,14 @@\n-    // TODO: expose callback style later\n-    // public void sendAsync(...) { }\n+    /**\n+     * 带回调的方法\n+     *\n+     * @param topic\n+     * @param key\n+     * @param message\n+     * @param successCallback\n+     * @param failureCallback\n+     */\n+    public void sendWithCallback(String topic, String key, String message, Runnable successCallback,\n+        Runnable failureCallback) {\n+        ListenableFuture<?> future = sendMessage(topic, key, message);\n+        future.addCallback(result -> successCallback.run(), ex -> failureCallback.run());\n+    }\n"
  }
]
```

### notes

* **RC3（5–9 行）**：去掉旧的静态 `KafkaTemplate` 用法与无参构造器，引入 `kafkaTemplate` 成员并通过构造器注入，为后续实例方法发送与回调奠定依赖注入基础。
* **RC2（11–24 行）**：将原始的“无校验发送”替换为带参数校验与返回 `ListenableFuture<?>` 的 `sendMessage`，使调用方可获得异步结果并提升健壮性。
* **RC1（26–39 行）**：新增带回调的便捷方法 `sendWithCallback`，基于 `sendMessage` 的返回值统一封装成功/失败回调，完善最终对外 API。

以上三步均未触碰**禁止修改**区域（40–48 行的 `configureKafkaTemplate`），并逐步为目标实现提供可复用的发送能力与依赖配置承载点。
