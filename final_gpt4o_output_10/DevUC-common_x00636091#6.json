{
  "benchmark_id": "DevUC-common_x00636091#6",
  "timestamp": "2025-09-17T10:11:01.425904",
  "model_used": "gpt-4o-2024-11-20",
  "selected_region": "private static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)",
  "target_implementation": "public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }",
  "final_code_with_annotations": "  1: @Slf4j\n  2: public class RedisConnectFactoryBuilder {\n  3:     /**\n  4:      * redis模式——standalone\n  5:      */\n  6:     public static final String REDIS_MODE_STANDALONE = \"standalone\";\n  7: \n  8:     /**\n  9:      * redis模式——cluster\n 10:      */\n 11:     public static final String REDIS_MODE_CLUSTER = \"cluster\";\n 12: \n 13:     /**\n 14:      * redis模式——sentinel\n 15:      */\n 16:     public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n 17: \n 18:     /**\n 19:      * redis客户端类型——jedis\n 20:      */\n 21:     public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n 22: \n 23:     /**\n 24:      * redis客户端类型——lettuce\n 25:      */\n 26:     public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n 27: \n 28:     private RedisConnectFactoryBuilder() {\n 29:     }\n 30: \n 31:     /**\n 32:      * 根据config构建响应的redis连接工厂\n 33:      *\n 34:      * @param redisConfig redis配置项\n 35:      * @return redis连接工厂\n 36:      */\n 37:     public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) { // [禁止修改-目标实现]\n 38:         return switch (redisConfig.getClientType()) { // [禁止修改-目标实现]\n 39:             case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig); // [禁止修改-目标实现]\n 40:             case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig); // [禁止修改-目标实现]\n 41:             default -> // [禁止修改-目标实现]\n 42:                 throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType())); // [禁止修改-目标实现]\n 43:         }; // [禁止修改-目标实现]\n 44:     } // [禁止修改-目标实现]\n 45: \n 46:     private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n 47:         JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n 48:             .connectTimeout(redisConfig.getConnectTimeout())\n 49:             .readTimeout(redisConfig.getReadTimeout())\n 50:             .usePooling()\n 51:             .poolConfig(redisConfig.getPool())\n 52:             .build();\n 53:         switch (redisConfig.getRedisMode()) {\n 54:             case REDIS_MODE_STANDALONE -> {\n 55:                 RedisStandaloneConfiguration standaloneConfiguration =\n 56:                     createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n 57:                 return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n 58:             }\n 59:             case REDIS_MODE_CLUSTER -> {\n 60:                 RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n 61:                 return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n 62:             }\n 63:             case REDIS_MODE_SENTINEL -> {\n 64:                 RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n 65:                 return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n 66:             }\n 67:             default ->\n 68:                 throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n 69:         }\n 70:     }\n 71: public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n 72:         return switch (redisConfig.getClientType()) {\n 73:             case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n 74:             case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n 75:             default ->\n 76:                 throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n 77:         };\n 78:     }\n 79: private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n 80:         String host) {\n 81:         RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n 82:         configuration.setPassword(redisConfig.getPassword());\n 83:         String[] items = host.trim().split(\":\");\n 84:         configuration.setHostName(items[0].trim());\n 85:         configuration.setPort(Integer.parseInt(items[1].trim()));\n 86:         configuration.setDatabase(redisConfig.getDatabase());\n 87:         return configuration;\n 88:     }\n 89: \n 90:     private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n 91:         RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n 92:         List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n 93:             String[] items = host.split(\":\");\n 94:             return new RedisNode(items[0], Integer.parseInt(items[1]));\n 95:         }).collect(Collectors.toList());\n 96:         configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n 97:         configuration.setClusterNodes(redisNodes);\n 98:         configuration.setPassword(redisConfig.getPassword());\n 99:         return configuration;\n100:     }\n101: \n102:     private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n103:         Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n104:         RedisSentinelConfiguration configuration =\n105:             new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n106:         configuration.setPassword(redisConfig.getPassword());\n107:         return configuration;\n108:     }\n109: }",
  "prompt": {
    "system_prompt": "你是资深 Java 工程师。现在给你一个完整的代码文件（最终状态），你需要**倒推**出为了达到这个最终状态而**刚刚**做过的3次递进式代码修改（Recent Changes）。\n\n核心逻辑：\n- 给出的代码是最终完整状态，每行都有行号标注\n- 你需要倒推出3个历史版本的修改过程\n- 演进路径：初始版本 → RC3 → RC2 → RC1 → 当前最终版本\n- **关键**：不要在最终状态基础上再做修改，而是倒推出达到最终状态的历史修改过程\n\n重要约束：\n1. **禁止修改区域**：不能修改标注为\"禁止修改\"的代码部分\n2. **只能修改**：其他未标注为禁止修改的代码部分\n3. **不新增**：import/依赖；不修改方法签名/可见性；不创建/删除类\n4. **RC目标**：每个RC都应该为实现目标功能做准备工作\n5. **diff格式**：使用标准的unified diff格式，包含行号和+/-操作\n6. **行号准确性**：diff中的行号必须与给出的带行号代码完全一致\n7. **倒推逻辑**：从最终状态向前倒推，不是在最终状态上继续修改\n\n技术要求：\n- 每个 hunk 包含：file_path、start_line、end_line、diff_content（标准unified diff格式）\n- 使用精确的行号定位，基于给出的带行号的代码\n- diff_content必须包含真实的删除(-)和新增(+)操作\n- **重要**：diff中的行号必须与最终代码的实际行号匹配",
    "user_prompt": "[SELECTED_REGION] - 禁止修改\n选中的代码区域（不可修改）：\nprivate static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)\n\n[TARGET_IMPLEMENTATION] - 禁止修改\n目标实现代码（不可修改）：\npublic static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }\n\n[FINAL_CODE_WITH_LINE_NUMBERS] - 最终状态（带行号和标注）\n以下是最终完整代码状态，每行都有行号标注，并标注了禁止修改的区域：\n  1: @Slf4j\n  2: public class RedisConnectFactoryBuilder {\n  3:     /**\n  4:      * redis模式——standalone\n  5:      */\n  6:     public static final String REDIS_MODE_STANDALONE = \"standalone\";\n  7: \n  8:     /**\n  9:      * redis模式——cluster\n 10:      */\n 11:     public static final String REDIS_MODE_CLUSTER = \"cluster\";\n 12: \n 13:     /**\n 14:      * redis模式——sentinel\n 15:      */\n 16:     public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n 17: \n 18:     /**\n 19:      * redis客户端类型——jedis\n 20:      */\n 21:     public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n 22: \n 23:     /**\n 24:      * redis客户端类型——lettuce\n 25:      */\n 26:     public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n 27: \n 28:     private RedisConnectFactoryBuilder() {\n 29:     }\n 30: \n 31:     /**\n 32:      * 根据config构建响应的redis连接工厂\n 33:      *\n 34:      * @param redisConfig redis配置项\n 35:      * @return redis连接工厂\n 36:      */\n 37:     public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) { // [禁止修改-目标实现]\n 38:         return switch (redisConfig.getClientType()) { // [禁止修改-目标实现]\n 39:             case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig); // [禁止修改-目标实现]\n 40:             case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig); // [禁止修改-目标实现]\n 41:             default -> // [禁止修改-目标实现]\n 42:                 throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType())); // [禁止修改-目标实现]\n 43:         }; // [禁止修改-目标实现]\n 44:     } // [禁止修改-目标实现]\n 45: \n 46:     private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n 47:         JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n 48:             .connectTimeout(redisConfig.getConnectTimeout())\n 49:             .readTimeout(redisConfig.getReadTimeout())\n 50:             .usePooling()\n 51:             .poolConfig(redisConfig.getPool())\n 52:             .build();\n 53:         switch (redisConfig.getRedisMode()) {\n 54:             case REDIS_MODE_STANDALONE -> {\n 55:                 RedisStandaloneConfiguration standaloneConfiguration =\n 56:                     createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n 57:                 return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n 58:             }\n 59:             case REDIS_MODE_CLUSTER -> {\n 60:                 RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n 61:                 return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n 62:             }\n 63:             case REDIS_MODE_SENTINEL -> {\n 64:                 RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n 65:                 return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n 66:             }\n 67:             default ->\n 68:                 throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n 69:         }\n 70:     }\n 71: public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n 72:         return switch (redisConfig.getClientType()) {\n 73:             case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n 74:             case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n 75:             default ->\n 76:                 throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n 77:         };\n 78:     }\n 79: private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n 80:         String host) {\n 81:         RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n 82:         configuration.setPassword(redisConfig.getPassword());\n 83:         String[] items = host.trim().split(\":\");\n 84:         configuration.setHostName(items[0].trim());\n 85:         configuration.setPort(Integer.parseInt(items[1].trim()));\n 86:         configuration.setDatabase(redisConfig.getDatabase());\n 87:         return configuration;\n 88:     }\n 89: \n 90:     private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n 91:         RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n 92:         List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n 93:             String[] items = host.split(\":\");\n 94:             return new RedisNode(items[0], Integer.parseInt(items[1]));\n 95:         }).collect(Collectors.toList());\n 96:         configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n 97:         configuration.setClusterNodes(redisNodes);\n 98:         configuration.setPassword(redisConfig.getPassword());\n 99:         return configuration;\n100:     }\n101: \n102:     private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n103:         Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n104:         RedisSentinelConfiguration configuration =\n105:             new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n106:         configuration.setPassword(redisConfig.getPassword());\n107:         return configuration;\n108:     }\n109: }\n\n[RC_CONSTRAINTS]\nRecent Changes约束：\n1. 只能修改未标注为\"禁止修改\"的代码部分\n2. 每个RC都应该为实现TARGET_IMPLEMENTATION做准备工作\n3. 使用精确的行号定位和标准diff格式\n4. RC应该体现真实的开发演进过程\n5. **关键**：diff中的行号必须与上面给出的最终代码行号完全一致\n6. **倒推思维**：从最终状态倒推历史修改，不是在最终状态上继续开发\n\n[INTENT]\n请倒推出为了实现TARGET_IMPLEMENTATION，开发者做过的3次递进式准备工作：\n- hunks_3: 倒数第三次修改（最早的准备工作）\n- hunks_2: 倒数第二次修改（中间准备）\n- hunks_1: 最近一次修改（最后的准备工作）\n\n每次修改都应该：\n1. 基于精确的行号定位（与最终代码行号完全一致）\n2. 使用标准的unified diff格式\n3. 为实现TARGET_IMPLEMENTATION做必要准备\n4. 体现真实的开发思维过程\n5. **验证**：确保diff中的行号与最终代码中的实际行号匹配\n6. **倒推验证**：确保是从最终状态向前倒推的修改过程\n\n[RETURN FORMAT]\n### hunks_3 (倒数第三次修改，最早的准备工作)\n```json\n[\n    {\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }\n]\n```\n\n### hunks_2 (倒数第二次修改，中间准备)\n```json\n[\n    {\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }\n]\n```\n\n### hunks_1 (最近一次修改，最后的准备工作)\n```json\n[\n    {\n        \"file_path\": \"ClassName.java\",\n        \"start_line\": 实际行号,\n        \"end_line\": 实际行号,\n        \"diff_content\": \"@@ -实际行号,行数 +实际行号,行数 @@\\\\n 上下文行\\\\n-删除的行\\\\n+新增的行\\\\n 上下文行\"\n    }\n]\n```\n\n### notes\n简要说明这3次准备工作如何为实现TARGET_IMPLEMENTATION做准备，体现倒推的逻辑思维"
  },
  "llm_response": "### hunks_3 (倒数第三次修改，最早的准备工作)\n\n在最早的准备工作中，开发者需要定义与 Redis 的不同模式相关的常量。这是为了在后续实现中使用这些常量来区分 Redis 的不同模式。\n\n```json\n[\n    {\n        \"file_path\": \"RedisConnectFactoryBuilder.java\",\n        \"start_line\": 6,\n        \"end_line\": 26,\n        \"diff_content\": \"@@ -6,21 +6,21 @@\\\\n  * redis模式——standalone\\\\n  */\\\\n public static final String REDIS_MODE_STANDALONE = \\\"standalone\\\";\\\\n \\\\n /**\\\\n  * redis模式——cluster\\\\n  */\\\\n public static final String REDIS_MODE_CLUSTER = \\\"cluster\\\";\\\\n \\\\n /**\\\\n  * redis模式——sentinel\\\\n  */\\\\n public static final String REDIS_MODE_SENTINEL = \\\"sentinel\\\";\\\\n \\\\n /**\\\\n  * redis客户端类型——jedis\\\\n  */\\\\n public static final String REDIS_CLIENT_TYPE_JEDIS = \\\"jedis\\\";\\\\n \\\\n /**\\\\n  * redis客户端类型——lettuce\\\\n  */\\\\n public static final String REDIS_CLIENT_TYPE_LETTUCE = \\\"lettuce\\\";\\\\n \\\\n private RedisConnectFactoryBuilder() {\\\\n }\\\\n\"\n    }\n]\n```\n\n### hunks_2",
  "parsed_hunks": {
    "hunks_3": [
      {
        "file_path": "RedisConnectFactoryBuilder.java",
        "start_line": 6,
        "end_line": 26,
        "diff_content": "@@ -6,21 +6,21 @@\\n  * redis模式——standalone\\n  */\\n public static final String REDIS_MODE_STANDALONE = \"standalone\";\\n \\n /**\\n  * redis模式——cluster\\n  */\\n public static final String REDIS_MODE_CLUSTER = \"cluster\";\\n \\n /**\\n  * redis模式——sentinel\\n  */\\n public static final String REDIS_MODE_SENTINEL = \"sentinel\";\\n \\n /**\\n  * redis客户端类型——jedis\\n  */\\n public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\\n \\n /**\\n  * redis客户端类型——lettuce\\n  */\\n public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\\n \\n private RedisConnectFactoryBuilder() {\\n }\\n"
      }
    ],
    "hunks_2": [],
    "hunks_1": []
  },
  "validation_results": {
    "total_issues": 0,
    "total_lines": 109
  },
  "usage": {
    "prompt_tokens": 2535,
    "completion_tokens": 313,
    "total_tokens": 2848,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "original_benchmark": {
    "prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RedisRecoveryTimer {\n    public static void markRedisRecovery(); /* 提供外部使用接口，标记redis已恢复，监控组件尝试重启工厂以达到恢复连接的效果 */\n    public static void addInstance(WrappedRedisConnectionFactory factory, RedisMessageListenerContainer container); /* 添加待监控的连接工厂和redis消息监听容器,将其维护到监控集合 */\n}\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class RedisConnectFactoryBuilder {\n    /**\n     * redis模式——standalone\n     */\n    public static final String REDIS_MODE_STANDALONE = \"standalone\";\n\n    /**\n     * redis模式——cluster\n     */\n    public static final String REDIS_MODE_CLUSTER = \"cluster\";\n\n    /**\n     * redis模式——sentinel\n     */\n    public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n\n    /**\n     * redis客户端类型——jedis\n     */\n    public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n\n    /**\n     * redis客户端类型——lettuce\n     */\n    public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n\n    private RedisConnectFactoryBuilder() {\n    }\n\n    /**\n     * 根据config构建响应的redis连接工厂\n     *\n     * @param redisConfig redis配置项\n     * @return redis连接工厂\n     */\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }\n\n    private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n        JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n            .connectTimeout(redisConfig.getConnectTimeout())\n            .readTimeout(redisConfig.getReadTimeout())\n            .usePooling()\n            .poolConfig(redisConfig.getPool())\n            .build();\n        switch (redisConfig.getRedisMode()) {\n            case REDIS_MODE_STANDALONE -> {\n                RedisStandaloneConfiguration standaloneConfiguration =\n                    createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n                return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n            }\n            case REDIS_MODE_CLUSTER -> {\n                RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n                return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n            }\n            case REDIS_MODE_SENTINEL -> {\n                RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n                return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n            }\n            default ->\n                throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n        }\n    }\n```\n\nThe context below is:\n```java\n\n    private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n        String host) {\n        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n        configuration.setPassword(redisConfig.getPassword());\n        String[] items = host.trim().split(\":\");\n        configuration.setHostName(items[0].trim());\n        configuration.setPort(Integer.parseInt(items[1].trim()));\n        configuration.setDatabase(redisConfig.getDatabase());\n        return configuration;\n    }\n\n    private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n        RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n        List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n            String[] items = host.split(\":\");\n            return new RedisNode(items[0], Integer.parseInt(items[1]));\n        }).collect(Collectors.toList());\n        configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n        configuration.setClusterNodes(redisNodes);\n        configuration.setPassword(redisConfig.getPassword());\n        return configuration;\n    }\n\n    private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n        Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n        RedisSentinelConfiguration configuration =\n            new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n        configuration.setPassword(redisConfig.getPassword());\n        return configuration;\n    }\n}\n```\n\nThe new feature is 根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprivate static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.",
    "domain": "nl2code_java",
    "id": "DevUC-common_x00636091#6",
    "good_example_response": "```java\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }```",
    "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn clean test -pl jin-cache",
    "extra_content": {
      "query": "根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory",
      "diff_path": "/docker/JavaRunProject/DevUC-common_x00636091/diff/6.patch",
      "test_result": "pass",
      "file_path": "/jin-cache/src/main/java/com/huawei/coral/cache/redis/connection/RedisConnectFactoryBuilder.java",
      "start_line": 75,
      "end_line": 82,
      "work_dir": "/docker/JavaRunProject/DevUC-common_x00636091/"
    }
  }
}