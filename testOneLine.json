{"prompt": "A user is developing a new feature. Based on the known code information, help him implement this new feature.\n\nBelow are some information from external classes imported by current file:\n```java\npublic class RedisRecoveryTimer {\n    public static void markRedisRecovery(); /* 提供外部使用接口，标记redis已恢复，监控组件尝试重启工厂以达到恢复连接的效果 */\n    public static void addInstance(WrappedRedisConnectionFactory factory, RedisMessageListenerContainer container); /* 添加待监控的连接工厂和redis消息监听容器,将其维护到监控集合 */\n}\n```\n\nThe context above is:\n```java\n@Slf4j\npublic class RedisConnectFactoryBuilder {\n    /**\n     * redis模式——standalone\n     */\n    public static final String REDIS_MODE_STANDALONE = \"standalone\";\n\n    /**\n     * redis模式——cluster\n     */\n    public static final String REDIS_MODE_CLUSTER = \"cluster\";\n\n    /**\n     * redis模式——sentinel\n     */\n    public static final String REDIS_MODE_SENTINEL = \"sentinel\";\n\n    /**\n     * redis客户端类型——jedis\n     */\n    public static final String REDIS_CLIENT_TYPE_JEDIS = \"jedis\";\n\n    /**\n     * redis客户端类型——lettuce\n     */\n    public static final String REDIS_CLIENT_TYPE_LETTUCE = \"lettuce\";\n\n    private RedisConnectFactoryBuilder() {\n    }\n\n    /**\n     * 根据config构建响应的redis连接工厂\n     *\n     * @param redisConfig redis配置项\n     * @return redis连接工厂\n     */\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }\n\n    private static JedisConnectionFactory buildJedisConnectFactory(JinCacheRedisConfiguration redisConfig) {\n        JedisClientConfiguration clientConfiguration = JedisClientConfiguration.builder()\n            .connectTimeout(redisConfig.getConnectTimeout())\n            .readTimeout(redisConfig.getReadTimeout())\n            .usePooling()\n            .poolConfig(redisConfig.getPool())\n            .build();\n        switch (redisConfig.getRedisMode()) {\n            case REDIS_MODE_STANDALONE -> {\n                RedisStandaloneConfiguration standaloneConfiguration =\n                    createStandaloneConfiguration(redisConfig, redisConfig.getHosts());\n                return new JedisConnectionFactory(standaloneConfiguration, clientConfiguration);\n            }\n            case REDIS_MODE_CLUSTER -> {\n                RedisClusterConfiguration clusterConfiguration = createClusterConfiguration(redisConfig);\n                return new JedisConnectionFactory(clusterConfiguration, clientConfiguration);\n            }\n            case REDIS_MODE_SENTINEL -> {\n                RedisSentinelConfiguration sentinelConfiguration = createSentinelConfiguration(redisConfig);\n                return new JedisConnectionFactory(sentinelConfiguration, clientConfiguration);\n            }\n            default ->\n                throw new JinCacheException(String.format(\"not supported redis mode %s\", redisConfig.getRedisMode()));\n        }\n    }\n```\n\nThe context below is:\n```java\n\n    private static RedisStandaloneConfiguration createStandaloneConfiguration(JinCacheRedisConfiguration redisConfig,\n        String host) {\n        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n        configuration.setPassword(redisConfig.getPassword());\n        String[] items = host.trim().split(\":\");\n        configuration.setHostName(items[0].trim());\n        configuration.setPort(Integer.parseInt(items[1].trim()));\n        configuration.setDatabase(redisConfig.getDatabase());\n        return configuration;\n    }\n\n    private static RedisClusterConfiguration createClusterConfiguration(JinCacheRedisConfiguration redisConfig) {\n        RedisClusterConfiguration configuration = new RedisClusterConfiguration();\n        List<RedisNode> redisNodes = Arrays.stream(redisConfig.getHosts().split(\",\")).map(host -> {\n            String[] items = host.split(\":\");\n            return new RedisNode(items[0], Integer.parseInt(items[1]));\n        }).collect(Collectors.toList());\n        configuration.setMaxRedirects(redisConfig.getMaxRedirects());\n        configuration.setClusterNodes(redisNodes);\n        configuration.setPassword(redisConfig.getPassword());\n        return configuration;\n    }\n\n    private static RedisSentinelConfiguration createSentinelConfiguration(JinCacheRedisConfiguration redisConfig) {\n        Set<String> sentinelHostAndPorts = Arrays.stream(redisConfig.getHosts().split(\",\")).collect(Collectors.toSet());\n        RedisSentinelConfiguration configuration =\n            new RedisSentinelConfiguration(redisConfig.getMasterName(), sentinelHostAndPorts);\n        configuration.setPassword(redisConfig.getPassword());\n        return configuration;\n    }\n}\n```\n\nThe new feature is 根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory.\n\nAnd here is the code snippet you are asked to modify:\n```java\n\nprivate static LettuceConnectionFactory buildLettuceConnectFactory(JinCacheRedisConfiguration redisConfig)\n```\n\nPlease analyze the mission carefully and thoroughly first, and then give a definitely runnable code. You should put your code between ```java and ```.", "domain": "nl2code_java", "id": "DevUC-common_x00636091#6", "good_example_response": "```java\n    public static RedisConnectionFactory build(JinCacheRedisConfiguration redisConfig) {\n        return switch (redisConfig.getClientType()) {\n            case REDIS_CLIENT_TYPE_JEDIS -> buildJedisConnectFactory(redisConfig);\n            case REDIS_CLIENT_TYPE_LETTUCE -> buildLettuceConnectFactory(redisConfig);\n            default ->\n                throw new JinCacheException(String.format(\"not supported client type %s\", redisConfig.getClientType()));\n        };\n    }```", "reward_command": "export JAVA_HOME=/usr/lib/jvm/jdk-17.0.6 && export PATH=$JAVA_HOME/bin:$PATH && mvn clean test -pl jin-cache", "extra_content": {"query": "根据JinCacheRedisConfiguration创建RedisClusterConfiguration，并生成JedisConnectionFactory", "diff_path": "/docker/JavaRunProject/DevUC-common_x00636091/diff/6.patch", "test_result": "pass", "file_path": "/jin-cache/src/main/java/com/huawei/coral/cache/redis/connection/RedisConnectFactoryBuilder.java", "start_line": 75, "end_line": 82, "work_dir": "/docker/JavaRunProject/DevUC-common_x00636091/"}}